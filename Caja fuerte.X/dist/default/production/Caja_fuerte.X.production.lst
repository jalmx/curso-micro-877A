

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 16 16:46:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.05
    22                           ; Generated 20/12/2018 GMT
    23                           ; 
    24                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175                           
   176                           	psect	strings
   177  0003                     __pstrings:	
   178  0003                     stringtab:	
   179  0003                     __stringtab:	
   180  0003                     stringcode:	
   181                           ;	String table - string pointers are 1 byte each
   182                           
   183  0003                     stringdir:	
   184  0003  3000               	movlw	high stringdir
   185  0004  008A               	movwf	10
   186  0005  0804               	movf	4,w
   187  0006  0A84               	incf	4,f
   188  0007  0782               	addwf	2,f
   189  0008                     __stringbase:	
   190  0008  3400               	retlw	0
   191  0009                     __end_of__stringtab:	
   192  0009                     _keyPadMatrix:	
   193  0009  3437               	retlw	55
   194  000A  3438               	retlw	56
   195  000B  3439               	retlw	57
   196  000C  3441               	retlw	65
   197  000D  3434               	retlw	52
   198  000E  3435               	retlw	53
   199  000F  3436               	retlw	54
   200  0010  3442               	retlw	66
   201  0011  3431               	retlw	49
   202  0012  3432               	retlw	50
   203  0013  3433               	retlw	51
   204  0014  3443               	retlw	67
   205  0015  3446               	retlw	70
   206  0016  3430               	retlw	48
   207  0017  3445               	retlw	69
   208  0018  3444               	retlw	68
   209  0019  34FF               	retlw	255
   210  001A                     __end_of_keyPadMatrix:	
   211  001A                     _pass:	
   212  001A  3431               	retlw	49
   213  001B  3432               	retlw	50
   214  001C  3433               	retlw	51
   215  001D  3434               	retlw	52
   216  001E                     __end_of_pass:	
   217  0008                     _PORTDbits	set	8
   218  0008                     _PORTD	set	8
   219  0007                     _PORTC	set	7
   220  0006                     _PORTB	set	6
   221  003B                     _RC3	set	59
   222  003A                     _RC2	set	58
   223  003F                     _RC7	set	63
   224  003E                     _RC6	set	62
   225  003D                     _RC5	set	61
   226  003C                     _RC4	set	60
   227  0037                     _RB7	set	55
   228  0036                     _RB6	set	54
   229  0035                     _RB5	set	53
   230  0034                     _RB4	set	52
   231  0033                     _RB3	set	51
   232  0032                     _RB2	set	50
   233  0031                     _RB1	set	49
   234  0030                     _RB0	set	48
   235  0088                     _TRISD	set	136
   236  0087                     _TRISC	set	135
   237  0086                     _TRISB	set	134
   238  001E                     STR_7:	
   239  001E  3443               	retlw	67	;'C'
   240  001F  3465               	retlw	101	;'e'
   241  0020  3472               	retlw	114	;'r'
   242  0021  3472               	retlw	114	;'r'
   243  0022  3461               	retlw	97	;'a'
   244  0023  346E               	retlw	110	;'n'
   245  0024  3464               	retlw	100	;'d'
   246  0025  346F               	retlw	111	;'o'
   247  0026  3420               	retlw	32	;' '
   248  0027  3474               	retlw	116	;'t'
   249  0028  3461               	retlw	97	;'a'
   250  0029  3470               	retlw	112	;'p'
   251  002A  3461               	retlw	97	;'a'
   252  002B  342E               	retlw	46	;'.'
   253  002C  342E               	retlw	46	;'.'
   254  002D  342E               	retlw	46	;'.'
   255  002E  3400               	retlw	0
   256  002F                     STR_5:	
   257  002F  3453               	retlw	83	;'S'
   258  0030  3465               	retlw	101	;'e'
   259  0031  3461               	retlw	97	;'a'
   260  0032  3420               	retlw	32	;' '
   261  0033  3462               	retlw	98	;'b'
   262  0034  3469               	retlw	105	;'i'
   263  0035  3465               	retlw	101	;'e'
   264  0036  346E               	retlw	110	;'n'
   265  0037  3476               	retlw	118	;'v'
   266  0038  3465               	retlw	101	;'e'
   267  0039  346E               	retlw	110	;'n'
   268  003A  3469               	retlw	105	;'i'
   269  003B  3464               	retlw	100	;'d'
   270  003C  346F               	retlw	111	;'o'
   271  003D  3400               	retlw	0
   272  003E                     STR_6:	
   273  003E  3443               	retlw	67	;'C'
   274  003F  3465               	retlw	101	;'e'
   275  0040  3472               	retlw	114	;'r'
   276  0041  3472               	retlw	114	;'r'
   277  0042  3461               	retlw	97	;'a'
   278  0043  3472               	retlw	114	;'r'
   279  0044  3461               	retlw	97	;'a'
   280  0045  3420               	retlw	32	;' '
   281  0046  3465               	retlw	101	;'e'
   282  0047  346E               	retlw	110	;'n'
   283  0048  3420               	retlw	32	;' '
   284  0049  3433               	retlw	51	;'3'
   285  004A  3473               	retlw	115	;'s'
   286  004B  3400               	retlw	0
   287  004C                     STR_3:	
   288  004C  3444               	retlw	68	;'D'
   289  004D  3461               	retlw	97	;'a'
   290  004E  3472               	retlw	114	;'r'
   291  004F  3420               	retlw	32	;' '
   292  0050  3450               	retlw	80	;'P'
   293  0051  3461               	retlw	97	;'a'
   294  0052  3473               	retlw	115	;'s'
   295  0053  3473               	retlw	115	;'s'
   296  0054  3477               	retlw	119	;'w'
   297  0055  346F               	retlw	111	;'o'
   298  0056  3472               	retlw	114	;'r'
   299  0057  3464               	retlw	100	;'d'
   300  0058  3400               	retlw	0
   301  0059                     STR_4:	
   302  0059  3441               	retlw	65	;'A'
   303  005A  3462               	retlw	98	;'b'
   304  005B  3472               	retlw	114	;'r'
   305  005C  3469               	retlw	105	;'i'
   306  005D  3465               	retlw	101	;'e'
   307  005E  346E               	retlw	110	;'n'
   308  005F  3464               	retlw	100	;'d'
   309  0060  346F               	retlw	111	;'o'
   310  0061  342E               	retlw	46	;'.'
   311  0062  342E               	retlw	46	;'.'
   312  0063  342E               	retlw	46	;'.'
   313  0064  3400               	retlw	0
   314  0065                     STR_2:	
   315  0065  3450               	retlw	80	;'P'
   316  0066  3472               	retlw	114	;'r'
   317  0067  3465               	retlw	101	;'e'
   318  0068  3473               	retlw	115	;'s'
   319  0069  3469               	retlw	105	;'i'
   320  006A  346F               	retlw	111	;'o'
   321  006B  346E               	retlw	110	;'n'
   322  006C  3461               	retlw	97	;'a'
   323  006D  3472               	retlw	114	;'r'
   324  006E  3420               	retlw	32	;' '
   325  006F  3430               	retlw	48	;'0'
   326  0070  3400               	retlw	0
   327  0071                     STR_1:	
   328  0071  3442               	retlw	66	;'B'
   329  0072  3469               	retlw	105	;'i'
   330  0073  3465               	retlw	101	;'e'
   331  0074  346E               	retlw	110	;'n'
   332  0075  3476               	retlw	118	;'v'
   333  0076  3465               	retlw	101	;'e'
   334  0077  346E               	retlw	110	;'n'
   335  0078  3469               	retlw	105	;'i'
   336  0079  3464               	retlw	100	;'d'
   337  007A  346F               	retlw	111	;'o'
   338  007B  3400               	retlw	0
   339  007C                     STR_9:	
   340  007C  344D               	retlw	77	;'M'
   341  007D  3461               	retlw	97	;'a'
   342  007E  3472               	retlw	114	;'r'
   343  007F  3467               	retlw	103	;'g'
   344  0080  3461               	retlw	97	;'a'
   345  0081  3472               	retlw	114	;'r'
   346  0082  3469               	retlw	105	;'i'
   347  0083  3474               	retlw	116	;'t'
   348  0084  346F               	retlw	111	;'o'
   349  0085  3400               	retlw	0
   350  0086                     STR_8:	
   351  0086  344C               	retlw	76	;'L'
   352  0087  3461               	retlw	97	;'a'
   353  0088  3473               	retlw	115	;'s'
   354  0089  3474               	retlw	116	;'t'
   355  008A  3469               	retlw	105	;'i'
   356  008B  346D               	retlw	109	;'m'
   357  008C  3461               	retlw	97	;'a'
   358  008D  3400               	retlw	0
   359                           
   360                           ; #config settings
   361  0000                     
   362                           	psect	cinit
   363  07F8                     start_initialization:	
   364  07F8                     __initialization:	
   365                           
   366                           ; Clear objects allocated to BANK0
   367  07F8  1283               	bcf	3,5	;RP0=0, select bank0
   368  07F9  1303               	bcf	3,6	;RP1=0, select bank0
   369  07FA  01A9               	clrf	__pbssBANK0& (0+127)
   370  07FB  01AA               	clrf	(__pbssBANK0+1)& (0+127)
   371  07FC                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374  07FC                     __end_of__initialization:	
   375  07FC  0183               	clrf	3
   376  07FD  120A  118A  2E15   	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	bssBANK0
   379  0029                     __pbssBANK0:	
   380  0029                     _old_key:	
   381  0029                     	ds	1
   382  002A                     _key:	
   383  002A                     	ds	1
   384                           
   385                           	psect	cstackCOMMON
   386  0070                     __pcstackCOMMON:	
   387  0070                     ?_kbdInit:	
   388  0070                     ??_kbdInit:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_kbdGetKey:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ??_kbdGetKey:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_lcdPort:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ??_lcdPort:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_lcdCmd:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_lcdClear:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_lcdInit:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_lcdWriteChar:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_lcdPrint:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_main:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     lcdPort@a:	
   422                           ; 1 bytes @ 0x0
   423                           
   424                           
   425                           ; 1 bytes @ 0x0
   426  0070                     	ds	1
   427  0071                     ??_lcdCmd:	
   428  0071                     ??_lcdWriteChar:	
   429                           ; 1 bytes @ 0x1
   430                           
   431  0071                     kbdGetKey@key:	
   432                           ; 1 bytes @ 0x1
   433                           
   434                           
   435                           ; 1 bytes @ 0x1
   436  0071                     	ds	1
   437  0072                     kbdGetKey@row:	
   438  0072                     lcdWriteChar@temp:	
   439                           ; 1 bytes @ 0x2
   440                           
   441                           
   442                           ; 1 bytes @ 0x2
   443  0072                     	ds	1
   444  0073                     lcdCmd@a:	
   445  0073                     lcdWriteChar@y:	
   446                           ; 1 bytes @ 0x3
   447                           
   448                           
   449                           ; 1 bytes @ 0x3
   450  0073                     	ds	1
   451  0074                     ??_lcdClear:	
   452  0074                     ?_lcdSetCursor:	
   453                           ; 1 bytes @ 0x4
   454                           
   455  0074                     ??_lcdInit:	
   456                           ; 1 bytes @ 0x4
   457                           
   458  0074                     lcdSetCursor@b:	
   459                           ; 1 bytes @ 0x4
   460                           
   461  0074                     lcdWriteChar@a:	
   462                           ; 1 bytes @ 0x4
   463                           
   464                           
   465                           ; 1 bytes @ 0x4
   466  0074                     	ds	1
   467  0075                     ??_lcdSetCursor:	
   468  0075                     ??_lcdPrint:	
   469                           ; 1 bytes @ 0x5
   470                           
   471  0075                     lcdPrint@i:	
   472                           ; 1 bytes @ 0x5
   473                           
   474                           
   475                           ; 2 bytes @ 0x5
   476  0075                     	ds	2
   477  0077                     lcdSetCursor@a:	
   478  0077                     lcdPrint@a:	
   479                           ; 1 bytes @ 0x7
   480                           
   481                           
   482                           ; 1 bytes @ 0x7
   483  0077                     	ds	1
   484  0078                     lcdSetCursor@z:	
   485                           
   486                           ; 1 bytes @ 0x8
   487  0078                     	ds	1
   488  0079                     lcdSetCursor@y:	
   489                           
   490                           ; 1 bytes @ 0x9
   491  0079                     	ds	1
   492  007A                     lcdSetCursor@temp:	
   493                           
   494                           ; 1 bytes @ 0xA
   495  007A                     	ds	1
   496  007B                     ??_main:	
   497                           
   498                           ; 1 bytes @ 0xB
   499  007B                     	ds	3
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503  0020                     main@password:	
   504                           
   505                           ; 4 bytes @ 0x0
   506  0020                     	ds	4
   507  0024                     main@flag:	
   508                           
   509                           ; 1 bytes @ 0x4
   510  0024                     	ds	1
   511  0025                     main@passOk:	
   512                           
   513                           ; 1 bytes @ 0x5
   514  0025                     	ds	1
   515  0026                     main@key:	
   516                           
   517                           ; 1 bytes @ 0x6
   518  0026                     	ds	1
   519  0027                     main@contador:	
   520                           
   521                           ; 1 bytes @ 0x7
   522  0027                     	ds	1
   523  0028                     main@i:	
   524                           
   525                           ; 1 bytes @ 0x8
   526  0028                     	ds	1
   527                           
   528                           	psect	maintext
   529  0615                     __pmaintext:	
   530 ;;
   531 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   532 ;;
   533 ;; *************** function _main *****************
   534 ;; Defined at:
   535 ;;		line 29 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  i               1    8[BANK0 ] unsigned char 
   540 ;;  password        4    0[BANK0 ] unsigned char [4]
   541 ;;  contador        1    7[BANK0 ] unsigned char 
   542 ;;  key             1    6[BANK0 ] unsigned char 
   543 ;;  passOk          1    5[BANK0 ] unsigned char 
   544 ;;  flag            1    4[BANK0 ] unsigned char 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : B00/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   554 ;;      Params:         0       0       0       0       0
   555 ;;      Locals:         0       9       0       0       0
   556 ;;      Temps:          3       0       0       0       0
   557 ;;      Totals:         3       9       0       0       0
   558 ;;Total ram usage:       12 bytes
   559 ;; Hardware stack levels required when called:    3
   560 ;; This function calls:
   561 ;;		_kbdGetKey
   562 ;;		_kbdInit
   563 ;;		_lcdClear
   564 ;;		_lcdInit
   565 ;;		_lcdPrint
   566 ;;		_lcdSetCursor
   567 ;;		_lcdWriteChar
   568 ;; This function is called by:
   569 ;;		Startup code after reset
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           
   574                           ;psect for function _main
   575  0615                     _main:	
   576                           
   577                           ;main.c: 30:     TRISD = 0;
   578                           
   579                           ;incstack = 0
   580                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   581  0615  1683               	bsf	3,5	;RP0=1, select bank1
   582  0616  1303               	bcf	3,6	;RP1=0, select bank1
   583  0617  0188               	clrf	8	;volatile
   584                           
   585                           ;main.c: 31:     PORTD = 0;
   586  0618  1283               	bcf	3,5	;RP0=0, select bank0
   587  0619  1303               	bcf	3,6	;RP1=0, select bank0
   588  061A  0188               	clrf	8	;volatile
   589                           
   590                           ;main.c: 32:     lcdInit();
   591  061B  120A  118A  2535  120A  118A  	fcall	_lcdInit
   592                           
   593                           ;main.c: 33:     kbdInit();
   594  0620  120A  118A  244E  120A  118A  	fcall	_kbdInit
   595  0625                     l1183:	
   596                           
   597                           ;main.c: 36:         lcdClear();
   598  0625  120A  118A  2443  120A  118A  	fcall	_lcdClear
   599                           
   600                           ;main.c: 37:         lcdSetCursor(1, 1);
   601  062A  01F4               	clrf	lcdSetCursor@b
   602  062B  0AF4               	incf	lcdSetCursor@b,f
   603  062C  3001               	movlw	1
   604  062D  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   605                           
   606                           ;main.c: 38:         lcdPrint("Bienvenido");
   607  0632  3069               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   608  0633  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   609                           
   610                           ;main.c: 39:         lcdSetCursor(2, 1);
   611  0638  01F4               	clrf	lcdSetCursor@b
   612  0639  0AF4               	incf	lcdSetCursor@b,f
   613  063A  3002               	movlw	2
   614  063B  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   615                           
   616                           ;main.c: 40:         lcdPrint("Presionar 0");
   617  0640  305D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   618  0641  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   619                           
   620                           ;main.c: 41:         char flag = 1;
   621  0646  1283               	bcf	3,5	;RP0=0, select bank0
   622  0647  1303               	bcf	3,6	;RP1=0, select bank0
   623  0648  01A4               	clrf	main@flag
   624  0649  0AA4               	incf	main@flag,f
   625  064A                     l1319:	
   626                           ;main.c: 43:         while (flag) {
   627                           
   628                           
   629                           ;main.c: 43:         while (flag) {
   630  064A  1283               	bcf	3,5	;RP0=0, select bank0
   631  064B  1303               	bcf	3,6	;RP1=0, select bank0
   632  064C  0824               	movf	main@flag,w
   633  064D  1903               	btfsc	3,2
   634  064E  2E25               	goto	l1183
   635                           
   636                           ;main.c: 44:             char key = kbdGetKey();
   637  064F  120A  118A  2596  120A  118A  	fcall	_kbdGetKey
   638  0654  00FB               	movwf	??_main
   639  0655  087B               	movf	??_main,w
   640  0656  1283               	bcf	3,5	;RP0=0, select bank0
   641  0657  1303               	bcf	3,6	;RP1=0, select bank0
   642  0658  00A6               	movwf	main@key
   643                           
   644                           ;main.c: 46:             if (key == '0') {
   645  0659  3030               	movlw	48
   646  065A  0626               	xorwf	main@key,w
   647  065B  1D03               	btfss	3,2
   648  065C  2E4A               	goto	l1319
   649                           
   650                           ;main.c: 47:                 lcdClear();
   651  065D  120A  118A  2443  120A  118A  	fcall	_lcdClear
   652                           
   653                           ;main.c: 48:                 lcdSetCursor(1, 1);
   654  0662  01F4               	clrf	lcdSetCursor@b
   655  0663  0AF4               	incf	lcdSetCursor@b,f
   656  0664  3001               	movlw	1
   657  0665  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   658                           
   659                           ;main.c: 49:                 lcdPrint("Dar Password");
   660  066A  3044               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   661  066B  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   662                           
   663                           ;main.c: 50:                 char password[4];;main.c: 51:                 char contador
      +                           = 0;
   664  0670  1283               	bcf	3,5	;RP0=0, select bank0
   665  0671  1303               	bcf	3,6	;RP1=0, select bank0
   666  0672  01A7               	clrf	main@contador
   667  0673                     l1221:	
   668                           ;main.c: 52:                 while (contador < 4) {
   669                           
   670                           
   671                           ;main.c: 52:                 while (contador < 4) {
   672  0673  3004               	movlw	4
   673  0674  1283               	bcf	3,5	;RP0=0, select bank0
   674  0675  1303               	bcf	3,6	;RP1=0, select bank0
   675  0676  0227               	subwf	main@contador,w
   676  0677  1803               	btfsc	3,0
   677  0678  2EA8               	goto	l1223
   678                           
   679                           ;main.c: 53:                     key = kbdGetKey();
   680  0679  120A  118A  2596  120A  118A  	fcall	_kbdGetKey
   681  067E  00FB               	movwf	??_main
   682  067F  087B               	movf	??_main,w
   683  0680  1283               	bcf	3,5	;RP0=0, select bank0
   684  0681  1303               	bcf	3,6	;RP1=0, select bank0
   685  0682  00A6               	movwf	main@key
   686                           
   687                           ;main.c: 54:                     if (key != 255 && contador < 4) {
   688  0683  0A26               	incf	main@key,w
   689  0684  1903               	btfsc	3,2
   690  0685  2E73               	goto	l1221
   691  0686  3004               	movlw	4
   692  0687  0227               	subwf	main@contador,w
   693  0688  1803               	skipnc
   694  0689  2E73               	goto	l1221
   695                           
   696                           ;main.c: 55:                         password[contador++] = key;
   697  068A  0826               	movf	main@key,w
   698  068B  00FB               	movwf	??_main
   699  068C  0827               	movf	main@contador,w
   700  068D  3E20               	addlw	(low (main@password| 0))& (0+255)
   701  068E  0084               	movwf	4
   702  068F  087B               	movf	??_main,w
   703  0690  1383               	bcf	3,7	;select IRP bank0
   704  0691  0080               	movwf	0
   705  0692  3001               	movlw	1
   706  0693  00FB               	movwf	??_main
   707  0694  087B               	movf	??_main,w
   708  0695  07A7               	addwf	main@contador,f
   709                           
   710                           ;main.c: 56:                         lcdSetCursor(2, 5 + contador);
   711  0696  0827               	movf	main@contador,w
   712  0697  3E05               	addlw	5
   713  0698  00FB               	movwf	??_main
   714  0699  087B               	movf	??_main,w
   715  069A  00F4               	movwf	lcdSetCursor@b
   716  069B  3002               	movlw	2
   717  069C  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   718                           
   719                           ;main.c: 57:                         lcdWriteChar('*');
   720  06A1  302A               	movlw	42
   721  06A2  120A  118A  24B4  120A  118A  	fcall	_lcdWriteChar
   722  06A7  2E73               	goto	l1221
   723  06A8                     l1223:	
   724                           
   725                           ;main.c: 60:                 for (char i = 0; i < 4; i++) {
   726  06A8  01A8               	clrf	main@i
   727  06A9                     l114:	
   728                           
   729                           ;main.c: 61:                     passOk = 1;
   730  06A9  01A5               	clrf	main@passOk
   731  06AA  0AA5               	incf	main@passOk,f
   732                           
   733                           ;main.c: 62:                     if (pass[i] != password[i]){
   734  06AB  0828               	movf	main@i,w
   735  06AC  3E20               	addlw	(low (main@password| 0))& (0+255)
   736  06AD  0084               	movwf	4
   737  06AE  1383               	bcf	3,7	;select IRP bank0
   738  06AF  0800               	movf	0,w
   739  06B0  00FB               	movwf	??_main
   740  06B1  0828               	movf	main@i,w
   741  06B2  3E12               	addlw	low ((_pass-__stringbase)| (0+32768))
   742  06B3  0084               	movwf	4
   743  06B4  120A  118A  2003  120A  118A  	fcall	stringdir
   744  06B9  067B               	xorwf	??_main,w
   745  06BA  1903               	skipnz
   746  06BB  2EBE               	goto	l1233
   747                           
   748                           ;main.c: 63:                         passOk = 0;
   749  06BC  01A5               	clrf	main@passOk
   750                           
   751                           ;main.c: 64:                         break;
   752  06BD  2EC6               	goto	l1237
   753  06BE                     l1233:	
   754                           
   755                           ;main.c: 66:                 }
   756  06BE  3001               	movlw	1
   757  06BF  00FB               	movwf	??_main
   758  06C0  087B               	movf	??_main,w
   759  06C1  07A8               	addwf	main@i,f
   760  06C2  3004               	movlw	4
   761  06C3  0228               	subwf	main@i,w
   762  06C4  1C03               	skipc
   763  06C5  2EA9               	goto	l114
   764  06C6                     l1237:	
   765                           
   766                           ;main.c: 67:                 flag = 0;
   767  06C6  01A4               	clrf	main@flag
   768                           
   769                           ;main.c: 68:                 if (passOk) {
   770  06C7  0825               	movf	main@passOk,w
   771  06C8  1903               	btfsc	3,2
   772  06C9  2FC9               	goto	l1311
   773                           
   774                           ;main.c: 69:                     lcdClear();
   775  06CA  120A  118A  2443  120A  118A  	fcall	_lcdClear
   776                           
   777                           ;main.c: 70:                     lcdSetCursor(1, 1);
   778  06CF  01F4               	clrf	lcdSetCursor@b
   779  06D0  0AF4               	incf	lcdSetCursor@b,f
   780  06D1  3001               	movlw	1
   781  06D2  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   782                           
   783                           ;main.c: 71:                     lcdPrint("Abriendo...");
   784  06D7  3051               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   785  06D8  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   786                           
   787                           ;main.c: 72:                     PORTD = 255;
   788  06DD  30FF               	movlw	255
   789  06DE  1283               	bcf	3,5	;RP0=0, select bank0
   790  06DF  1303               	bcf	3,6	;RP1=0, select bank0
   791  06E0  0088               	movwf	8	;volatile
   792                           
   793                           ;main.c: 73:                     PORTDbits.RD1 = 0;
   794  06E1  1088               	bcf	8,1	;volatile
   795                           
   796                           ;main.c: 74:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   797  06E2  3002               	movlw	2
   798  06E3  00FD               	movwf	??_main+2
   799  06E4  3004               	movlw	4
   800  06E5  00FC               	movwf	??_main+1
   801  06E6  30BA               	movlw	186
   802  06E7  00FB               	movwf	??_main
   803  06E8                     u717:	
   804  06E8  0BFB               	decfsz	??_main,f
   805  06E9  2EE8               	goto	u717
   806  06EA  0BFC               	decfsz	??_main+1,f
   807  06EB  2EE8               	goto	u717
   808  06EC  0BFD               	decfsz	??_main+2,f
   809  06ED  2EE8               	goto	u717
   810  06EE  0000               	nop
   811                           
   812                           ;main.c: 75:                     PORTDbits.RD2 = 0;
   813  06EF  1283               	bcf	3,5	;RP0=0, select bank0
   814  06F0  1303               	bcf	3,6	;RP1=0, select bank0
   815  06F1  1108               	bcf	8,2	;volatile
   816                           
   817                           ;main.c: 76:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   818  06F2  3002               	movlw	2
   819  06F3  00FD               	movwf	??_main+2
   820  06F4  3004               	movlw	4
   821  06F5  00FC               	movwf	??_main+1
   822  06F6  30BA               	movlw	186
   823  06F7  00FB               	movwf	??_main
   824  06F8                     u727:	
   825  06F8  0BFB               	decfsz	??_main,f
   826  06F9  2EF8               	goto	u727
   827  06FA  0BFC               	decfsz	??_main+1,f
   828  06FB  2EF8               	goto	u727
   829  06FC  0BFD               	decfsz	??_main+2,f
   830  06FD  2EF8               	goto	u727
   831  06FE  0000               	nop
   832                           
   833                           ;main.c: 77:                     PORTDbits.RD2 = 1;
   834  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   835  0700  1303               	bcf	3,6	;RP1=0, select bank0
   836  0701  1508               	bsf	8,2	;volatile
   837                           
   838                           ;main.c: 78:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   839  0702  3002               	movlw	2
   840  0703  00FD               	movwf	??_main+2
   841  0704  3004               	movlw	4
   842  0705  00FC               	movwf	??_main+1
   843  0706  30BA               	movlw	186
   844  0707  00FB               	movwf	??_main
   845  0708                     u737:	
   846  0708  0BFB               	decfsz	??_main,f
   847  0709  2F08               	goto	u737
   848  070A  0BFC               	decfsz	??_main+1,f
   849  070B  2F08               	goto	u737
   850  070C  0BFD               	decfsz	??_main+2,f
   851  070D  2F08               	goto	u737
   852  070E  0000               	nop
   853                           
   854                           ;main.c: 79:                     PORTDbits.RD2 = 0;
   855  070F  1283               	bcf	3,5	;RP0=0, select bank0
   856  0710  1303               	bcf	3,6	;RP1=0, select bank0
   857  0711  1108               	bcf	8,2	;volatile
   858                           
   859                           ;main.c: 80:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   860  0712  3002               	movlw	2
   861  0713  00FD               	movwf	??_main+2
   862  0714  3004               	movlw	4
   863  0715  00FC               	movwf	??_main+1
   864  0716  30BA               	movlw	186
   865  0717  00FB               	movwf	??_main
   866  0718                     u747:	
   867  0718  0BFB               	decfsz	??_main,f
   868  0719  2F18               	goto	u747
   869  071A  0BFC               	decfsz	??_main+1,f
   870  071B  2F18               	goto	u747
   871  071C  0BFD               	decfsz	??_main+2,f
   872  071D  2F18               	goto	u747
   873  071E  0000               	nop
   874                           
   875                           ;main.c: 81:                     PORTDbits.RD2 = 1;
   876  071F  1283               	bcf	3,5	;RP0=0, select bank0
   877  0720  1303               	bcf	3,6	;RP1=0, select bank0
   878  0721  1508               	bsf	8,2	;volatile
   879                           
   880                           ;main.c: 82:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   881  0722  3002               	movlw	2
   882  0723  00FD               	movwf	??_main+2
   883  0724  3004               	movlw	4
   884  0725  00FC               	movwf	??_main+1
   885  0726  30BA               	movlw	186
   886  0727  00FB               	movwf	??_main
   887  0728                     u757:	
   888  0728  0BFB               	decfsz	??_main,f
   889  0729  2F28               	goto	u757
   890  072A  0BFC               	decfsz	??_main+1,f
   891  072B  2F28               	goto	u757
   892  072C  0BFD               	decfsz	??_main+2,f
   893  072D  2F28               	goto	u757
   894  072E  0000               	nop
   895                           
   896                           ;main.c: 83:                     PORTD = 0;
   897  072F  1283               	bcf	3,5	;RP0=0, select bank0
   898  0730  1303               	bcf	3,6	;RP1=0, select bank0
   899  0731  0188               	clrf	8	;volatile
   900                           
   901                           ;main.c: 84:                     lcdClear();
   902  0732  120A  118A  2443  120A  118A  	fcall	_lcdClear
   903                           
   904                           ;main.c: 85:                     lcdSetCursor(1, 1);
   905  0737  01F4               	clrf	lcdSetCursor@b
   906  0738  0AF4               	incf	lcdSetCursor@b,f
   907  0739  3001               	movlw	1
   908  073A  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   909                           
   910                           ;main.c: 86:                     lcdPrint("Sea bienvenido");
   911  073F  3027               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   912  0740  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   913                           
   914                           ;main.c: 87:                     lcdSetCursor(2,1);
   915  0745  01F4               	clrf	lcdSetCursor@b
   916  0746  0AF4               	incf	lcdSetCursor@b,f
   917  0747  3002               	movlw	2
   918  0748  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   919                           
   920                           ;main.c: 88:                     lcdPrint("Cerrara en 3s");
   921  074D  3036               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   922  074E  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   923                           
   924                           ;main.c: 89:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
   925  0753  3010               	movlw	16
   926  0754  00FD               	movwf	??_main+2
   927  0755  3039               	movlw	57
   928  0756  00FC               	movwf	??_main+1
   929  0757  300D               	movlw	13
   930  0758  00FB               	movwf	??_main
   931  0759                     u767:	
   932  0759  0BFB               	decfsz	??_main,f
   933  075A  2F59               	goto	u767
   934  075B  0BFC               	decfsz	??_main+1,f
   935  075C  2F59               	goto	u767
   936  075D  0BFD               	decfsz	??_main+2,f
   937  075E  2F59               	goto	u767
   938  075F  2F60               	nop2
   939                           
   940                           ;main.c: 90:                     lcdClear();
   941  0760  120A  118A  2443  120A  118A  	fcall	_lcdClear
   942                           
   943                           ;main.c: 91:                     lcdSetCursor(1, 1);
   944  0765  01F4               	clrf	lcdSetCursor@b
   945  0766  0AF4               	incf	lcdSetCursor@b,f
   946  0767  3001               	movlw	1
   947  0768  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
   948                           
   949                           ;main.c: 92:                     lcdPrint("Cerrando tapa...");
   950  076D  3016               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   951  076E  120A  118A  2492  120A  118A  	fcall	_lcdPrint
   952                           
   953                           ;main.c: 93:                     PORTD = 255;
   954  0773  30FF               	movlw	255
   955  0774  1283               	bcf	3,5	;RP0=0, select bank0
   956  0775  1303               	bcf	3,6	;RP1=0, select bank0
   957  0776  0088               	movwf	8	;volatile
   958                           
   959                           ;main.c: 94:                     PORTDbits.RD0 = 0;
   960  0777  1008               	bcf	8,0	;volatile
   961                           
   962                           ;main.c: 95:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   963  0778  3002               	movlw	2
   964  0779  00FD               	movwf	??_main+2
   965  077A  3004               	movlw	4
   966  077B  00FC               	movwf	??_main+1
   967  077C  30BA               	movlw	186
   968  077D  00FB               	movwf	??_main
   969  077E                     u777:	
   970  077E  0BFB               	decfsz	??_main,f
   971  077F  2F7E               	goto	u777
   972  0780  0BFC               	decfsz	??_main+1,f
   973  0781  2F7E               	goto	u777
   974  0782  0BFD               	decfsz	??_main+2,f
   975  0783  2F7E               	goto	u777
   976  0784  0000               	nop
   977                           
   978                           ;main.c: 96:                     PORTDbits.RD2 = 0;
   979  0785  1283               	bcf	3,5	;RP0=0, select bank0
   980  0786  1303               	bcf	3,6	;RP1=0, select bank0
   981  0787  1108               	bcf	8,2	;volatile
   982                           
   983                           ;main.c: 97:                     _delay((unsigned long)((200)*(4000000/4000.0)));
   984  0788  3002               	movlw	2
   985  0789  00FD               	movwf	??_main+2
   986  078A  3004               	movlw	4
   987  078B  00FC               	movwf	??_main+1
   988  078C  30BA               	movlw	186
   989  078D  00FB               	movwf	??_main
   990  078E                     u787:	
   991  078E  0BFB               	decfsz	??_main,f
   992  078F  2F8E               	goto	u787
   993  0790  0BFC               	decfsz	??_main+1,f
   994  0791  2F8E               	goto	u787
   995  0792  0BFD               	decfsz	??_main+2,f
   996  0793  2F8E               	goto	u787
   997  0794  0000               	nop
   998                           
   999                           ;main.c: 98:                     PORTDbits.RD2 = 1;
  1000  0795  1283               	bcf	3,5	;RP0=0, select bank0
  1001  0796  1303               	bcf	3,6	;RP1=0, select bank0
  1002  0797  1508               	bsf	8,2	;volatile
  1003                           
  1004                           ;main.c: 99:                     _delay((unsigned long)((200)*(4000000/4000.0)));
  1005  0798  3002               	movlw	2
  1006  0799  00FD               	movwf	??_main+2
  1007  079A  3004               	movlw	4
  1008  079B  00FC               	movwf	??_main+1
  1009  079C  30BA               	movlw	186
  1010  079D  00FB               	movwf	??_main
  1011  079E                     u797:	
  1012  079E  0BFB               	decfsz	??_main,f
  1013  079F  2F9E               	goto	u797
  1014  07A0  0BFC               	decfsz	??_main+1,f
  1015  07A1  2F9E               	goto	u797
  1016  07A2  0BFD               	decfsz	??_main+2,f
  1017  07A3  2F9E               	goto	u797
  1018  07A4  0000               	nop
  1019                           
  1020                           ;main.c: 100:                     PORTDbits.RD2 = 0;
  1021  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1022  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1023  07A7  1108               	bcf	8,2	;volatile
  1024                           
  1025                           ;main.c: 101:                     _delay((unsigned long)((200)*(4000000/4000.0)));
  1026  07A8  3002               	movlw	2
  1027  07A9  00FD               	movwf	??_main+2
  1028  07AA  3004               	movlw	4
  1029  07AB  00FC               	movwf	??_main+1
  1030  07AC  30BA               	movlw	186
  1031  07AD  00FB               	movwf	??_main
  1032  07AE                     u807:	
  1033  07AE  0BFB               	decfsz	??_main,f
  1034  07AF  2FAE               	goto	u807
  1035  07B0  0BFC               	decfsz	??_main+1,f
  1036  07B1  2FAE               	goto	u807
  1037  07B2  0BFD               	decfsz	??_main+2,f
  1038  07B3  2FAE               	goto	u807
  1039  07B4  0000               	nop
  1040                           
  1041                           ;main.c: 102:                     PORTDbits.RD2 = 1;
  1042  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1043  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1044  07B7  1508               	bsf	8,2	;volatile
  1045                           
  1046                           ;main.c: 103:                     _delay((unsigned long)((200)*(4000000/4000.0)));
  1047  07B8  3002               	movlw	2
  1048  07B9  00FD               	movwf	??_main+2
  1049  07BA  3004               	movlw	4
  1050  07BB  00FC               	movwf	??_main+1
  1051  07BC  30BA               	movlw	186
  1052  07BD  00FB               	movwf	??_main
  1053  07BE                     u817:	
  1054  07BE  0BFB               	decfsz	??_main,f
  1055  07BF  2FBE               	goto	u817
  1056  07C0  0BFC               	decfsz	??_main+1,f
  1057  07C1  2FBE               	goto	u817
  1058  07C2  0BFD               	decfsz	??_main+2,f
  1059  07C3  2FBE               	goto	u817
  1060  07C4  0000               	nop
  1061                           
  1062                           ;main.c: 104:                     PORTD = 0;
  1063  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  1064  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  1065  07C7  0188               	clrf	8	;volatile
  1066                           
  1067                           ;main.c: 105:                 } else {
  1068  07C8  2E4A               	goto	l1319
  1069  07C9                     l1311:	
  1070                           
  1071                           ;main.c: 106:                     lcdClear();
  1072  07C9  120A  118A  2443  120A  118A  	fcall	_lcdClear
  1073                           
  1074                           ;main.c: 107:                     lcdSetCursor(1, 1);
  1075  07CE  01F4               	clrf	lcdSetCursor@b
  1076  07CF  0AF4               	incf	lcdSetCursor@b,f
  1077  07D0  3001               	movlw	1
  1078  07D1  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
  1079                           
  1080                           ;main.c: 108:                     lcdPrint("Lastima");
  1081  07D6  307E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1082  07D7  120A  118A  2492  120A  118A  	fcall	_lcdPrint
  1083                           
  1084                           ;main.c: 109:                     lcdSetCursor(2, 1);
  1085  07DC  01F4               	clrf	lcdSetCursor@b
  1086  07DD  0AF4               	incf	lcdSetCursor@b,f
  1087  07DE  3002               	movlw	2
  1088  07DF  120A  118A  24EB  120A  118A  	fcall	_lcdSetCursor
  1089                           
  1090                           ;main.c: 110:                     lcdPrint("Margarito");
  1091  07E4  3074               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1092  07E5  120A  118A  2492  120A  118A  	fcall	_lcdPrint
  1093                           
  1094                           ;main.c: 111:                     _delay((unsigned long)((2000)*(4000000/4000.0)));
  1095  07EA  300B               	movlw	11
  1096  07EB  00FD               	movwf	??_main+2
  1097  07EC  3026               	movlw	38
  1098  07ED  00FC               	movwf	??_main+1
  1099  07EE  305D               	movlw	93
  1100  07EF  00FB               	movwf	??_main
  1101  07F0                     u827:	
  1102  07F0  0BFB               	decfsz	??_main,f
  1103  07F1  2FF0               	goto	u827
  1104  07F2  0BFC               	decfsz	??_main+1,f
  1105  07F3  2FF0               	goto	u827
  1106  07F4  0BFD               	decfsz	??_main+2,f
  1107  07F5  2FF0               	goto	u827
  1108  07F6  2FF7               	nop2
  1109  07F7  2E4A               	goto	l1319
  1110  07F8                     __end_of_main:	
  1111                           
  1112                           	psect	text1
  1113  04EB                     __ptext1:	
  1114 ;; *************** function _lcdSetCursor *****************
  1115 ;; Defined at:
  1116 ;;		line 56 in file "./lcd.h"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  a               1    wreg     unsigned char 
  1119 ;;  b               1    4[COMMON] unsigned char 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  a               1    7[COMMON] unsigned char 
  1122 ;;  temp            1   10[COMMON] unsigned char 
  1123 ;;  y               1    9[COMMON] unsigned char 
  1124 ;;  z               1    8[COMMON] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, pclath, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1134 ;;      Params:         1       0       0       0       0
  1135 ;;      Locals:         4       0       0       0       0
  1136 ;;      Temps:          2       0       0       0       0
  1137 ;;      Totals:         7       0       0       0       0
  1138 ;;Total ram usage:        7 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    2
  1141 ;; This function calls:
  1142 ;;		_lcdCmd
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _lcdSetCursor
  1150  04EB                     _lcdSetCursor:	
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  1154                           ;lcdSetCursor@a stored from wreg
  1155  04EB  00F7               	movwf	lcdSetCursor@a
  1156                           
  1157                           ;./lcd.h: 57:     char temp, z, y;;./lcd.h: 58:     if (a == 1) {
  1158  04EC  0377               	decf	lcdSetCursor@a,w
  1159  04ED  1D03               	btfss	3,2
  1160  04EE  2D10               	goto	l1129
  1161                           
  1162                           ;./lcd.h: 59:         temp = 0x80 + b - 1;
  1163  04EF  0874               	movf	lcdSetCursor@b,w
  1164  04F0  3E7F               	addlw	127
  1165  04F1  00F5               	movwf	??_lcdSetCursor
  1166  04F2  0875               	movf	??_lcdSetCursor,w
  1167  04F3  00FA               	movwf	lcdSetCursor@temp
  1168                           
  1169                           ;./lcd.h: 60:         z = temp >> 4;
  1170  04F4  087A               	movf	lcdSetCursor@temp,w
  1171  04F5  00F5               	movwf	??_lcdSetCursor
  1172  04F6  3004               	movlw	4
  1173  04F7                     u595:	
  1174  04F7  1003               	clrc
  1175  04F8  0CF5               	rrf	??_lcdSetCursor,f
  1176  04F9  3EFF               	addlw	-1
  1177  04FA  1D03               	skipz
  1178  04FB  2CF7               	goto	u595
  1179  04FC  0875               	movf	??_lcdSetCursor,w
  1180  04FD  00F6               	movwf	??_lcdSetCursor+1
  1181  04FE  0876               	movf	??_lcdSetCursor+1,w
  1182  04FF  00F8               	movwf	lcdSetCursor@z
  1183                           
  1184                           ;./lcd.h: 61:         y = temp & 0x0F;
  1185  0500  087A               	movf	lcdSetCursor@temp,w
  1186  0501  390F               	andlw	15
  1187  0502  00F5               	movwf	??_lcdSetCursor
  1188  0503  0875               	movf	??_lcdSetCursor,w
  1189  0504  00F9               	movwf	lcdSetCursor@y
  1190                           
  1191                           ;./lcd.h: 62:         lcdCmd(z);
  1192  0505  0878               	movf	lcdSetCursor@z,w
  1193  0506  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1194                           
  1195                           ;./lcd.h: 63:         lcdCmd(y);
  1196  050B  0879               	movf	lcdSetCursor@y,w
  1197  050C  120A  118A  2478   	fcall	_lcdCmd
  1198                           
  1199                           ;./lcd.h: 64:     } else if (a == 2) {
  1200  050F  0008               	return
  1201  0510                     l1129:	
  1202  0510  3002               	movlw	2
  1203  0511  0677               	xorwf	lcdSetCursor@a,w
  1204  0512  1D03               	btfss	3,2
  1205  0513  0008               	return
  1206                           
  1207                           ;./lcd.h: 65:         temp = 0xC0 + b - 1;
  1208  0514  0874               	movf	lcdSetCursor@b,w
  1209  0515  3EBF               	addlw	191
  1210  0516  00F5               	movwf	??_lcdSetCursor
  1211  0517  0875               	movf	??_lcdSetCursor,w
  1212  0518  00FA               	movwf	lcdSetCursor@temp
  1213                           
  1214                           ;./lcd.h: 66:         z = temp >> 4;
  1215  0519  087A               	movf	lcdSetCursor@temp,w
  1216  051A  00F5               	movwf	??_lcdSetCursor
  1217  051B  3004               	movlw	4
  1218  051C                     u615:	
  1219  051C  1003               	clrc
  1220  051D  0CF5               	rrf	??_lcdSetCursor,f
  1221  051E  3EFF               	addlw	-1
  1222  051F  1D03               	skipz
  1223  0520  2D1C               	goto	u615
  1224  0521  0875               	movf	??_lcdSetCursor,w
  1225  0522  00F6               	movwf	??_lcdSetCursor+1
  1226  0523  0876               	movf	??_lcdSetCursor+1,w
  1227  0524  00F8               	movwf	lcdSetCursor@z
  1228                           
  1229                           ;./lcd.h: 67:         y = temp & 0x0F;
  1230  0525  087A               	movf	lcdSetCursor@temp,w
  1231  0526  390F               	andlw	15
  1232  0527  00F5               	movwf	??_lcdSetCursor
  1233  0528  0875               	movf	??_lcdSetCursor,w
  1234  0529  00F9               	movwf	lcdSetCursor@y
  1235                           
  1236                           ;./lcd.h: 68:         lcdCmd(z);
  1237  052A  0878               	movf	lcdSetCursor@z,w
  1238  052B  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1239                           
  1240                           ;./lcd.h: 69:         lcdCmd(y);
  1241  0530  0879               	movf	lcdSetCursor@y,w
  1242  0531  120A  118A  2478   	fcall	_lcdCmd
  1243  0534  0008               	return
  1244  0535                     __end_of_lcdSetCursor:	
  1245                           
  1246                           	psect	text2
  1247  0492                     __ptext2:	
  1248 ;; *************** function _lcdPrint *****************
  1249 ;; Defined at:
  1250 ;;		line 108 in file "./lcd.h"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  a               1    wreg     PTR unsigned char 
  1253 ;;		 -> STR_9(10), STR_8(8), STR_7(17), STR_6(14), 
  1254 ;;		 -> STR_5(15), STR_4(12), STR_3(13), STR_2(12), 
  1255 ;;		 -> STR_1(11), 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  a               1    7[COMMON] PTR unsigned char 
  1258 ;;		 -> STR_9(10), STR_8(8), STR_7(17), STR_6(14), 
  1259 ;;		 -> STR_5(15), STR_4(12), STR_3(13), STR_2(12), 
  1260 ;;		 -> STR_1(11), 
  1261 ;;  i               2    5[COMMON] int 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1271 ;;      Params:         0       0       0       0       0
  1272 ;;      Locals:         3       0       0       0       0
  1273 ;;      Temps:          0       0       0       0       0
  1274 ;;      Totals:         3       0       0       0       0
  1275 ;;Total ram usage:        3 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    2
  1278 ;; This function calls:
  1279 ;;		_lcdWriteChar
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           
  1286                           ;psect for function _lcdPrint
  1287  0492                     _lcdPrint:	
  1288                           
  1289                           ;incstack = 0
  1290                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1291                           ;lcdPrint@a stored from wreg
  1292  0492  00F7               	movwf	lcdPrint@a
  1293                           
  1294                           ;./lcd.h: 109:     int i;;./lcd.h: 110:     for (i = 0; a[i] != '\0'; i++)
  1295  0493  01F5               	clrf	lcdPrint@i
  1296  0494  01F6               	clrf	lcdPrint@i+1
  1297  0495                     l1175:	
  1298  0495  0875               	movf	lcdPrint@i,w
  1299  0496  0777               	addwf	lcdPrint@a,w
  1300  0497  0084               	movwf	4
  1301  0498  120A  118A  2003  120A  118A  	fcall	stringdir
  1302  049D  3A00               	xorlw	0
  1303  049E  1903               	btfsc	3,2
  1304  049F  0008               	return
  1305                           
  1306                           ;./lcd.h: 111:         lcdWriteChar(a[i]);
  1307  04A0  0875               	movf	lcdPrint@i,w
  1308  04A1  0777               	addwf	lcdPrint@a,w
  1309  04A2  0084               	movwf	4
  1310  04A3  120A  118A  2003  120A  118A  	fcall	stringdir
  1311  04A8  120A  118A  24B4  120A  118A  	fcall	_lcdWriteChar
  1312  04AD  3001               	movlw	1
  1313  04AE  07F5               	addwf	lcdPrint@i,f
  1314  04AF  1803               	skipnc
  1315  04B0  0AF6               	incf	lcdPrint@i+1,f
  1316  04B1  3000               	movlw	0
  1317  04B2  07F6               	addwf	lcdPrint@i+1,f
  1318  04B3  2C95               	goto	l1175
  1319  04B4                     __end_of_lcdPrint:	
  1320                           
  1321                           	psect	text3
  1322  04B4                     __ptext3:	
  1323 ;; *************** function _lcdWriteChar *****************
  1324 ;; Defined at:
  1325 ;;		line 93 in file "./lcd.h"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  a               1    wreg     unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  a               1    4[COMMON] unsigned char 
  1330 ;;  y               1    3[COMMON] unsigned char 
  1331 ;;  temp            1    2[COMMON] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0, pclath, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1341 ;;      Params:         0       0       0       0       0
  1342 ;;      Locals:         3       0       0       0       0
  1343 ;;      Temps:          1       0       0       0       0
  1344 ;;      Totals:         4       0       0       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    1
  1348 ;; This function calls:
  1349 ;;		_lcdPort
  1350 ;; This function is called by:
  1351 ;;		_lcdPrint
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           
  1357                           ;psect for function _lcdWriteChar
  1358  04B4                     _lcdWriteChar:	
  1359                           
  1360                           ;incstack = 0
  1361                           ; Regs used in _lcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  1362                           ;lcdWriteChar@a stored from wreg
  1363  04B4  00F4               	movwf	lcdWriteChar@a
  1364                           
  1365                           ;./lcd.h: 94:     char temp, y;;./lcd.h: 95:     temp = a & 0x0F;
  1366  04B5  0874               	movf	lcdWriteChar@a,w
  1367  04B6  390F               	andlw	15
  1368  04B7  00F1               	movwf	??_lcdWriteChar
  1369  04B8  0871               	movf	??_lcdWriteChar,w
  1370  04B9  00F2               	movwf	lcdWriteChar@temp
  1371                           
  1372                           ;./lcd.h: 96:     y = a & 0xF0;
  1373  04BA  0874               	movf	lcdWriteChar@a,w
  1374  04BB  39F0               	andlw	240
  1375  04BC  00F1               	movwf	??_lcdWriteChar
  1376  04BD  0871               	movf	??_lcdWriteChar,w
  1377  04BE  00F3               	movwf	lcdWriteChar@y
  1378                           
  1379                           ;./lcd.h: 97:     RC2 = 1;
  1380  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1381  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  1382  04C1  1507               	bsf	7,2	;volatile
  1383                           
  1384                           ;./lcd.h: 98:     lcdPort(y >> 4);
  1385  04C2  0873               	movf	lcdWriteChar@y,w
  1386  04C3  00F1               	movwf	??_lcdWriteChar
  1387  04C4  3004               	movlw	4
  1388  04C5                     u405:	
  1389  04C5  1003               	clrc
  1390  04C6  0CF1               	rrf	??_lcdWriteChar,f
  1391  04C7  3EFF               	addlw	-1
  1392  04C8  1D03               	skipz
  1393  04C9  2CC5               	goto	u405
  1394  04CA  0871               	movf	??_lcdWriteChar,w
  1395  04CB  120A  118A  245E  120A  118A  	fcall	_lcdPort
  1396                           
  1397                           ;./lcd.h: 99:     RC3 = 1;
  1398  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1399  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  1400  04D2  1587               	bsf	7,3	;volatile
  1401                           
  1402                           ;./lcd.h: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1403  04D3  300D               	movlw	13
  1404  04D4  00F1               	movwf	??_lcdWriteChar
  1405  04D5                     u837:	
  1406  04D5  0BF1               	decfsz	??_lcdWriteChar,f
  1407  04D6  2CD5               	goto	u837
  1408                           
  1409                           ;./lcd.h: 101:     RC3 = 0;
  1410  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  1411  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  1412  04D9  1187               	bcf	7,3	;volatile
  1413                           
  1414                           ;./lcd.h: 102:     lcdPort(temp);
  1415  04DA  0872               	movf	lcdWriteChar@temp,w
  1416  04DB  120A  118A  245E  120A  118A  	fcall	_lcdPort
  1417                           
  1418                           ;./lcd.h: 103:     RC3 = 1;
  1419  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1420  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  1421  04E2  1587               	bsf	7,3	;volatile
  1422                           
  1423                           ;./lcd.h: 104:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1424  04E3  300D               	movlw	13
  1425  04E4  00F1               	movwf	??_lcdWriteChar
  1426  04E5                     u847:	
  1427  04E5  0BF1               	decfsz	??_lcdWriteChar,f
  1428  04E6  2CE5               	goto	u847
  1429                           
  1430                           ;./lcd.h: 105:     RC3 = 0;
  1431  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  1432  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  1433  04E9  1187               	bcf	7,3	;volatile
  1434  04EA  0008               	return
  1435  04EB                     __end_of_lcdWriteChar:	
  1436                           
  1437                           	psect	text4
  1438  0535                     __ptext4:	
  1439 ;; *************** function _lcdInit *****************
  1440 ;; Defined at:
  1441 ;;		line 73 in file "./lcd.h"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2, status,0, pclath, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1455 ;;      Params:         0       0       0       0       0
  1456 ;;      Locals:         0       0       0       0       0
  1457 ;;      Temps:          2       0       0       0       0
  1458 ;;      Totals:         2       0       0       0       0
  1459 ;;Total ram usage:        2 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    2
  1462 ;; This function calls:
  1463 ;;		_lcdCmd
  1464 ;;		_lcdPort
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function _lcdInit
  1472  0535                     _lcdInit:	
  1473                           
  1474                           ;./lcd.h: 74:     TRISC = 0;
  1475                           
  1476                           ;incstack = 0
  1477                           ; Regs used in _lcdInit: [wreg+status,2+status,0+pclath+cstack]
  1478  0535  1683               	bsf	3,5	;RP0=1, select bank1
  1479  0536  1303               	bcf	3,6	;RP1=0, select bank1
  1480  0537  0187               	clrf	7	;volatile
  1481                           
  1482                           ;./lcd.h: 75:     PORTC = 0;
  1483  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1485  053A  0187               	clrf	7	;volatile
  1486                           
  1487                           ;./lcd.h: 76:     lcdPort(0x00);
  1488  053B  3000               	movlw	0
  1489  053C  120A  118A  245E  120A  118A  	fcall	_lcdPort
  1490                           
  1491                           ;./lcd.h: 77:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1492  0541  301A               	movlw	26
  1493  0542  00F5               	movwf	??_lcdInit+1
  1494  0543  30F8               	movlw	248
  1495  0544  00F4               	movwf	??_lcdInit
  1496  0545                     u857:	
  1497  0545  0BF4               	decfsz	??_lcdInit,f
  1498  0546  2D45               	goto	u857
  1499  0547  0BF5               	decfsz	??_lcdInit+1,f
  1500  0548  2D45               	goto	u857
  1501  0549  0000               	nop
  1502                           
  1503                           ;./lcd.h: 78:     lcdCmd(0x03);
  1504  054A  3003               	movlw	3
  1505  054B  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1506                           
  1507                           ;./lcd.h: 79:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1508  0550  3007               	movlw	7
  1509  0551  00F5               	movwf	??_lcdInit+1
  1510  0552  307D               	movlw	125
  1511  0553  00F4               	movwf	??_lcdInit
  1512  0554                     u867:	
  1513  0554  0BF4               	decfsz	??_lcdInit,f
  1514  0555  2D54               	goto	u867
  1515  0556  0BF5               	decfsz	??_lcdInit+1,f
  1516  0557  2D54               	goto	u867
  1517                           
  1518                           ;./lcd.h: 80:     lcdCmd(0x03);
  1519  0558  3003               	movlw	3
  1520  0559  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1521                           
  1522                           ;./lcd.h: 81:     _delay((unsigned long)((11)*(4000000/4000.0)));
  1523  055E  300F               	movlw	15
  1524  055F  00F5               	movwf	??_lcdInit+1
  1525  0560  3047               	movlw	71
  1526  0561  00F4               	movwf	??_lcdInit
  1527  0562                     u877:	
  1528  0562  0BF4               	decfsz	??_lcdInit,f
  1529  0563  2D62               	goto	u877
  1530  0564  0BF5               	decfsz	??_lcdInit+1,f
  1531  0565  2D62               	goto	u877
  1532  0566  2D67               	nop2
  1533                           
  1534                           ;./lcd.h: 82:     lcdCmd(0x03);
  1535  0567  3003               	movlw	3
  1536  0568  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1537                           
  1538                           ;./lcd.h: 84:     lcdCmd(0x02);
  1539  056D  3002               	movlw	2
  1540  056E  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1541                           
  1542                           ;./lcd.h: 85:     lcdCmd(0x02);
  1543  0573  3002               	movlw	2
  1544  0574  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1545                           
  1546                           ;./lcd.h: 86:     lcdCmd(0x08);
  1547  0579  3008               	movlw	8
  1548  057A  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1549                           
  1550                           ;./lcd.h: 87:     lcdCmd(0x00);
  1551  057F  3000               	movlw	0
  1552  0580  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1553                           
  1554                           ;./lcd.h: 88:     lcdCmd(0x0C);
  1555  0585  300C               	movlw	12
  1556  0586  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1557                           
  1558                           ;./lcd.h: 89:     lcdCmd(0x00);
  1559  058B  3000               	movlw	0
  1560  058C  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1561                           
  1562                           ;./lcd.h: 90:     lcdCmd(0x06);
  1563  0591  3006               	movlw	6
  1564  0592  120A  118A  2478   	fcall	_lcdCmd
  1565  0595  0008               	return
  1566  0596                     __end_of_lcdInit:	
  1567                           
  1568                           	psect	text5
  1569  0443                     __ptext5:	
  1570 ;; *************** function _lcdClear *****************
  1571 ;; Defined at:
  1572 ;;		line 51 in file "./lcd.h"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, pclath, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1586 ;;      Params:         0       0       0       0       0
  1587 ;;      Locals:         0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0
  1589 ;;      Totals:         0       0       0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    2
  1593 ;; This function calls:
  1594 ;;		_lcdCmd
  1595 ;; This function is called by:
  1596 ;;		_main
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           
  1601                           ;psect for function _lcdClear
  1602  0443                     _lcdClear:	
  1603                           
  1604                           ;./lcd.h: 52:     lcdCmd(0);
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _lcdClear: [wreg+status,2+status,0+pclath+cstack]
  1608  0443  3000               	movlw	0
  1609  0444  120A  118A  2478  120A  118A  	fcall	_lcdCmd
  1610                           
  1611                           ;./lcd.h: 53:     lcdCmd(1);
  1612  0449  3001               	movlw	1
  1613  044A  120A  118A  2478   	fcall	_lcdCmd
  1614  044D  0008               	return
  1615  044E                     __end_of_lcdClear:	
  1616                           
  1617                           	psect	text6
  1618  0478                     __ptext6:	
  1619 ;; *************** function _lcdCmd *****************
  1620 ;; Defined at:
  1621 ;;		line 43 in file "./lcd.h"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  a               1    wreg     unsigned char 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  a               1    3[COMMON] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         0       0       0       0       0
  1636 ;;      Locals:         1       0       0       0       0
  1637 ;;      Temps:          2       0       0       0       0
  1638 ;;      Totals:         3       0       0       0       0
  1639 ;;Total ram usage:        3 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    1
  1642 ;; This function calls:
  1643 ;;		_lcdPort
  1644 ;; This function is called by:
  1645 ;;		_lcdClear
  1646 ;;		_lcdSetCursor
  1647 ;;		_lcdInit
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _lcdCmd
  1653  0478                     _lcdCmd:	
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _lcdCmd: [wreg+status,2+status,0+pclath+cstack]
  1657                           ;lcdCmd@a stored from wreg
  1658  0478  00F3               	movwf	lcdCmd@a
  1659                           
  1660                           ;./lcd.h: 44:     RC2 = 0;
  1661  0479  1283               	bcf	3,5	;RP0=0, select bank0
  1662  047A  1303               	bcf	3,6	;RP1=0, select bank0
  1663  047B  1107               	bcf	7,2	;volatile
  1664                           
  1665                           ;./lcd.h: 45:     lcdPort(a);
  1666  047C  0873               	movf	lcdCmd@a,w
  1667  047D  120A  118A  245E  120A  118A  	fcall	_lcdPort
  1668                           
  1669                           ;./lcd.h: 46:     RC3 = 1;
  1670  0482  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0483  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0484  1587               	bsf	7,3	;volatile
  1673                           
  1674                           ;./lcd.h: 47:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1675  0485  3006               	movlw	6
  1676  0486  00F2               	movwf	??_lcdCmd+1
  1677  0487  3030               	movlw	48
  1678  0488  00F1               	movwf	??_lcdCmd
  1679  0489                     u887:	
  1680  0489  0BF1               	decfsz	??_lcdCmd,f
  1681  048A  2C89               	goto	u887
  1682  048B  0BF2               	decfsz	??_lcdCmd+1,f
  1683  048C  2C89               	goto	u887
  1684  048D  0000               	nop
  1685                           
  1686                           ;./lcd.h: 48:     RC3 = 0;
  1687  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1688  048F  1303               	bcf	3,6	;RP1=0, select bank0
  1689  0490  1187               	bcf	7,3	;volatile
  1690  0491  0008               	return
  1691  0492                     __end_of_lcdCmd:	
  1692                           
  1693                           	psect	text7
  1694  045E                     __ptext7:	
  1695 ;; *************** function _lcdPort *****************
  1696 ;; Defined at:
  1697 ;;		line 21 in file "./lcd.h"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  a               1    wreg     unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  a               1    0[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         0       0       0       0       0
  1712 ;;      Locals:         1       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0
  1714 ;;      Totals:         1       0       0       0       0
  1715 ;;Total ram usage:        1 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_lcdCmd
  1721 ;;		_lcdInit
  1722 ;;		_lcdWriteChar
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function _lcdPort
  1728  045E                     _lcdPort:	
  1729                           
  1730                           ;incstack = 0
  1731                           ; Regs used in _lcdPort: [wreg]
  1732                           ;lcdPort@a stored from wreg
  1733  045E  00F0               	movwf	lcdPort@a
  1734                           
  1735                           ;./lcd.h: 22:     if (a & 1)
  1736  045F  1C70               	btfss	lcdPort@a,0
  1737  0460  2C65               	goto	l67
  1738                           
  1739                           ;./lcd.h: 23:         RC4 = 1;
  1740  0461  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0462  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0463  1607               	bsf	7,4	;volatile
  1743  0464  2C68               	goto	l68
  1744  0465                     l67:	
  1745                           ;./lcd.h: 24:     else
  1746                           
  1747                           
  1748                           ;./lcd.h: 25:         RC4 = 0;
  1749  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1750  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1751  0467  1207               	bcf	7,4	;volatile
  1752  0468                     l68:	
  1753                           
  1754                           ;./lcd.h: 27:     if (a & 2)
  1755  0468  1CF0               	btfss	lcdPort@a,1
  1756  0469  2C6C               	goto	l69
  1757                           
  1758                           ;./lcd.h: 28:         RC5 = 1;
  1759  046A  1687               	bsf	7,5	;volatile
  1760  046B  2C6D               	goto	l70
  1761  046C                     l69:	
  1762                           ;./lcd.h: 29:     else
  1763                           
  1764                           
  1765                           ;./lcd.h: 30:         RC5 = 0;
  1766  046C  1287               	bcf	7,5	;volatile
  1767  046D                     l70:	
  1768                           
  1769                           ;./lcd.h: 32:     if (a & 4)
  1770  046D  1D70               	btfss	lcdPort@a,2
  1771  046E  2C71               	goto	l71
  1772                           
  1773                           ;./lcd.h: 33:         RC6 = 1;
  1774  046F  1707               	bsf	7,6	;volatile
  1775  0470  2C72               	goto	l72
  1776  0471                     l71:	
  1777                           ;./lcd.h: 34:     else
  1778                           
  1779                           
  1780                           ;./lcd.h: 35:         RC6 = 0;
  1781  0471  1307               	bcf	7,6	;volatile
  1782  0472                     l72:	
  1783                           
  1784                           ;./lcd.h: 37:     if (a & 8)
  1785  0472  1DF0               	btfss	lcdPort@a,3
  1786  0473  2C76               	goto	l73
  1787                           
  1788                           ;./lcd.h: 38:         RC7 = 1;
  1789  0474  1787               	bsf	7,7	;volatile
  1790  0475  0008               	return
  1791  0476                     l73:	
  1792                           ;./lcd.h: 39:     else
  1793                           
  1794                           
  1795                           ;./lcd.h: 40:         RC7 = 0;
  1796  0476  1387               	bcf	7,7	;volatile
  1797  0477  0008               	return
  1798  0478                     __end_of_lcdPort:	
  1799                           
  1800                           	psect	text8
  1801  044E                     __ptext8:	
  1802 ;; *************** function _kbdInit *****************
  1803 ;; Defined at:
  1804 ;;		line 28 in file "./keypad.h"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, status,2
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1818 ;;      Params:         0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0
  1820 ;;      Temps:          2       0       0       0       0
  1821 ;;      Totals:         2       0       0       0       0
  1822 ;;Total ram usage:        2 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function _kbdInit
  1833  044E                     _kbdInit:	
  1834                           
  1835                           ;./keypad.h: 29:     TRISB = 0xF0;
  1836                           
  1837                           ;incstack = 0
  1838                           ; Regs used in _kbdInit: [wreg+status,2]
  1839  044E  30F0               	movlw	240
  1840  044F  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0450  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0451  0086               	movwf	6	;volatile
  1843                           
  1844                           ;./keypad.h: 30:     PORTB = 0x00;
  1845  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0454  0186               	clrf	6	;volatile
  1848                           
  1849                           ;./keypad.h: 31:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1850  0455  3007               	movlw	7
  1851  0456  00F1               	movwf	??_kbdInit+1
  1852  0457  307D               	movlw	125
  1853  0458  00F0               	movwf	??_kbdInit
  1854  0459                     u897:	
  1855  0459  0BF0               	decfsz	??_kbdInit,f
  1856  045A  2C59               	goto	u897
  1857  045B  0BF1               	decfsz	??_kbdInit+1,f
  1858  045C  2C59               	goto	u897
  1859  045D  0008               	return
  1860  045E                     __end_of_kbdInit:	
  1861                           
  1862                           	psect	text9
  1863  0596                     __ptext9:	
  1864 ;; *************** function _kbdGetKey *****************
  1865 ;; Defined at:
  1866 ;;		line 34 in file "./keypad.h"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  row             1    2[COMMON] unsigned char 
  1871 ;;  key             1    1[COMMON] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      unsigned char 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1881 ;;      Params:         0       0       0       0       0
  1882 ;;      Locals:         2       0       0       0       0
  1883 ;;      Temps:          1       0       0       0       0
  1884 ;;      Totals:         3       0       0       0       0
  1885 ;;Total ram usage:        3 bytes
  1886 ;; Hardware stack levels used:    2
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function _kbdGetKey
  1896  0596                     _kbdGetKey:	
  1897                           
  1898                           ;./keypad.h: 36:     char key = 0, row;
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _kbdGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1902  0596  01F1               	clrf	kbdGetKey@key
  1903                           
  1904                           ;./keypad.h: 38:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1905  0597  01F2               	clrf	kbdGetKey@row
  1906  0598  0AF2               	incf	kbdGetKey@row,f
  1907  0599                     l56:	
  1908                           
  1909                           ;./keypad.h: 39:         {;./keypad.h: 40:             RB0 = (row & 0x0001) >> 0;
  1910  0599  1C72               	btfss	kbdGetKey@row,0
  1911  059A  2D9F               	goto	u410
  1912  059B  1283               	bcf	3,5	;RP0=0, select bank0
  1913  059C  1303               	bcf	3,6	;RP1=0, select bank0
  1914  059D  1406               	bsf	6,0	;volatile
  1915  059E  2DA2               	goto	l1071
  1916  059F                     u410:	
  1917  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1918  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1919  05A1  1006               	bcf	6,0	;volatile
  1920  05A2                     l1071:	
  1921                           
  1922                           ;./keypad.h: 41:             RB1 = (row & 0x0002) >> 1;
  1923  05A2  0872               	movf	kbdGetKey@row,w
  1924  05A3  00F0               	movwf	??_kbdGetKey
  1925  05A4  3001               	movlw	1
  1926  05A5                     u435:	
  1927  05A5  1003               	clrc
  1928  05A6  0CF0               	rrf	??_kbdGetKey,f
  1929  05A7  3EFF               	addlw	-1
  1930  05A8  1D03               	skipz
  1931  05A9  2DA5               	goto	u435
  1932  05AA  1C70               	btfss	??_kbdGetKey,0
  1933  05AB  2DB0               	goto	u440
  1934  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1935  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1936  05AE  1486               	bsf	6,1	;volatile
  1937  05AF  2DB3               	goto	u454
  1938  05B0                     u440:	
  1939  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  1940  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  1941  05B2  1086               	bcf	6,1	;volatile
  1942  05B3                     u454:	
  1943                           
  1944                           ;./keypad.h: 42:             RB2 = (row & 0x0004) >> 2;
  1945  05B3  0872               	movf	kbdGetKey@row,w
  1946  05B4  00F0               	movwf	??_kbdGetKey
  1947  05B5  3002               	movlw	2
  1948  05B6                     u465:	
  1949  05B6  1003               	clrc
  1950  05B7  0CF0               	rrf	??_kbdGetKey,f
  1951  05B8  3EFF               	addlw	-1
  1952  05B9  1D03               	skipz
  1953  05BA  2DB6               	goto	u465
  1954  05BB  1C70               	btfss	??_kbdGetKey,0
  1955  05BC  2DC1               	goto	u470
  1956  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1957  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1958  05BF  1506               	bsf	6,2	;volatile
  1959  05C0  2DC4               	goto	u484
  1960  05C1                     u470:	
  1961  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1962  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1963  05C3  1106               	bcf	6,2	;volatile
  1964  05C4                     u484:	
  1965                           
  1966                           ;./keypad.h: 43:             RB3 = (row & 0x0008) >> 3;
  1967  05C4  0872               	movf	kbdGetKey@row,w
  1968  05C5  00F0               	movwf	??_kbdGetKey
  1969  05C6  3003               	movlw	3
  1970  05C7                     u495:	
  1971  05C7  1003               	clrc
  1972  05C8  0CF0               	rrf	??_kbdGetKey,f
  1973  05C9  3EFF               	addlw	-1
  1974  05CA  1D03               	skipz
  1975  05CB  2DC7               	goto	u495
  1976  05CC  1C70               	btfss	??_kbdGetKey,0
  1977  05CD  2DD2               	goto	u500
  1978  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1979  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1980  05D0  1586               	bsf	6,3	;volatile
  1981  05D1  2DD5               	goto	l1073
  1982  05D2                     u500:	
  1983  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  1984  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  1985  05D4  1186               	bcf	6,3	;volatile
  1986  05D5                     l1073:	
  1987                           
  1988                           ;./keypad.h: 44:             _delay((unsigned long)((1)*(4000000/4000.0)));
  1989  05D5  30C7               	movlw	199
  1990  05D6  00F0               	movwf	??_kbdGetKey
  1991  05D7                     u907:	
  1992  05D7  2DD8               	nop2
  1993  05D8  0BF0               	decfsz	??_kbdGetKey,f
  1994  05D9  2DD7               	goto	u907
  1995  05DA  2DDB               	nop2
  1996  05DB  2DDC               	nop2
  1997                           
  1998                           ;./keypad.h: 45:         };./keypad.h: 47:         if (RB4)break;
  1999  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2000  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2001  05DE  1A06               	btfsc	6,4	;volatile
  2002  05DF  2DFC               	goto	l57
  2003                           
  2004                           ;./keypad.h: 48:         key++;
  2005  05E0  3001               	movlw	1
  2006  05E1  00F0               	movwf	??_kbdGetKey
  2007  05E2  0870               	movf	??_kbdGetKey,w
  2008  05E3  07F1               	addwf	kbdGetKey@key,f
  2009                           
  2010                           ;./keypad.h: 49:         if (RB5)break;
  2011  05E4  1A86               	btfsc	6,5	;volatile
  2012  05E5  2DFC               	goto	l57
  2013                           
  2014                           ;./keypad.h: 50:         key++;
  2015  05E6  3001               	movlw	1
  2016  05E7  00F0               	movwf	??_kbdGetKey
  2017  05E8  0870               	movf	??_kbdGetKey,w
  2018  05E9  07F1               	addwf	kbdGetKey@key,f
  2019                           
  2020                           ;./keypad.h: 51:         if (RB6)break;
  2021  05EA  1B06               	btfsc	6,6	;volatile
  2022  05EB  2DFC               	goto	l57
  2023                           
  2024                           ;./keypad.h: 52:         key++;
  2025  05EC  3001               	movlw	1
  2026  05ED  00F0               	movwf	??_kbdGetKey
  2027  05EE  0870               	movf	??_kbdGetKey,w
  2028  05EF  07F1               	addwf	kbdGetKey@key,f
  2029                           
  2030                           ;./keypad.h: 53:         if (RB7)break;
  2031  05F0  1B86               	btfsc	6,7	;volatile
  2032  05F1  2DFC               	goto	l57
  2033                           
  2034                           ;./keypad.h: 54:         key++;
  2035  05F2  3001               	movlw	1
  2036  05F3  00F0               	movwf	??_kbdGetKey
  2037  05F4  0870               	movf	??_kbdGetKey,w
  2038  05F5  07F1               	addwf	kbdGetKey@key,f
  2039                           
  2040                           ;./keypad.h: 55:     }
  2041  05F6  1003               	clrc
  2042  05F7  0DF2               	rlf	kbdGetKey@row,f
  2043  05F8  3010               	movlw	16
  2044  05F9  0272               	subwf	kbdGetKey@row,w
  2045  05FA  1C03               	skipc
  2046  05FB  2D99               	goto	l56
  2047  05FC                     l57:	
  2048                           
  2049                           ;./keypad.h: 56:     RB0 = 0;
  2050  05FC  1006               	bcf	6,0	;volatile
  2051                           
  2052                           ;./keypad.h: 57:     RB1 = 0;
  2053  05FD  1086               	bcf	6,1	;volatile
  2054                           
  2055                           ;./keypad.h: 58:     RB2 = 0;
  2056  05FE  1106               	bcf	6,2	;volatile
  2057                           
  2058                           ;./keypad.h: 59:     RB3 = 0;
  2059  05FF  1186               	bcf	6,3	;volatile
  2060                           
  2061                           ;./keypad.h: 60:     if (key != old_key) {
  2062  0600  0871               	movf	kbdGetKey@key,w
  2063  0601  0629               	xorwf	_old_key,w
  2064  0602  1903               	skipnz
  2065  0603  2E0F               	goto	l1113
  2066                           
  2067                           ;./keypad.h: 61:         old_key = key;
  2068  0604  0871               	movf	kbdGetKey@key,w
  2069  0605  00F0               	movwf	??_kbdGetKey
  2070  0606  0870               	movf	??_kbdGetKey,w
  2071  0607  00A9               	movwf	_old_key
  2072                           
  2073                           ;./keypad.h: 62:         return keyPadMatrix[ key ];
  2074  0608  0871               	movf	kbdGetKey@key,w
  2075  0609  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2076  060A  0084               	movwf	4
  2077  060B  120A  118A  2003   	fcall	stringdir
  2078  060E  0008               	return
  2079  060F                     l1113:	
  2080                           
  2081                           ;./keypad.h: 64:         return keyPadMatrix[ 16 ];
  2082  060F  3011               	movlw	low (((_keyPadMatrix+16)-__stringbase)| (0+32768))
  2083  0610  0084               	movwf	4
  2084  0611  120A  118A  2003   	fcall	stringdir
  2085  0614  0008               	return
  2086  0615                     __end_of_kbdGetKey:	
  2087  007E                     btemp	set	126	;btemp
  2088  007E                     wtemp0	set	126


Data Sizes:
    Strings     112
    Constant    21
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcdPrint@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_9(CODE[10]), STR_8(CODE[8]), STR_7(CODE[17]), STR_6(CODE[14]), 
		 -> STR_5(CODE[15]), STR_4(CODE[12]), STR_3(CODE[13]), STR_2(CODE[12]), 
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_lcdSetCursor
    _lcdSetCursor->_lcdCmd
    _lcdPrint->_lcdWriteChar
    _lcdWriteChar->_lcdPort
    _lcdInit->_lcdCmd
    _lcdClear->_lcdCmd
    _lcdCmd->_lcdPort

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    2740
                                             11 COMMON     3     3      0
                                              0 BANK0      9     9      0
                          _kbdGetKey
                            _kbdInit
                           _lcdClear
                            _lcdInit
                           _lcdPrint
                       _lcdSetCursor
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         7     6      1    1140
                                              4 COMMON     7     6      1
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             3     3      0     565
                                              5 COMMON     3     3      0
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (1) _lcdWriteChar                                         4     4      0     178
                                              1 COMMON     4     4      0
                            _lcdPort
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     2      0     198
                                              4 COMMON     2     2      0
                             _lcdCmd
                            _lcdPort
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                             0     0      0     110
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (2) _lcdCmd                                               3     3      0     110
                                              1 COMMON     3     3      0
                            _lcdPort
 ---------------------------------------------------------------------------------
 (2) _lcdPort                                              1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _kbdInit                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _kbdGetKey                                            3     3      0     205
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _kbdGetKey
   _kbdInit
   _lcdClear
     _lcdCmd
       _lcdPort
   _lcdInit
     _lcdCmd
       _lcdPort
     _lcdPort
   _lcdPrint
     _lcdWriteChar
       _lcdPort
   _lcdSetCursor
     _lcdCmd
       _lcdPort
   _lcdWriteChar
     _lcdPort

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      19       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9       B       5       13.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      19      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 16 16:46:32 2019

                      pc 0002              __CFG_CP$OFF 0000                       l70 046D  
                     l71 0471                       l56 0599                       l72 0472  
                     l57 05FC                       l73 0476                       l67 0465  
                     l68 0468                       l69 046C                       fsr 0004  
                    l114 06A9                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      _RB4 0034  
                    _RC2 003A                      _RB5 0035                      _RC3 003B  
                    _RB6 0036                      _RC4 003C                      _RB7 0037  
                    _RC5 003D                      _RC6 003E                      _RC7 003F  
                    u410 059F                      u500 05D2                      u405 04C5  
                    u440 05B0             __CFG_CPD$OFF 0000                      u435 05A5  
                    u470 05C1                      u454 05B3                      u615 051C  
                    u465 05B6                      u484 05C4                      u717 06E8  
                    u495 05C7                      u807 07AE                      u727 06F8  
                    u817 07BE                      u737 0708                      u907 05D7  
                    u595 04F7                      u827 07F0                      u747 0718  
                    u837 04D5                      u757 0728                      u847 04E5  
                    u767 0759                      u857 0545                      u777 077E  
                    u867 0554                      u787 078E                      u877 0562  
                    u797 079E                      u887 0489                      u897 0459  
                    _key 002A                      fsr0 0004                      indf 0000  
           __CFG_FOSC$XT 0000           ??_lcdWriteChar 0071            lcdWriteChar@a 0074  
          lcdWriteChar@y 0073             __CFG_LVP$OFF 0000                     l1113 060F  
                   l1221 0673                     l1071 05A2                     l1311 07C9  
                   l1223 06A8                     l1073 05D5                     l1129 0510  
                   l1233 06BE                     l1237 06C6                     l1175 0495  
                   l1319 064A                     l1183 0625                     STR_1 0071  
                   STR_2 0065                     STR_3 004C                     STR_4 0059  
                   STR_5 002F                     STR_6 003E                     STR_7 001E  
                   STR_8 0086                     STR_9 007C             __CFG_WRT$OFF 0000  
                   _main 0615                     _pass 001A                     btemp 007E  
                   start 0000             main@contador 0027                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088          __end_of_kbdInit 045E          __end_of_lcdInit 0596  
        __end_of_lcdPort 0478             main@password 0020                    main@i 0028  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07F8             __end_of_main 07F8  
           __end_of_pass 001E                   ??_main 007B     __end_of_lcdSetCursor 0535  
       __end_of_lcdClear 044E           __CFG_PWRTE$OFF 0000         __end_of_lcdPrint 04B4  
   __end_of_lcdWriteChar 04EB                   _lcdCmd 0478                ??_kbdInit 0070  
              ??_lcdInit 0074                ??_lcdPort 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070       __size_of_kbdGetKey 007F     __end_of_keyPadMatrix 001A  
       lcdWriteChar@temp 0072               __pbssBANK0 0029               __pmaintext 0615  
                ?_lcdCmd 0070    __size_of_lcdSetCursor 004A                ?_lcdClear 0070  
              ?_lcdPrint 0070               __stringtab 0003        __end_of_kbdGetKey 0615  
  __size_of_lcdWriteChar 0037             _lcdSetCursor 04EB          __size_of_lcdCmd 001A  
                _kbdInit 044E                  _lcdInit 0535                  __ptext1 04EB  
                __ptext2 0492                  __ptext3 04B4                  __ptext4 0535  
                __ptext5 0443                  __ptext6 0478                  __ptext7 045E  
                __ptext8 044E                  __ptext9 0596                  _lcdPort 045E  
                _old_key 0029                  lcdCmd@a 0073               ??_lcdClear 0074  
             ??_lcdPrint 0075                  main@key 0026             _lcdWriteChar 04B4  
   end_of_initialization 07FC                _PORTDbits 0008               main@passOk 0025  
           _keyPadMatrix 0009           __end_of_lcdCmd 0492      start_initialization 07F8  
               ??_lcdCmd 0071                ___latbits 0002            __pcstackBANK0 0020  
      __size_of_lcdClear 000B        __size_of_lcdPrint 0022                _kbdGetKey 0596  
               ?_kbdInit 0070                __pstrings 0003                 ?_lcdInit 0070  
               ?_lcdPort 0070             kbdGetKey@key 0071             kbdGetKey@row 0072  
             ?_kbdGetKey 0070                lcdPrint@a 0077                lcdPrint@i 0075  
            __stringbase 0008         lcdSetCursor@temp 007A       __end_of__stringtab 0009  
       __size_of_kbdInit 0010         __size_of_lcdInit 0061         __size_of_lcdPort 001A  
               _lcdClear 0443                 _lcdPrint 0492            lcdSetCursor@a 0077  
          lcdSetCursor@b 0074            lcdSetCursor@y 0079            lcdSetCursor@z 0078  
          __size_of_main 01E3              ??_kbdGetKey 0070                 lcdPort@a 0070  
               main@flag 0024            ?_lcdSetCursor 0074                stringcode 0003  
               stringdir 0003                 stringtab 0003            ?_lcdWriteChar 0070  
         ??_lcdSetCursor 0075  
