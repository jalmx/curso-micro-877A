

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May 13 16:14:37 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	dabs	1,0x7E,2
     9  0000                     
    10                           ; Version 2.05
    11                           ; Generated 20/12/2018 GMT
    12                           ; 
    13                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    14                           ; All rights reserved.
    15                           ; 
    16                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    17                           ; 
    18                           ; Redistribution and use in source and binary forms, with or without modification, are
    19                           ; permitted provided that the following conditions are met:
    20                           ; 
    21                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    22                           ;        conditions and the following disclaimer.
    23                           ; 
    24                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    25                           ;        of conditions and the following disclaimer in the documentation and/or other
    26                           ;        materials provided with the distribution.
    27                           ; 
    28                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    29                           ;        software without specific prior written permission.
    30                           ; 
    31                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    32                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    33                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    34                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    35                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    36                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    37                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    38                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    39                           ; 
    40                           ; 
    41                           ; Code-generator required, PIC16F877A Definitions
    42                           ; 
    43                           ; SFR Addresses
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164                           
   165                           	psect	strings
   166  0003                     __pstrings:	
   167  0003                     stringtab:	
   168  0003                     __stringtab:	
   169  0003                     stringcode:	
   170                           ;	String table - string pointers are 1 byte each
   171                           
   172  0003                     stringdir:	
   173  0003  3000               	movlw	high stringdir
   174  0004  008A               	movwf	10
   175  0005  0804               	movf	4,w
   176  0006  0A84               	incf	4,f
   177  0007  0782               	addwf	2,f
   178  0008                     __stringbase:	
   179  0008  3400               	retlw	0
   180  0009                     __end_of__stringtab:	
   181  0009                     main@half:	
   182  0009  3401               	retlw	1
   183  000A  3403               	retlw	3
   184  000B  3402               	retlw	2
   185  000C  3406               	retlw	6
   186  000D  3404               	retlw	4
   187  000E  340C               	retlw	12
   188  000F  3408               	retlw	8
   189  0010  3409               	retlw	9
   190  0011  3400               	retlw	0
   191  0012                     __end_ofmain@half:	
   192  0012                     main@full:	
   193  0012  3403               	retlw	3
   194  0013  3406               	retlw	6
   195  0014  340C               	retlw	12
   196  0015  3409               	retlw	9
   197  0016  3400               	retlw	0
   198  0017                     __end_ofmain@full:	
   199  0017                     main@forward:	
   200  0017  3408               	retlw	8
   201  0018  3404               	retlw	4
   202  0019  3402               	retlw	2
   203  001A  3401               	retlw	1
   204  001B  3400               	retlw	0
   205  001C                     __end_ofmain@forward:	
   206  001C                     main@backward:	
   207  001C  3401               	retlw	1
   208  001D  3402               	retlw	2
   209  001E  3404               	retlw	4
   210  001F  3408               	retlw	8
   211  0020  3400               	retlw	0
   212  0021                     __end_ofmain@backward:	
   213  0021                     main@TIME:	
   214  0021  3464               	retlw	100
   215  0022  3400               	retlw	0
   216  0023                     __end_ofmain@TIME:	
   217  0007                     _PORTCbits	set	7
   218  0008                     _PORTD	set	8
   219  0007                     _PORTC	set	7
   220  0006                     _PORTB	set	6
   221  0088                     _TRISD	set	136
   222  0087                     _TRISC	set	135
   223  0086                     _TRISB	set	134
   224                           
   225                           	psect	cinit
   226  07FC                     start_initialization:	
   227                           ; #config settings
   228                           
   229  07FC                     __initialization:	
   230  07FC                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233  07FC                     __end_of__initialization:	
   234  07FC  0183               	clrf	3
   235  07FD  120A  118A  2F43   	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	cstackCOMMON
   238  0070                     __pcstackCOMMON:	
   239  0070                     ?_main:	
   240  0070                     ??_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 1 bytes @ 0x0
   245  0070                     	ds	2
   246  0072                     main@i:	
   247                           
   248                           ; 2 bytes @ 0x2
   249  0072                     	ds	2
   250                           
   251                           	psect	maintext
   252  0743                     __pmaintext:	
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 4 in file "main.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;  i               2    2[COMMON] int 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   272 ;;      Params:         0       0       0       0       0
   273 ;;      Locals:         2       0       0       0       0
   274 ;;      Temps:          2       0       0       0       0
   275 ;;      Totals:         4       0       0       0       0
   276 ;;Total ram usage:        4 bytes
   277 ;; Hardware stack levels used:    1
   278 ;; This function calls:
   279 ;;		Nothing
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           
   286                           ;psect for function _main
   287  0743                     _main:	
   288                           
   289                           ;main.c: 5:     char const backward[] = {0x01, 0x02, 0x04, 0x08, '\0'};;main.c: 6:     c
      +                          har const forward[] = {0x08, 0x04, 0x02, 0x01, '\0'};;main.c: 7:     char const full[] =
      +                           {0x03, 0x06, 0x0C, 0x09, '\0'};;main.c: 8:     char const half[] = {0x01, 0x03, 0x02, 0
      +                          x06, 0x04, 0x0C, 0x08, 0x09, '\0'};;main.c: 9:     int const TIME = 100;;main.c: 10:    
      +                           TRISB = 0;
   290                           
   291                           ;incstack = 0
   292                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath]
   293  0743  1683               	bsf	3,5	;RP0=1, select bank1
   294  0744  1303               	bcf	3,6	;RP1=0, select bank1
   295  0745  0186               	clrf	6	;volatile
   296                           
   297                           ;main.c: 11:     TRISC = 255;
   298  0746  30FF               	movlw	255
   299  0747  0087               	movwf	7	;volatile
   300                           
   301                           ;main.c: 12:     TRISD = 0;
   302  0748  0188               	clrf	8	;volatile
   303                           
   304                           ;main.c: 13:     PORTB = 0;
   305  0749  1283               	bcf	3,5	;RP0=0, select bank0
   306  074A  1303               	bcf	3,6	;RP1=0, select bank0
   307  074B  0186               	clrf	6	;volatile
   308                           
   309                           ;main.c: 14:     PORTC = 0;
   310  074C  0187               	clrf	7	;volatile
   311                           
   312                           ;main.c: 15:     PORTD = 0;
   313  074D  0188               	clrf	8	;volatile
   314  074E  2F75               	goto	l715
   315  074F                     l721:	
   316                           
   317                           ;main.c: 22:                 PORTD = PORTB = forward[i++];
   318  074F  0872               	movf	main@i,w
   319  0750  3E0F               	addlw	low ((main@forward-__stringbase)| (0+32768))
   320  0751  0084               	movwf	4
   321  0752  120A  118A  2003  120A  118A  	fcall	stringdir
   322  0757  1283               	bcf	3,5	;RP0=0, select bank0
   323  0758  1303               	bcf	3,6	;RP1=0, select bank0
   324  0759  0086               	movwf	6	;volatile
   325  075A  0088               	movwf	8	;volatile
   326  075B  3001               	movlw	1
   327  075C  07F2               	addwf	main@i,f
   328  075D  1803               	skipnc
   329  075E  0AF3               	incf	main@i+1,f
   330  075F  3000               	movlw	0
   331  0760  07F3               	addwf	main@i+1,f
   332                           
   333                           ;main.c: 23:                 _delay((unsigned long)((TIME)*(4000000/4000.0)));
   334  0761  3082               	movlw	130
   335  0762  00F1               	movwf	??_main+1
   336  0763  30DD               	movlw	221
   337  0764  00F0               	movwf	??_main
   338  0765                     u177:	
   339  0765  0BF0               	decfsz	??_main,f
   340  0766  2F65               	goto	u177
   341  0767  0BF1               	decfsz	??_main+1,f
   342  0768  2F65               	goto	u177
   343  0769  2F6A               	nop2
   344  076A                     l33:	
   345                           ;main.c: 24:             }
   346                           
   347                           
   348                           ;main.c: 21:             while (forward[i] != '\0') {
   349  076A  0872               	movf	main@i,w
   350  076B  3E0F               	addlw	low ((main@forward-__stringbase)| (0+32768))
   351  076C  0084               	movwf	4
   352  076D  120A  118A  2003  120A  118A  	fcall	stringdir
   353  0772  3A00               	xorlw	0
   354  0773  1D03               	skipz
   355  0774  2F4F               	goto	l721
   356  0775                     l715:	
   357                           ;main.c: 26:         } else if (PORTCbits.RC1 == 1) {
   358                           
   359                           
   360                           ;main.c: 18:         int i = 0;
   361  0775  01F2               	clrf	main@i
   362  0776  01F3               	clrf	main@i+1
   363                           
   364                           ;main.c: 20:         if (PORTCbits.RC0 == 1) {
   365  0777  1283               	bcf	3,5	;RP0=0, select bank0
   366  0778  1303               	bcf	3,6	;RP1=0, select bank0
   367  0779  1807               	btfsc	7,0	;volatile
   368  077A  2F6A               	goto	l33
   369  077B  1887               	btfsc	7,1	;volatile
   370  077C  2F99               	goto	l38
   371  077D  2FA5               	goto	l37
   372  077E                     l731:	
   373                           
   374                           ;main.c: 28:                 PORTD = PORTB = backward[i++];
   375  077E  0872               	movf	main@i,w
   376  077F  3E14               	addlw	low ((main@backward-__stringbase)| (0+32768))
   377  0780  0084               	movwf	4
   378  0781  120A  118A  2003  120A  118A  	fcall	stringdir
   379  0786  1283               	bcf	3,5	;RP0=0, select bank0
   380  0787  1303               	bcf	3,6	;RP1=0, select bank0
   381  0788  0086               	movwf	6	;volatile
   382  0789  0088               	movwf	8	;volatile
   383  078A  3001               	movlw	1
   384  078B  07F2               	addwf	main@i,f
   385  078C  1803               	skipnc
   386  078D  0AF3               	incf	main@i+1,f
   387  078E  3000               	movlw	0
   388  078F  07F3               	addwf	main@i+1,f
   389                           
   390                           ;main.c: 29:                 _delay((unsigned long)((TIME)*(4000000/4000.0)));
   391  0790  3082               	movlw	130
   392  0791  00F1               	movwf	??_main+1
   393  0792  30DD               	movlw	221
   394  0793  00F0               	movwf	??_main
   395  0794                     u187:	
   396  0794  0BF0               	decfsz	??_main,f
   397  0795  2F94               	goto	u187
   398  0796  0BF1               	decfsz	??_main+1,f
   399  0797  2F94               	goto	u187
   400  0798  2F99               	nop2
   401  0799                     l38:	
   402                           ;main.c: 30:             }
   403                           
   404                           
   405                           ;main.c: 27:             while (backward[i] != '\0') {
   406  0799  0872               	movf	main@i,w
   407  079A  3E14               	addlw	low ((main@backward-__stringbase)| (0+32768))
   408  079B  0084               	movwf	4
   409  079C  120A  118A  2003  120A  118A  	fcall	stringdir
   410  07A1  3A00               	xorlw	0
   411  07A2  1903               	btfsc	3,2
   412  07A3  2F75               	goto	l715
   413  07A4  2F7E               	goto	l731
   414  07A5                     l37:	
   415  07A5  1907               	btfsc	7,2	;volatile
   416  07A6  2FC3               	goto	l43
   417  07A7  2FCF               	goto	l42
   418  07A8                     l741:	
   419                           
   420                           ;main.c: 34:                 PORTD = PORTB = full[i++];
   421  07A8  0872               	movf	main@i,w
   422  07A9  3E0A               	addlw	low ((main@full-__stringbase)| (0+32768))
   423  07AA  0084               	movwf	4
   424  07AB  120A  118A  2003  120A  118A  	fcall	stringdir
   425  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   426  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   427  07B2  0086               	movwf	6	;volatile
   428  07B3  0088               	movwf	8	;volatile
   429  07B4  3001               	movlw	1
   430  07B5  07F2               	addwf	main@i,f
   431  07B6  1803               	skipnc
   432  07B7  0AF3               	incf	main@i+1,f
   433  07B8  3000               	movlw	0
   434  07B9  07F3               	addwf	main@i+1,f
   435                           
   436                           ;main.c: 35:                 _delay((unsigned long)((TIME)*(4000000/4000.0)));
   437  07BA  3082               	movlw	130
   438  07BB  00F1               	movwf	??_main+1
   439  07BC  30DD               	movlw	221
   440  07BD  00F0               	movwf	??_main
   441  07BE                     u197:	
   442  07BE  0BF0               	decfsz	??_main,f
   443  07BF  2FBE               	goto	u197
   444  07C0  0BF1               	decfsz	??_main+1,f
   445  07C1  2FBE               	goto	u197
   446  07C2  2FC3               	nop2
   447  07C3                     l43:	
   448                           ;main.c: 36:             }
   449                           
   450                           
   451                           ;main.c: 33:             while (full[i] != '\0') {
   452  07C3  0872               	movf	main@i,w
   453  07C4  3E0A               	addlw	low ((main@full-__stringbase)| (0+32768))
   454  07C5  0084               	movwf	4
   455  07C6  120A  118A  2003  120A  118A  	fcall	stringdir
   456  07CB  3A00               	xorlw	0
   457  07CC  1903               	btfsc	3,2
   458  07CD  2F75               	goto	l715
   459  07CE  2FA8               	goto	l741
   460  07CF                     l42:	
   461  07CF  1987               	btfsc	7,3	;volatile
   462  07D0  2FED               	goto	l48
   463  07D1  2FF9               	goto	l759
   464  07D2                     l751:	
   465                           
   466                           ;main.c: 40:                 PORTB = PORTD = half[i++];
   467  07D2  0872               	movf	main@i,w
   468  07D3  3E01               	addlw	low ((main@half-__stringbase)| (0+32768))
   469  07D4  0084               	movwf	4
   470  07D5  120A  118A  2003  120A  118A  	fcall	stringdir
   471  07DA  1283               	bcf	3,5	;RP0=0, select bank0
   472  07DB  1303               	bcf	3,6	;RP1=0, select bank0
   473  07DC  0088               	movwf	8	;volatile
   474  07DD  0086               	movwf	6	;volatile
   475  07DE  3001               	movlw	1
   476  07DF  07F2               	addwf	main@i,f
   477  07E0  1803               	skipnc
   478  07E1  0AF3               	incf	main@i+1,f
   479  07E2  3000               	movlw	0
   480  07E3  07F3               	addwf	main@i+1,f
   481                           
   482                           ;main.c: 41:                 _delay((unsigned long)((TIME)*(4000000/4000.0)));
   483  07E4  3082               	movlw	130
   484  07E5  00F1               	movwf	??_main+1
   485  07E6  30DD               	movlw	221
   486  07E7  00F0               	movwf	??_main
   487  07E8                     u207:	
   488  07E8  0BF0               	decfsz	??_main,f
   489  07E9  2FE8               	goto	u207
   490  07EA  0BF1               	decfsz	??_main+1,f
   491  07EB  2FE8               	goto	u207
   492  07EC  2FED               	nop2
   493  07ED                     l48:	
   494                           ;main.c: 42:             }
   495                           
   496                           
   497                           ;main.c: 39:             while (half[i] != '\0') {
   498  07ED  0872               	movf	main@i,w
   499  07EE  3E01               	addlw	low ((main@half-__stringbase)| (0+32768))
   500  07EF  0084               	movwf	4
   501  07F0  120A  118A  2003  120A  118A  	fcall	stringdir
   502  07F5  3A00               	xorlw	0
   503  07F6  1903               	btfsc	3,2
   504  07F7  2F75               	goto	l715
   505  07F8  2FD2               	goto	l751
   506  07F9                     l759:	
   507                           
   508                           ;main.c: 45:             PORTB = PORTD = 0;
   509  07F9  0188               	clrf	8	;volatile
   510  07FA  0186               	clrf	6	;volatile
   511  07FB  2F75               	goto	l715
   512  07FC                     __end_of_main:	
   513  007E                     btemp	set	126	;btemp
   514  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    26
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       4
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _main                                                 4     4      0     185
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       4       1       28.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May 13 16:14:37 2019

                      pc 0002                       l33 076A                       l42 07CF  
                     l43 07C3                       l37 07A5                       l38 0799  
                     l48 07ED                       fsr 0004                      l721 074F  
                    l731 077E                      l715 0775                      l741 07A8  
                    l751 07D2                      l759 07F9                      u207 07E8  
                    u177 0765                      u187 0794                      u197 07BE  
                    fsr0 0004              main@forward 0017                     _main 0743  
                   btemp 007E                     start 0000             main@backward 001C  
                  ?_main 0070                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    main@i 0072                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0070         __end_ofmain@TIME 0023  
       __end_ofmain@half 0012         __end_ofmain@full 0017  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 0743               __stringtab 0003  
   end_of_initialization 07FC                _PORTCbits 0007      start_initialization 07FC  
              ___latbits 0002                __pstrings 0003              __stringbase 0008  
     __end_of__stringtab 0009     __end_ofmain@backward 0021            __size_of_main 00B9  
               main@TIME 0021                 main@half 0009                 main@full 0012  
              stringcode 0003      __end_ofmain@forward 001C                 stringdir 0003  
               stringtab 0003  
