

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 26 19:53:46 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	dabs	1,0x7E,2
     9  0000                     
    10                           ; Version 2.05
    11                           ; Generated 20/12/2018 GMT
    12                           ; 
    13                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    14                           ; All rights reserved.
    15                           ; 
    16                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    17                           ; 
    18                           ; Redistribution and use in source and binary forms, with or without modification, are
    19                           ; permitted provided that the following conditions are met:
    20                           ; 
    21                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    22                           ;        conditions and the following disclaimer.
    23                           ; 
    24                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    25                           ;        of conditions and the following disclaimer in the documentation and/or other
    26                           ;        materials provided with the distribution.
    27                           ; 
    28                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    29                           ;        software without specific prior written permission.
    30                           ; 
    31                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    32                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    33                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    34                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    35                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    36                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    37                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    38                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    39                           ; 
    40                           ; 
    41                           ; Code-generator required, PIC16F877A Definitions
    42                           ; 
    43                           ; SFR Addresses
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164                           
   165                           	psect	strings
   166  0003                     __pstrings:	
   167  0003                     stringtab:	
   168  0003                     __stringtab:	
   169  0003                     stringcode:	
   170                           ;	String table - string pointers are 1 byte each
   171                           
   172  0003                     stringdir:	
   173  0003  3000               	movlw	high stringdir
   174  0004  008A               	movwf	10
   175  0005  0804               	movf	4,w
   176  0006  0A84               	incf	4,f
   177  0007  0782               	addwf	2,f
   178  0008                     __stringbase:	
   179  0008  3400               	retlw	0
   180  0009                     __end_of__stringtab:	
   181  0009                     main@half:	
   182  0009  3401               	retlw	1
   183  000A  3403               	retlw	3
   184  000B  3402               	retlw	2
   185  000C  3406               	retlw	6
   186  000D  3404               	retlw	4
   187  000E  340C               	retlw	12
   188  000F  3408               	retlw	8
   189  0010  3409               	retlw	9
   190  0011  3400               	retlw	0
   191  0012                     __end_ofmain@half:	
   192  0012                     main@full:	
   193  0012  3403               	retlw	3
   194  0013  3406               	retlw	6
   195  0014  340C               	retlw	12
   196  0015  3409               	retlw	9
   197  0016  3400               	retlw	0
   198  0017                     __end_ofmain@full:	
   199  0017                     main@forward:	
   200  0017  3408               	retlw	8
   201  0018  3404               	retlw	4
   202  0019  3402               	retlw	2
   203  001A  3401               	retlw	1
   204  001B  3400               	retlw	0
   205  001C                     __end_ofmain@forward:	
   206  001C                     main@backward:	
   207  001C  3401               	retlw	1
   208  001D  3402               	retlw	2
   209  001E  3404               	retlw	4
   210  001F  3408               	retlw	8
   211  0020  3400               	retlw	0
   212  0021                     __end_ofmain@backward:	
   213  0021                     main@TIME:	
   214  0021  34E8               	retlw	232
   215  0022  3403               	retlw	3
   216  0023                     __end_ofmain@TIME:	
   217  0007                     _PORTCbits	set	7
   218  0008                     _PORTD	set	8
   219  0007                     _PORTC	set	7
   220  0006                     _PORTB	set	6
   221  0088                     _TRISD	set	136
   222  0087                     _TRISC	set	135
   223  0086                     _TRISB	set	134
   224                           
   225                           	psect	cinit
   226  07FC                     start_initialization:	
   227                           ; #config settings
   228                           
   229  07FC                     __initialization:	
   230  07FC                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233  07FC                     __end_of__initialization:	
   234  07FC  0183               	clrf	3
   235  07FD  120A  118A  2F3C   	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	cstackCOMMON
   238  0070                     __pcstackCOMMON:	
   239  0070                     ?_main:	
   240  0070                     ??_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 1 bytes @ 0x0
   245  0070                     	ds	2
   246  0072                     main@i:	
   247                           
   248                           ; 2 bytes @ 0x2
   249  0072                     	ds	2
   250  0074                     main@i_74:	
   251                           
   252                           ; 2 bytes @ 0x4
   253  0074                     	ds	2
   254  0076                     main@i_75:	
   255                           
   256                           ; 2 bytes @ 0x6
   257  0076                     	ds	2
   258  0078                     main@i_76:	
   259                           
   260                           ; 2 bytes @ 0x8
   261  0078                     	ds	2
   262                           
   263                           	psect	maintext
   264  073C                     __pmaintext:	
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 5 in file "main.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  i               2    8[COMMON] int 
   275 ;;  i               2    6[COMMON] int 
   276 ;;  i               2    4[COMMON] int 
   277 ;;  i               2    2[COMMON] int 
   278 ;; Return value:  Size  Location     Type
   279 ;;                  1    wreg      void 
   280 ;; Registers used:
   281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   282 ;; Tracked objects:
   283 ;;		On entry : B00/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   287 ;;      Params:         0       0       0       0       0
   288 ;;      Locals:         8       0       0       0       0
   289 ;;      Temps:          2       0       0       0       0
   290 ;;      Totals:        10       0       0       0       0
   291 ;;Total ram usage:       10 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; This function calls:
   294 ;;		Nothing
   295 ;; This function is called by:
   296 ;;		Startup code after reset
   297 ;; This function uses a non-reentrant model
   298 ;;
   299                           
   300                           
   301                           ;psect for function _main
   302  073C                     _main:	
   303                           
   304                           ;main.c: 6:     char const backward[] = {0x01, 0x02, 0x04, 0x08, '\0'};;main.c: 7:     c
      +                          har const forward[] = {0x08, 0x04, 0x02, 0x01, '\0'};;main.c: 8:     char const full[] =
      +                           {0x03, 0x06, 0x0C, 0x09, '\0'};;main.c: 9:     char const half[] = {0x01, 0x03, 0x02, 0
      +                          x06, 0x04, 0x0C, 0x08, 0x09, '\0'};;main.c: 10:     int const TIME = 1000;;main.c: 11:  
      +                             TRISB = 0;
   305                           
   306                           ;incstack = 0
   307                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath]
   308  073C  1683               	bsf	3,5	;RP0=1, select bank1
   309  073D  1303               	bcf	3,6	;RP1=0, select bank1
   310  073E  0186               	clrf	6	;volatile
   311                           
   312                           ;main.c: 12:     TRISC = 255;
   313  073F  30FF               	movlw	255
   314  0740  0087               	movwf	7	;volatile
   315                           
   316                           ;main.c: 13:     TRISD = 0;
   317  0741  0188               	clrf	8	;volatile
   318                           
   319                           ;main.c: 14:     PORTB = 0;
   320  0742  1283               	bcf	3,5	;RP0=0, select bank0
   321  0743  1303               	bcf	3,6	;RP1=0, select bank0
   322  0744  0186               	clrf	6	;volatile
   323                           
   324                           ;main.c: 15:     PORTC = 0;
   325  0745  0187               	clrf	7	;volatile
   326                           
   327                           ;main.c: 16:     PORTD = 0;
   328  0746  0188               	clrf	8	;volatile
   329  0747  2FF0               	goto	l729
   330  0748                     l731:	
   331                           
   332                           ;main.c: 21:             int i = 0;
   333  0748  01F2               	clrf	main@i
   334  0749  01F3               	clrf	main@i+1
   335  074A                     l741:	
   336                           ;main.c: 22:             while (forward[i] != '\0') {
   337                           
   338                           
   339                           ;main.c: 22:             while (forward[i] != '\0') {
   340  074A  0872               	movf	main@i,w
   341  074B  3E0F               	addlw	low ((main@forward-__stringbase)| (0+32768))
   342  074C  0084               	movwf	4
   343  074D  120A  118A  2003  120A  118A  	fcall	stringdir
   344  0752  3A00               	xorlw	0
   345  0753  1903               	btfsc	3,2
   346  0754  2FF0               	goto	l729
   347                           
   348                           ;main.c: 23:                 PORTB = forward[i++];
   349  0755  0872               	movf	main@i,w
   350  0756  3E0F               	addlw	low ((main@forward-__stringbase)| (0+32768))
   351  0757  0084               	movwf	4
   352  0758  120A  118A  2003  120A  118A  	fcall	stringdir
   353  075D  1283               	bcf	3,5	;RP0=0, select bank0
   354  075E  1303               	bcf	3,6	;RP1=0, select bank0
   355  075F  0086               	movwf	6	;volatile
   356  0760  3001               	movlw	1
   357  0761  07F2               	addwf	main@i,f
   358  0762  1803               	skipnc
   359  0763  0AF3               	incf	main@i+1,f
   360  0764  3000               	movlw	0
   361  0765  07F3               	addwf	main@i+1,f
   362                           
   363                           ;main.c: 24:                 PORTD = PORTB;
   364  0766  0806               	movf	6,w	;volatile
   365  0767  0088               	movwf	8	;volatile
   366                           
   367                           ;main.c: 25:                 _delay((unsigned long)((TIME)*(40000/4000.0)));
   368  0768  300D               	movlw	13
   369  0769  00F1               	movwf	??_main+1
   370  076A  30FB               	movlw	251
   371  076B  00F0               	movwf	??_main
   372  076C                     u177:	
   373  076C  0BF0               	decfsz	??_main,f
   374  076D  2F6C               	goto	u177
   375  076E  0BF1               	decfsz	??_main+1,f
   376  076F  2F6C               	goto	u177
   377  0770  2F71               	nop2
   378  0771  2F4A               	goto	l741
   379  0772                     l745:	
   380                           ;main.c: 28:         } else if (PORTCbits.RC1 == 1) {
   381                           
   382                           
   383                           ;main.c: 29:             int i = 0;
   384  0772  01F4               	clrf	main@i_74
   385  0773  01F5               	clrf	main@i_74+1
   386  0774                     l755:	
   387                           ;main.c: 30:             while (backward[i] != '\0') {
   388                           
   389                           
   390                           ;main.c: 30:             while (backward[i] != '\0') {
   391  0774  0874               	movf	main@i_74,w
   392  0775  3E14               	addlw	low ((main@backward-__stringbase)| (0+32768))
   393  0776  0084               	movwf	4
   394  0777  120A  118A  2003  120A  118A  	fcall	stringdir
   395  077C  3A00               	xorlw	0
   396  077D  1903               	btfsc	3,2
   397  077E  2FF0               	goto	l729
   398                           
   399                           ;main.c: 31:                 PORTB = backward[i++];
   400  077F  0874               	movf	main@i_74,w
   401  0780  3E14               	addlw	low ((main@backward-__stringbase)| (0+32768))
   402  0781  0084               	movwf	4
   403  0782  120A  118A  2003  120A  118A  	fcall	stringdir
   404  0787  1283               	bcf	3,5	;RP0=0, select bank0
   405  0788  1303               	bcf	3,6	;RP1=0, select bank0
   406  0789  0086               	movwf	6	;volatile
   407  078A  3001               	movlw	1
   408  078B  07F4               	addwf	main@i_74,f
   409  078C  1803               	skipnc
   410  078D  0AF5               	incf	main@i_74+1,f
   411  078E  3000               	movlw	0
   412  078F  07F5               	addwf	main@i_74+1,f
   413                           
   414                           ;main.c: 32:                 PORTD = PORTB;
   415  0790  0806               	movf	6,w	;volatile
   416  0791  0088               	movwf	8	;volatile
   417                           
   418                           ;main.c: 33:                 _delay((unsigned long)((TIME)*(40000/4000.0)));
   419  0792  300D               	movlw	13
   420  0793  00F1               	movwf	??_main+1
   421  0794  30FB               	movlw	251
   422  0795  00F0               	movwf	??_main
   423  0796                     u187:	
   424  0796  0BF0               	decfsz	??_main,f
   425  0797  2F96               	goto	u187
   426  0798  0BF1               	decfsz	??_main+1,f
   427  0799  2F96               	goto	u187
   428  079A  2F9B               	nop2
   429  079B  2F74               	goto	l755
   430  079C                     l759:	
   431                           ;main.c: 36:         } else if (PORTCbits.RC2 == 1) {
   432                           
   433                           
   434                           ;main.c: 37:             int i = 0;
   435  079C  01F6               	clrf	main@i_75
   436  079D  01F7               	clrf	main@i_75+1
   437  079E                     l769:	
   438                           ;main.c: 38:             while (full[i] != '\0') {
   439                           
   440                           
   441                           ;main.c: 38:             while (full[i] != '\0') {
   442  079E  0876               	movf	main@i_75,w
   443  079F  3E0A               	addlw	low ((main@full-__stringbase)| (0+32768))
   444  07A0  0084               	movwf	4
   445  07A1  120A  118A  2003  120A  118A  	fcall	stringdir
   446  07A6  3A00               	xorlw	0
   447  07A7  1903               	btfsc	3,2
   448  07A8  2FF0               	goto	l729
   449                           
   450                           ;main.c: 39:                 PORTB = full[i++];
   451  07A9  0876               	movf	main@i_75,w
   452  07AA  3E0A               	addlw	low ((main@full-__stringbase)| (0+32768))
   453  07AB  0084               	movwf	4
   454  07AC  120A  118A  2003  120A  118A  	fcall	stringdir
   455  07B1  1283               	bcf	3,5	;RP0=0, select bank0
   456  07B2  1303               	bcf	3,6	;RP1=0, select bank0
   457  07B3  0086               	movwf	6	;volatile
   458  07B4  3001               	movlw	1
   459  07B5  07F6               	addwf	main@i_75,f
   460  07B6  1803               	skipnc
   461  07B7  0AF7               	incf	main@i_75+1,f
   462  07B8  3000               	movlw	0
   463  07B9  07F7               	addwf	main@i_75+1,f
   464                           
   465                           ;main.c: 40:                 PORTD = PORTB;
   466  07BA  0806               	movf	6,w	;volatile
   467  07BB  0088               	movwf	8	;volatile
   468                           
   469                           ;main.c: 41:                 _delay((unsigned long)((TIME)*(40000/4000.0)));
   470  07BC  300D               	movlw	13
   471  07BD  00F1               	movwf	??_main+1
   472  07BE  30FB               	movlw	251
   473  07BF  00F0               	movwf	??_main
   474  07C0                     u197:	
   475  07C0  0BF0               	decfsz	??_main,f
   476  07C1  2FC0               	goto	u197
   477  07C2  0BF1               	decfsz	??_main+1,f
   478  07C3  2FC0               	goto	u197
   479  07C4  2FC5               	nop2
   480  07C5  2F9E               	goto	l769
   481  07C6                     l773:	
   482                           ;main.c: 44:         } else if (PORTCbits.RC3 == 1) {
   483                           
   484                           
   485                           ;main.c: 45:             int i = 0;
   486  07C6  01F8               	clrf	main@i_76
   487  07C7  01F9               	clrf	main@i_76+1
   488  07C8                     l783:	
   489                           ;main.c: 46:             while (half[i] != '\0') {
   490                           
   491                           
   492                           ;main.c: 46:             while (half[i] != '\0') {
   493  07C8  0878               	movf	main@i_76,w
   494  07C9  3E01               	addlw	low ((main@half-__stringbase)| (0+32768))
   495  07CA  0084               	movwf	4
   496  07CB  120A  118A  2003  120A  118A  	fcall	stringdir
   497  07D0  3A00               	xorlw	0
   498  07D1  1903               	btfsc	3,2
   499  07D2  2FF0               	goto	l729
   500                           
   501                           ;main.c: 47:                 PORTB = half[i++];
   502  07D3  0878               	movf	main@i_76,w
   503  07D4  3E01               	addlw	low ((main@half-__stringbase)| (0+32768))
   504  07D5  0084               	movwf	4
   505  07D6  120A  118A  2003  120A  118A  	fcall	stringdir
   506  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   507  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   508  07DD  0086               	movwf	6	;volatile
   509  07DE  3001               	movlw	1
   510  07DF  07F8               	addwf	main@i_76,f
   511  07E0  1803               	skipnc
   512  07E1  0AF9               	incf	main@i_76+1,f
   513  07E2  3000               	movlw	0
   514  07E3  07F9               	addwf	main@i_76+1,f
   515                           
   516                           ;main.c: 48:                 PORTD = PORTB;
   517  07E4  0806               	movf	6,w	;volatile
   518  07E5  0088               	movwf	8	;volatile
   519                           
   520                           ;main.c: 49:                 _delay((unsigned long)((TIME)*(40000/4000.0)));
   521  07E6  300D               	movlw	13
   522  07E7  00F1               	movwf	??_main+1
   523  07E8  30FB               	movlw	251
   524  07E9  00F0               	movwf	??_main
   525  07EA                     u207:	
   526  07EA  0BF0               	decfsz	??_main,f
   527  07EB  2FEA               	goto	u207
   528  07EC  0BF1               	decfsz	??_main+1,f
   529  07ED  2FEA               	goto	u207
   530  07EE  2FEF               	nop2
   531  07EF  2FC8               	goto	l783
   532  07F0                     l729:	
   533                           ;main.c: 52:         } else {
   534                           
   535                           
   536                           ;main.c: 20:         if (PORTCbits.RC0 == 1) {
   537  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   538  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   539  07F2  1807               	btfsc	7,0	;volatile
   540  07F3  2F48               	goto	l731
   541  07F4  1887               	btfsc	7,1	;volatile
   542  07F5  2F72               	goto	l745
   543  07F6  1907               	btfsc	7,2	;volatile
   544  07F7  2F9C               	goto	l759
   545  07F8  1987               	btfsc	7,3	;volatile
   546  07F9  2FC6               	goto	l773
   547                           
   548                           ;main.c: 53:             PORTB = 0;
   549  07FA  0186               	clrf	6	;volatile
   550  07FB  2FF0               	goto	l729
   551  07FC                     __end_of_main:	
   552  007E                     btemp	set	126	;btemp
   553  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    26
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _main                                                10    10      0     188
                                              0 COMMON    10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 26 19:53:46 2019

                      pc 0002                       fsr 0004                      l731 0748  
                    l741 074A                      l745 0772                      l729 07F0  
                    l755 0774                      l773 07C6                      l783 07C8  
                    l759 079C                      l769 079E                      u207 07EA  
                    u177 076C                      u187 0796                      u197 07C0  
                    fsr0 0004              main@forward 0017                     _main 073C  
                   btemp 007E                     start 0000             main@backward 001C  
                  ?_main 0070                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    main@i 0072                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0070         __end_ofmain@TIME 0023  
       __end_ofmain@half 0012         __end_ofmain@full 0017  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 073C               __stringtab 0003  
   end_of_initialization 07FC                _PORTCbits 0007      start_initialization 07FC  
              ___latbits 0002                __pstrings 0003              __stringbase 0008  
     __end_of__stringtab 0009     __end_ofmain@backward 0021            __size_of_main 00C0  
               main@TIME 0021                 main@i_74 0074                 main@i_75 0076  
               main@i_76 0078                 main@half 0009                 main@full 0012  
              stringcode 0003      __end_ofmain@forward 001C                 stringdir 0003  
               stringtab 0003  
