

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 31 16:42:19 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text1_split_1,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134                           
   135                           	psect	strings
   136  1000                     __pstrings:	
   137  1000                     stringtab:	
   138  1000                     __stringtab:	
   139                           
   140                           ;	String table - string pointers are 1 byte each
   141  1000  1BFF               	btfsc	btemp+1,7
   142  1001  280A               	ljmp	stringcode
   143  1002  1383               	bcf	3,7
   144  1003  187F               	btfsc	btemp+1,0
   145  1004  1783               	bsf	3,7
   146  1005  0800               	movf	0,w
   147  1006  0A84               	incf	4,f
   148  1007  1903               	skipnz
   149  1008  0AFF               	incf	btemp+1,f
   150  1009  0008               	return
   151  100A                     stringcode:	
   152  100A                     stringdir:	
   153  100A  3010               	movlw	high stringdir
   154  100B  008A               	movwf	10
   155  100C  0804               	movf	4,w
   156  100D  0A84               	incf	4,f
   157  100E  0782               	addwf	2,f
   158  100F                     __stringbase:	
   159  100F  3400               	retlw	0
   160  1010                     __end_of__stringtab:	
   161  1010                     _dpowers:	
   162  1010  3401               	retlw	1
   163  1011  3400               	retlw	0
   164  1012  3400               	retlw	0
   165  1013  3400               	retlw	0
   166  1014  340A               	retlw	10
   167  1015  3400               	retlw	0
   168  1016  3400               	retlw	0
   169  1017  3400               	retlw	0
   170  1018  3464               	retlw	100
   171  1019  3400               	retlw	0
   172  101A  3400               	retlw	0
   173  101B  3400               	retlw	0
   174  101C  34E8               	retlw	232
   175  101D  3403               	retlw	3
   176  101E  3400               	retlw	0
   177  101F  3400               	retlw	0
   178  1020  3410               	retlw	16
   179  1021  3427               	retlw	39
   180  1022  3400               	retlw	0
   181  1023  3400               	retlw	0
   182  1024  34A0               	retlw	160
   183  1025  3486               	retlw	134
   184  1026  3401               	retlw	1
   185  1027  3400               	retlw	0
   186  1028  3440               	retlw	64
   187  1029  3442               	retlw	66
   188  102A  340F               	retlw	15
   189  102B  3400               	retlw	0
   190  102C  3480               	retlw	128
   191  102D  3496               	retlw	150
   192  102E  3498               	retlw	152
   193  102F  3400               	retlw	0
   194  1030  3400               	retlw	0
   195  1031  34E1               	retlw	225
   196  1032  34F5               	retlw	245
   197  1033  3405               	retlw	5
   198  1034  3400               	retlw	0
   199  1035  34CA               	retlw	202
   200  1036  349A               	retlw	154
   201  1037  343B               	retlw	59
   202  1038                     __end_of_dpowers:	
   203  1038                     __powers_:	
   204  1038  3400               	retlw	0
   205  1039  3480               	retlw	128
   206  103A  343F               	retlw	63
   207  103B  3400               	retlw	0
   208  103C  3420               	retlw	32
   209  103D  3441               	retlw	65
   210  103E  3400               	retlw	0
   211  103F  34C8               	retlw	200
   212  1040  3442               	retlw	66
   213  1041  3400               	retlw	0
   214  1042  347A               	retlw	122
   215  1043  3444               	retlw	68
   216  1044  3440               	retlw	64
   217  1045  341C               	retlw	28
   218  1046  3446               	retlw	70
   219  1047  3450               	retlw	80
   220  1048  34C3               	retlw	195
   221  1049  3447               	retlw	71
   222  104A  3424               	retlw	36
   223  104B  3474               	retlw	116
   224  104C  3449               	retlw	73
   225  104D  3497               	retlw	151
   226  104E  3418               	retlw	24
   227  104F  344B               	retlw	75
   228  1050  34BC               	retlw	188
   229  1051  34BE               	retlw	190
   230  1052  344C               	retlw	76
   231  1053  346B               	retlw	107
   232  1054  346E               	retlw	110
   233  1055  344E               	retlw	78
   234  1056  3403               	retlw	3
   235  1057  3415               	retlw	21
   236  1058  3450               	retlw	80
   237  1059  3479               	retlw	121
   238  105A  34AD               	retlw	173
   239  105B  3460               	retlw	96
   240  105C  34F3               	retlw	243
   241  105D  3449               	retlw	73
   242  105E  3471               	retlw	113
   243  105F                     __end_of__powers_:	
   244  105F                     __npowers_:	
   245  105F  3400               	retlw	0
   246  1060  3480               	retlw	128
   247  1061  343F               	retlw	63
   248  1062  34CD               	retlw	205
   249  1063  34CC               	retlw	204
   250  1064  343D               	retlw	61
   251  1065  34D7               	retlw	215
   252  1066  3423               	retlw	35
   253  1067  343C               	retlw	60
   254  1068  3412               	retlw	18
   255  1069  3483               	retlw	131
   256  106A  343A               	retlw	58
   257  106B  34B7               	retlw	183
   258  106C  34D1               	retlw	209
   259  106D  3438               	retlw	56
   260  106E  34C6               	retlw	198
   261  106F  3427               	retlw	39
   262  1070  3437               	retlw	55
   263  1071  3438               	retlw	56
   264  1072  3486               	retlw	134
   265  1073  3435               	retlw	53
   266  1074  34C0               	retlw	192
   267  1075  34D6               	retlw	214
   268  1076  3433               	retlw	51
   269  1077  34CC               	retlw	204
   270  1078  342B               	retlw	43
   271  1079  3432               	retlw	50
   272  107A  3470               	retlw	112
   273  107B  3489               	retlw	137
   274  107C  3430               	retlw	48
   275  107D  34E7               	retlw	231
   276  107E  34DB               	retlw	219
   277  107F  342E               	retlw	46
   278  1080  34E5               	retlw	229
   279  1081  343C               	retlw	60
   280  1082  341E               	retlw	30
   281  1083  3442               	retlw	66
   282  1084  34A2               	retlw	162
   283  1085  340D               	retlw	13
   284  1086                     __end_of__npowers_:	
   285  0008                     _PORTD	set	8
   286  0043                     _RD3	set	67
   287  0042                     _RD2	set	66
   288  0047                     _RD7	set	71
   289  0046                     _RD6	set	70
   290  0045                     _RD5	set	69
   291  0044                     _RD4	set	68
   292  0088                     _TRISD	set	136
   293  1086                     STR_3:	
   294  1086  3420               	retlw	32	;' '
   295  1087  3420               	retlw	32	;' '
   296  1088  3420               	retlw	32	;' '
   297  1089  3420               	retlw	32	;' '
   298  108A  3443               	retlw	67	;'C'
   299  108B  3442               	retlw	66	;'B'
   300  108C  3454               	retlw	84	;'T'
   301  108D  3449               	retlw	73	;'I'
   302  108E  3453               	retlw	83	;'S'
   303  108F  3420               	retlw	32	;' '
   304  1090  3438               	retlw	56	;'8'
   305  1091  3435               	retlw	53	;'5'
   306  1092  3420               	retlw	32	;' '
   307  1093  3420               	retlw	32	;' '
   308  1094  3420               	retlw	32	;' '
   309  1095  3420               	retlw	32	;' '
   310  1096  3400               	retlw	0
   311  1097                     STR_4:	
   312  1097  3420               	retlw	32	;' '
   313  1098  3420               	retlw	32	;' '
   314  1099  3420               	retlw	32	;' '
   315  109A  3420               	retlw	32	;' '
   316  109B  3420               	retlw	32	;' '
   317  109C  3452               	retlw	82	;'R'
   318  109D  3455               	retlw	85	;'U'
   319  109E  344C               	retlw	76	;'L'
   320  109F  3445               	retlw	69	;'E'
   321  10A0  3453               	retlw	83	;'S'
   322  10A1  3420               	retlw	32	;' '
   323  10A2  3420               	retlw	32	;' '
   324  10A3  3420               	retlw	32	;' '
   325  10A4  3420               	retlw	32	;' '
   326  10A5  3420               	retlw	32	;' '
   327  10A6  3400               	retlw	0
   328  10A7                     STR_5:	
   329  10A7  3446               	retlw	70	;'F'
   330  10A8  346C               	retlw	108	;'l'
   331  10A9  346F               	retlw	111	;'o'
   332  10AA  3461               	retlw	97	;'a'
   333  10AB  3474               	retlw	116	;'t'
   334  10AC  3420               	retlw	32	;' '
   335  10AD  343D               	retlw	61	;'='
   336  10AE  3420               	retlw	32	;' '
   337  10AF  3425               	retlw	37	;'%'
   338  10B0  3431               	retlw	49	;'1'
   339  10B1  342E               	retlw	46	;'.'
   340  10B2  3432               	retlw	50	;'2'
   341  10B3  3466               	retlw	102	;'f'
   342  10B4  3400               	retlw	0
   343  10B5                     STR_1:	
   344  10B5  3442               	retlw	66	;'B'
   345  10B6  3469               	retlw	105	;'i'
   346  10B7  3465               	retlw	101	;'e'
   347  10B8  346E               	retlw	110	;'n'
   348  10B9  3476               	retlw	118	;'v'
   349  10BA  3465               	retlw	101	;'e'
   350  10BB  346E               	retlw	110	;'n'
   351  10BC  3469               	retlw	105	;'i'
   352  10BD  3464               	retlw	100	;'d'
   353  10BE  346F               	retlw	111	;'o'
   354  10BF  3420               	retlw	32	;' '
   355  10C0  3461               	retlw	97	;'a'
   356  10C1  3400               	retlw	0
   357  10C2                     STR_6:	
   358  10C2  3449               	retlw	73	;'I'
   359  10C3  346E               	retlw	110	;'n'
   360  10C4  3474               	retlw	116	;'t'
   361  10C5  3465               	retlw	101	;'e'
   362  10C6  3467               	retlw	103	;'g'
   363  10C7  3465               	retlw	101	;'e'
   364  10C8  3472               	retlw	114	;'r'
   365  10C9  3420               	retlw	32	;' '
   366  10CA  343D               	retlw	61	;'='
   367  10CB  3420               	retlw	32	;' '
   368  10CC  3425               	retlw	37	;'%'
   369  10CD  3464               	retlw	100	;'d'
   370  10CE  3400               	retlw	0
   371  10CF                     STR_2:	
   372  10CF  344D               	retlw	77	;'M'
   373  10D0  3469               	retlw	105	;'i'
   374  10D1  3463               	retlw	99	;'c'
   375  10D2  3472               	retlw	114	;'r'
   376  10D3  346F               	retlw	111	;'o'
   377  10D4  3420               	retlw	32	;' '
   378  10D5  343B               	retlw	59	;';'
   379  10D6  3429               	retlw	41	;')'
   380  10D7  3400               	retlw	0
   381                           
   382                           ; #config settings
   383  0000                     
   384                           	psect	cinit
   385  07FC                     start_initialization:	
   386  07FC                     __initialization:	
   387  07FC                     end_of_initialization:	
   388                           ;End of C runtime variable initialization code
   389                           
   390  07FC                     __end_of__initialization:	
   391  07FC  0183               	clrf	3
   392  07FD  160A  118A  2F19   	ljmp	_main	;jump to C main() function
   393                           
   394                           	psect	cstackBANK1
   395  00A0                     __pcstackBANK1:	
   396  00A0                     _sprintf$553:	
   397                           
   398                           ; 3 bytes @ 0x0
   399  00A0                     	ds	3
   400  00A3                     sprintf@ap:	
   401                           
   402                           ; 1 bytes @ 0x3
   403  00A3                     	ds	1
   404  00A4                     sprintf@flag:	
   405                           
   406                           ; 2 bytes @ 0x4
   407  00A4                     	ds	2
   408  00A6                     sprintf@width:	
   409                           
   410                           ; 2 bytes @ 0x6
   411  00A6                     	ds	2
   412  00A8                     sprintf@tmpval:	
   413                           
   414                           ; 4 bytes @ 0x8
   415  00A8                     	ds	4
   416  00AC                     sprintf@val:	
   417                           
   418                           ; 4 bytes @ 0xC
   419  00AC                     	ds	4
   420  00B0                     sprintf@exp:	
   421                           
   422                           ; 2 bytes @ 0x10
   423  00B0                     	ds	2
   424  00B2                     sprintf@fval:	
   425                           
   426                           ; 3 bytes @ 0x12
   427  00B2                     	ds	3
   428  00B5                     sprintf@sp:	
   429                           
   430                           ; 1 bytes @ 0x15
   431  00B5                     	ds	1
   432  00B6                     sprintf@prec:	
   433                           
   434                           ; 2 bytes @ 0x16
   435  00B6                     	ds	2
   436  00B8                     sprintf@c:	
   437                           
   438                           ; 1 bytes @ 0x18
   439  00B8                     	ds	1
   440  00B9                     main@s:	
   441                           
   442                           ; 16 bytes @ 0x19
   443  00B9                     	ds	16
   444  00C9                     main@f:	
   445                           
   446                           ; 3 bytes @ 0x29
   447  00C9                     	ds	3
   448  00CC                     main@a_76:	
   449                           
   450                           ; 2 bytes @ 0x2C
   451  00CC                     	ds	2
   452                           
   453                           	psect	cstackCOMMON
   454  0070                     __pcstackCOMMON:	
   455  0070                     ?_isdigit:	
   456  0070                     ?___ftge:	
   457                           ; 1 bit 
   458                           
   459  0070                     ??_isdigit:	
   460                           ; 1 bit 
   461                           
   462  0070                     ?_lcdPort:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ??_lcdPort:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_lcdCmd:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_lcdInit:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_lcdWriteChar:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_main:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_lcdClear:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?___wmul:	
   484                           ; 2 bytes @ 0x0
   485                           
   486  0070                     ?___awmod:	
   487                           ; 2 bytes @ 0x0
   488                           
   489  0070                     ?___ftpack:	
   490                           ; 2 bytes @ 0x0
   491                           
   492  0070                     ?___ftneg:	
   493                           ; 3 bytes @ 0x0
   494                           
   495  0070                     ?__tdiv_to_l_:	
   496                           ; 3 bytes @ 0x0
   497                           
   498  0070                     ?__div_to_l_:	
   499                           ; 4 bytes @ 0x0
   500                           
   501  0070                     ?___lldiv:	
   502                           ; 4 bytes @ 0x0
   503                           
   504  0070                     lcdPort@a:	
   505                           ; 4 bytes @ 0x0
   506                           
   507  0070                     _isdigit$332:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ___wmul@multiplier:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ___awmod@divisor:	
   514                           ; 2 bytes @ 0x0
   515                           
   516  0070                     __div_to_l_@f1:	
   517                           ; 2 bytes @ 0x0
   518                           
   519  0070                     ___ftpack@arg:	
   520                           ; 3 bytes @ 0x0
   521                           
   522  0070                     __tdiv_to_l_@f1:	
   523                           ; 3 bytes @ 0x0
   524                           
   525  0070                     ___ftge@ff1:	
   526                           ; 3 bytes @ 0x0
   527                           
   528  0070                     ___ftneg@f1:	
   529                           ; 3 bytes @ 0x0
   530                           
   531  0070                     ___lldiv@divisor:	
   532                           ; 3 bytes @ 0x0
   533                           
   534                           
   535                           ; 4 bytes @ 0x0
   536  0070                     	ds	1
   537  0071                     ??_lcdCmd:	
   538  0071                     ??_lcdWriteChar:	
   539                           ; 1 bytes @ 0x1
   540                           
   541  0071                     isdigit@c:	
   542                           ; 1 bytes @ 0x1
   543                           
   544                           
   545                           ; 1 bytes @ 0x1
   546  0071                     	ds	1
   547  0072                     lcdWriteChar@temp:	
   548  0072                     ___wmul@multiplicand:	
   549                           ; 1 bytes @ 0x2
   550                           
   551  0072                     ___awmod@dividend:	
   552                           ; 2 bytes @ 0x2
   553                           
   554                           
   555                           ; 2 bytes @ 0x2
   556  0072                     	ds	1
   557  0073                     ??___ftneg:	
   558  0073                     lcdCmd@a:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0073                     lcdWriteChar@y:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     ___ftpack@exp:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0073                     __div_to_l_@f2:	
   568                           ; 1 bytes @ 0x3
   569                           
   570  0073                     __tdiv_to_l_@f2:	
   571                           ; 3 bytes @ 0x3
   572                           
   573  0073                     ___ftge@ff2:	
   574                           ; 3 bytes @ 0x3
   575                           
   576                           
   577                           ; 3 bytes @ 0x3
   578  0073                     	ds	1
   579  0074                     ??_lcdClear:	
   580  0074                     ?_lcdSetCursor:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ??_lcdInit:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ??___wmul:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     ??___awmod:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     lcdSetCursor@b:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     lcdWriteChar@a:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0074                     ___ftpack@sign:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0074                     ___wmul@product:	
   602                           ; 1 bytes @ 0x4
   603                           
   604  0074                     ___lldiv@dividend:	
   605                           ; 2 bytes @ 0x4
   606                           
   607                           
   608                           ; 4 bytes @ 0x4
   609  0074                     	ds	1
   610  0075                     ??___ftpack:	
   611  0075                     ??_lcdSetCursor:	
   612                           ; 1 bytes @ 0x5
   613                           
   614  0075                     ?_lcdPrint:	
   615                           ; 1 bytes @ 0x5
   616                           
   617  0075                     ___awmod@counter:	
   618                           ; 1 bytes @ 0x5
   619                           
   620  0075                     lcdPrint@a:	
   621                           ; 1 bytes @ 0x5
   622                           
   623                           
   624                           ; 2 bytes @ 0x5
   625  0075                     	ds	1
   626  0076                     ??__tdiv_to_l_:	
   627  0076                     ??__div_to_l_:	
   628                           ; 1 bytes @ 0x6
   629                           
   630  0076                     ??___ftge:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0076                     ___awmod@sign:	
   634                           ; 1 bytes @ 0x6
   635                           
   636                           
   637                           ; 1 bytes @ 0x6
   638  0076                     	ds	1
   639  0077                     ??_lcdPrint:	
   640  0077                     ?___awdiv:	
   641                           ; 1 bytes @ 0x7
   642                           
   643  0077                     lcdSetCursor@a:	
   644                           ; 2 bytes @ 0x7
   645                           
   646  0077                     ___awdiv@divisor:	
   647                           ; 1 bytes @ 0x7
   648                           
   649                           
   650                           ; 2 bytes @ 0x7
   651  0077                     	ds	1
   652  0078                     ??___lldiv:	
   653  0078                     ?___lltoft:	
   654                           ; 1 bytes @ 0x8
   655                           
   656  0078                     lcdSetCursor@z:	
   657                           ; 3 bytes @ 0x8
   658                           
   659  0078                     ___lltoft@c:	
   660                           ; 1 bytes @ 0x8
   661                           
   662                           
   663                           ; 4 bytes @ 0x8
   664  0078                     	ds	1
   665  0079                     lcdSetCursor@y:	
   666  0079                     ___awdiv@dividend:	
   667                           ; 1 bytes @ 0x9
   668                           
   669  0079                     ___lldiv@quotient:	
   670                           ; 2 bytes @ 0x9
   671                           
   672                           
   673                           ; 4 bytes @ 0x9
   674  0079                     	ds	1
   675  007A                     lcdSetCursor@temp:	
   676  007A                     lcdPrint@i:	
   677                           ; 1 bytes @ 0xA
   678                           
   679                           
   680                           ; 2 bytes @ 0xA
   681  007A                     	ds	1
   682  007B                     ??___awdiv:	
   683                           
   684                           ; 1 bytes @ 0xB
   685  007B                     	ds	1
   686  007C                     ??___bmul:	
   687  007C                     ??___lltoft:	
   688                           ; 1 bytes @ 0xC
   689                           
   690                           
   691                           ; 1 bytes @ 0xC
   692  007C                     	ds	1
   693  007D                     ___lldiv@counter:	
   694  007D                     ___lltoft@exp:	
   695                           ; 1 bytes @ 0xD
   696                           
   697                           
   698                           ; 1 bytes @ 0xD
   699  007D                     	ds	1
   700  007E                     ??___ftsub:	
   701                           
   702                           	psect	cstackBANK0
   703  0020                     __pcstackBANK0:	
   704                           ; 1 bytes @ 0xE
   705                           
   706  0020                     ?___llmod:	
   707  0020                     ___awdiv@counter:	
   708                           ; 4 bytes @ 0x0
   709                           
   710  0020                     __div_to_l_@quot:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0020                     __tdiv_to_l_@quot:	
   714                           ; 4 bytes @ 0x0
   715                           
   716  0020                     ___llmod@divisor:	
   717                           ; 4 bytes @ 0x0
   718                           
   719                           
   720                           ; 4 bytes @ 0x0
   721  0020                     	ds	1
   722  0021                     ___awdiv@sign:	
   723                           
   724                           ; 1 bytes @ 0x1
   725  0021                     	ds	1
   726  0022                     ___awdiv@quotient:	
   727                           
   728                           ; 2 bytes @ 0x2
   729  0022                     	ds	2
   730  0024                     ?___bmul:	
   731  0024                     ___bmul@multiplicand:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0024                     __div_to_l_@cntr:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0024                     __tdiv_to_l_@cntr:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  0024                     ___llmod@dividend:	
   741                           ; 1 bytes @ 0x4
   742                           
   743                           
   744                           ; 4 bytes @ 0x4
   745  0024                     	ds	1
   746  0025                     ___bmul@product:	
   747  0025                     __div_to_l_@exp1:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  0025                     __tdiv_to_l_@exp1:	
   751                           ; 1 bytes @ 0x5
   752                           
   753                           
   754                           ; 1 bytes @ 0x5
   755  0025                     	ds	1
   756  0026                     ___bmul@multiplier:	
   757                           
   758                           ; 1 bytes @ 0x6
   759  0026                     	ds	1
   760  0027                     ?___ftmul:	
   761  0027                     ___ftmul@f1:	
   762                           ; 3 bytes @ 0x7
   763                           
   764                           
   765                           ; 3 bytes @ 0x7
   766  0027                     	ds	1
   767  0028                     ??___llmod:	
   768                           
   769                           ; 1 bytes @ 0x8
   770  0028                     	ds	1
   771  0029                     ___llmod@counter:	
   772                           
   773                           ; 1 bytes @ 0x9
   774  0029                     	ds	1
   775  002A                     ___ftmul@f2:	
   776                           
   777                           ; 3 bytes @ 0xA
   778  002A                     	ds	3
   779  002D                     ??___ftmul:	
   780                           
   781                           ; 1 bytes @ 0xD
   782  002D                     	ds	4
   783  0031                     ___ftmul@exp:	
   784                           
   785                           ; 1 bytes @ 0x11
   786  0031                     	ds	1
   787  0032                     ___ftmul@f3_as_product:	
   788                           
   789                           ; 3 bytes @ 0x12
   790  0032                     	ds	3
   791  0035                     ___ftmul@cntr:	
   792                           
   793                           ; 1 bytes @ 0x15
   794  0035                     	ds	1
   795  0036                     ___ftmul@sign:	
   796                           
   797                           ; 1 bytes @ 0x16
   798  0036                     	ds	1
   799  0037                     ?_fround:	
   800  0037                     ?_scale:	
   801                           ; 3 bytes @ 0x17
   802                           
   803                           
   804                           ; 3 bytes @ 0x17
   805  0037                     	ds	3
   806  003A                     ??_fround:	
   807  003A                     ??_scale:	
   808                           ; 1 bytes @ 0x1A
   809                           
   810                           
   811                           ; 1 bytes @ 0x1A
   812  003A                     	ds	2
   813  003C                     _scale$552:	
   814                           
   815                           ; 3 bytes @ 0x1C
   816  003C                     	ds	3
   817  003F                     scale@scl:	
   818                           
   819                           ; 1 bytes @ 0x1F
   820  003F                     	ds	1
   821  0040                     ?___fttol:	
   822  0040                     ___fttol@f1:	
   823                           ; 4 bytes @ 0x20
   824                           
   825  0040                     _fround$551:	
   826                           ; 3 bytes @ 0x20
   827                           
   828                           
   829                           ; 3 bytes @ 0x20
   830  0040                     	ds	3
   831  0043                     _fround$550:	
   832                           
   833                           ; 3 bytes @ 0x23
   834  0043                     	ds	1
   835  0044                     ??___fttol:	
   836                           
   837                           ; 1 bytes @ 0x24
   838  0044                     	ds	2
   839  0046                     fround@prec:	
   840                           
   841                           ; 1 bytes @ 0x26
   842  0046                     	ds	1
   843  0047                     ?___ftadd:	
   844  0047                     ___ftadd@f1:	
   845                           ; 3 bytes @ 0x27
   846                           
   847                           
   848                           ; 3 bytes @ 0x27
   849  0047                     	ds	1
   850  0048                     ___fttol@sign1:	
   851                           
   852                           ; 1 bytes @ 0x28
   853  0048                     	ds	1
   854  0049                     ___fttol@lval:	
   855                           
   856                           ; 4 bytes @ 0x29
   857  0049                     	ds	1
   858  004A                     ___ftadd@f2:	
   859                           
   860                           ; 3 bytes @ 0x2A
   861  004A                     	ds	3
   862  004D                     ??___ftadd:	
   863  004D                     ___fttol@exp1:	
   864                           ; 1 bytes @ 0x2D
   865                           
   866                           
   867                           ; 1 bytes @ 0x2D
   868  004D                     	ds	4
   869  0051                     ___ftadd@sign:	
   870                           
   871                           ; 1 bytes @ 0x31
   872  0051                     	ds	1
   873  0052                     ___ftadd@exp2:	
   874                           
   875                           ; 1 bytes @ 0x32
   876  0052                     	ds	1
   877  0053                     ___ftadd@exp1:	
   878                           
   879                           ; 1 bytes @ 0x33
   880  0053                     	ds	1
   881  0054                     ?___ftsub:	
   882  0054                     ___ftsub@f2:	
   883                           ; 3 bytes @ 0x34
   884                           
   885                           
   886                           ; 3 bytes @ 0x34
   887  0054                     	ds	3
   888  0057                     ___ftsub@f1:	
   889                           
   890                           ; 3 bytes @ 0x37
   891  0057                     	ds	3
   892  005A                     ?_sprintf:	
   893  005A                     sprintf@f:	
   894                           ; 2 bytes @ 0x3A
   895                           
   896                           
   897                           ; 1 bytes @ 0x3A
   898  005A                     	ds	4
   899  005E                     ??_sprintf:	
   900                           
   901                           ; 1 bytes @ 0x3E
   902  005E                     	ds	6
   903  0064                     ??_main:	
   904                           
   905                           ; 1 bytes @ 0x44
   906  0064                     	ds	3
   907                           
   908                           	psect	maintext
   909  1719                     __pmaintext:	
   910 ;;
   911 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   912 ;;
   913 ;; *************** function _main *****************
   914 ;; Defined at:
   915 ;;		line 19 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  s              16   25[BANK1 ] unsigned char [16]
   920 ;;  f               3   41[BANK1 ] float 
   921 ;;  a               2   44[BANK1 ] int 
   922 ;;  a               2    0        unsigned int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : B00/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         0       0      21       0       0
   934 ;;      Temps:          0       3       0       0       0
   935 ;;      Totals:         0       3      21       0       0
   936 ;;Total ram usage:       24 bytes
   937 ;; Hardware stack levels required when called:    4
   938 ;; This function calls:
   939 ;;		_lcdClear
   940 ;;		_lcdInit
   941 ;;		_lcdPrint
   942 ;;		_lcdSetCursor
   943 ;;		_sprintf
   944 ;; This function is called by:
   945 ;;		Startup code after reset
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _main
   951  1719                     _main:	
   952                           
   953                           ;main.c: 20: unsigned int a;
   954                           ;main.c: 23: lcdInit();
   955                           
   956                           ;incstack = 0
   957                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   958  1719  160A  118A  2428  160A  118A  	fcall	_lcdInit
   959  171E                     l60:	
   960                           ;main.c: 24: while (1) {
   961                           
   962                           
   963                           ;main.c: 25: lcdClear();
   964  171E  160A  118A  2156  160A  118A  	fcall	_lcdClear
   965                           
   966                           ;main.c: 26: lcdSetCursor(1, 1);
   967  1723  01F4               	clrf	lcdSetCursor@b
   968  1724  0AF4               	incf	lcdSetCursor@b,f
   969  1725  3001               	movlw	1
   970  1726  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
   971                           
   972                           ;main.c: 27: lcdPrint("Bienvenido a");
   973  172B  30A6               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   974  172C  00F5               	movwf	lcdPrint@a
   975  172D  3080               	movlw	128
   976  172E  00F6               	movwf	lcdPrint@a+1
   977  172F  120A  158A  2005  160A  118A  	fcall	_lcdPrint
   978                           
   979                           ;main.c: 28: lcdSetCursor(2, 1);
   980  1734  01F4               	clrf	lcdSetCursor@b
   981  1735  0AF4               	incf	lcdSetCursor@b,f
   982  1736  3002               	movlw	2
   983  1737  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
   984                           
   985                           ;main.c: 29: lcdPrint("Micro ;)");
   986  173C  30C0               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   987  173D  00F5               	movwf	lcdPrint@a
   988  173E  3080               	movlw	128
   989  173F  00F6               	movwf	lcdPrint@a+1
   990  1740  120A  158A  2005  160A  118A  	fcall	_lcdPrint
   991                           
   992                           ;main.c: 30: _delay((unsigned long)((2000)*(4000000/4000.0)));
   993  1745  300B               	movlw	11
   994  1746  1283               	bcf	3,5	;RP0=0, select bank0
   995  1747  1303               	bcf	3,6	;RP1=0, select bank0
   996  1748  00E6               	movwf	??_main+2
   997  1749  3026               	movlw	38
   998  174A  00E5               	movwf	??_main+1
   999  174B  305D               	movlw	93
  1000  174C  00E4               	movwf	??_main
  1001  174D                     u4197:	
  1002  174D  0BE4               	decfsz	??_main,f
  1003  174E  2F4D               	goto	u4197
  1004  174F  0BE5               	decfsz	??_main+1,f
  1005  1750  2F4D               	goto	u4197
  1006  1751  0BE6               	decfsz	??_main+2,f
  1007  1752  2F4D               	goto	u4197
  1008                           
  1009                           ;main.c: 31: lcdClear();
  1010  1753  160A  118A  2156  160A  118A  	fcall	_lcdClear
  1011                           
  1012                           ;main.c: 32: lcdSetCursor(1, 1);
  1013  1758  01F4               	clrf	lcdSetCursor@b
  1014  1759  0AF4               	incf	lcdSetCursor@b,f
  1015  175A  3001               	movlw	1
  1016  175B  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
  1017                           
  1018                           ;main.c: 33: lcdPrint("    CBTIS 85    ");
  1019  1760  3077               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1020  1761  00F5               	movwf	lcdPrint@a
  1021  1762  3080               	movlw	128
  1022  1763  00F6               	movwf	lcdPrint@a+1
  1023  1764  120A  158A  2005  160A  118A  	fcall	_lcdPrint
  1024                           
  1025                           ;main.c: 34: lcdSetCursor(2, 1);
  1026  1769  01F4               	clrf	lcdSetCursor@b
  1027  176A  0AF4               	incf	lcdSetCursor@b,f
  1028  176B  3002               	movlw	2
  1029  176C  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
  1030                           
  1031                           ;main.c: 35: lcdPrint("     RULES     ");
  1032  1771  3088               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1033  1772  00F5               	movwf	lcdPrint@a
  1034  1773  3080               	movlw	128
  1035  1774  00F6               	movwf	lcdPrint@a+1
  1036  1775  120A  158A  2005  160A  118A  	fcall	_lcdPrint
  1037                           
  1038                           ;main.c: 36: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1039  177A  300B               	movlw	11
  1040  177B  1283               	bcf	3,5	;RP0=0, select bank0
  1041  177C  1303               	bcf	3,6	;RP1=0, select bank0
  1042  177D  00E6               	movwf	??_main+2
  1043  177E  3026               	movlw	38
  1044  177F  00E5               	movwf	??_main+1
  1045  1780  305D               	movlw	93
  1046  1781  00E4               	movwf	??_main
  1047  1782                     u4207:	
  1048  1782  0BE4               	decfsz	??_main,f
  1049  1783  2F82               	goto	u4207
  1050  1784  0BE5               	decfsz	??_main+1,f
  1051  1785  2F82               	goto	u4207
  1052  1786  0BE6               	decfsz	??_main+2,f
  1053  1787  2F82               	goto	u4207
  1054                           
  1055                           ;main.c: 38: lcdClear();
  1056  1788  160A  118A  2156  160A  118A  	fcall	_lcdClear
  1057                           
  1058                           ;main.c: 39: float f = 1.414;
  1059  178D  30FE               	movlw	254
  1060  178E  1683               	bsf	3,5	;RP0=1, select bank1
  1061  178F  1303               	bcf	3,6	;RP1=0, select bank1
  1062  1790  00C9               	movwf	main@f^(0+128)
  1063  1791  30B4               	movlw	180
  1064  1792  00CA               	movwf	(main@f+1)^(0+128)
  1065  1793  303F               	movlw	63
  1066  1794  00CB               	movwf	(main@f+2)^(0+128)
  1067                           
  1068                           ;main.c: 40: int a = 56;
  1069  1795  3038               	movlw	56
  1070  1796  00CC               	movwf	main@a_76^(0+128)
  1071  1797  3000               	movlw	0
  1072  1798  00CD               	movwf	(main@a_76^(0+128)+1)
  1073                           
  1074                           ;main.c: 41: char s[16];
  1075                           ;main.c: 42: sprintf(s, "Float = %1.2f", f);
  1076  1799  3098               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1077  179A  1283               	bcf	3,5	;RP0=0, select bank0
  1078  179B  1303               	bcf	3,6	;RP1=0, select bank0
  1079  179C  00E4               	movwf	??_main
  1080  179D  0864               	movf	??_main,w
  1081  179E  00DA               	movwf	sprintf@f
  1082  179F  1683               	bsf	3,5	;RP0=1, select bank1
  1083  17A0  1303               	bcf	3,6	;RP1=0, select bank1
  1084  17A1  0849               	movf	main@f^(0+128),w
  1085  17A2  1283               	bcf	3,5	;RP0=0, select bank0
  1086  17A3  1303               	bcf	3,6	;RP1=0, select bank0
  1087  17A4  00DB               	movwf	?_sprintf+1
  1088  17A5  1683               	bsf	3,5	;RP0=1, select bank1
  1089  17A6  1303               	bcf	3,6	;RP1=0, select bank1
  1090  17A7  084A               	movf	(main@f+1)^(0+128),w
  1091  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  1092  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  1093  17AA  00DC               	movwf	?_sprintf+2
  1094  17AB  1683               	bsf	3,5	;RP0=1, select bank1
  1095  17AC  1303               	bcf	3,6	;RP1=0, select bank1
  1096  17AD  084B               	movf	(main@f+2)^(0+128),w
  1097  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  1098  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  1099  17B0  00DD               	movwf	?_sprintf+3
  1100  17B1  30B9               	movlw	(low (main@s| 0))& (0+255)
  1101  17B2  120A  118A  2037  160A  118A  	fcall	_sprintf
  1102                           
  1103                           ;main.c: 43: lcdSetCursor(1, 1);
  1104  17B7  01F4               	clrf	lcdSetCursor@b
  1105  17B8  0AF4               	incf	lcdSetCursor@b,f
  1106  17B9  3001               	movlw	1
  1107  17BA  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
  1108                           
  1109                           ;main.c: 44: lcdPrint(s);
  1110  17BF  30B9               	movlw	(low (main@s| 0))& (0+255)
  1111  17C0  00F5               	movwf	lcdPrint@a
  1112  17C1  3000               	movlw	0
  1113  17C2  00F6               	movwf	lcdPrint@a+1
  1114  17C3  120A  158A  2005  160A  118A  	fcall	_lcdPrint
  1115                           
  1116                           ;main.c: 45: sprintf(s, "Integer = %d", a);
  1117  17C8  30B3               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1118  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  1119  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  1120  17CB  00E4               	movwf	??_main
  1121  17CC  0864               	movf	??_main,w
  1122  17CD  00DA               	movwf	sprintf@f
  1123  17CE  1683               	bsf	3,5	;RP0=1, select bank1
  1124  17CF  1303               	bcf	3,6	;RP1=0, select bank1
  1125  17D0  084D               	movf	(main@a_76+1)^(0+128),w
  1126  17D1  1283               	bcf	3,5	;RP0=0, select bank0
  1127  17D2  1303               	bcf	3,6	;RP1=0, select bank0
  1128  17D3  00DC               	movwf	?_sprintf+2
  1129  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  1130  17D5  1303               	bcf	3,6	;RP1=0, select bank1
  1131  17D6  084C               	movf	main@a_76^(0+128),w
  1132  17D7  1283               	bcf	3,5	;RP0=0, select bank0
  1133  17D8  1303               	bcf	3,6	;RP1=0, select bank0
  1134  17D9  00DB               	movwf	?_sprintf+1
  1135  17DA  30B9               	movlw	(low (main@s| 0))& (0+255)
  1136  17DB  120A  118A  2037  160A  118A  	fcall	_sprintf
  1137                           
  1138                           ;main.c: 46: lcdSetCursor(2, 1);
  1139  17E0  01F4               	clrf	lcdSetCursor@b
  1140  17E1  0AF4               	incf	lcdSetCursor@b,f
  1141  17E2  3002               	movlw	2
  1142  17E3  160A  118A  222F  160A  118A  	fcall	_lcdSetCursor
  1143                           
  1144                           ;main.c: 47: lcdPrint(s);
  1145  17E8  30B9               	movlw	(low (main@s| 0))& (0+255)
  1146  17E9  00F5               	movwf	lcdPrint@a
  1147  17EA  3000               	movlw	0
  1148  17EB  00F6               	movwf	lcdPrint@a+1
  1149  17EC  120A  158A  2005  160A  118A  	fcall	_lcdPrint
  1150                           
  1151                           ;main.c: 49: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1152  17F1  300B               	movlw	11
  1153  17F2  1283               	bcf	3,5	;RP0=0, select bank0
  1154  17F3  1303               	bcf	3,6	;RP1=0, select bank0
  1155  17F4  00E6               	movwf	??_main+2
  1156  17F5  3026               	movlw	38
  1157  17F6  00E5               	movwf	??_main+1
  1158  17F7  305D               	movlw	93
  1159  17F8  00E4               	movwf	??_main
  1160  17F9                     u4217:	
  1161  17F9  0BE4               	decfsz	??_main,f
  1162  17FA  2FF9               	goto	u4217
  1163  17FB  0BE5               	decfsz	??_main+1,f
  1164  17FC  2FF9               	goto	u4217
  1165  17FD  0BE6               	decfsz	??_main+2,f
  1166  17FE  2FF9               	goto	u4217
  1167  17FF  2F1E               	goto	l60
  1168  1800                     __end_of_main:	
  1169                           
  1170                           	psect	text1
  1171  0037                     __ptext1:	
  1172 ;; *************** function _sprintf *****************
  1173 ;; Defined at:
  1174 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  sp              1    wreg     PTR unsigned char 
  1177 ;;		 -> main@s(16), 
  1178 ;;  f               1   58[BANK0 ] PTR const unsigned char 
  1179 ;;		 -> STR_6(13), STR_5(14), 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  1182 ;;		 -> main@s(16), 
  1183 ;;  val             4   12[BANK1 ] unsigned long 
  1184 ;;  tmpval          4    8[BANK1 ] struct .
  1185 ;;  fval            3   18[BANK1 ] struct .
  1186 ;;  prec            2   22[BANK1 ] int 
  1187 ;;  exp             2   16[BANK1 ] int 
  1188 ;;  width           2    6[BANK1 ] int 
  1189 ;;  flag            2    4[BANK1 ] unsigned short 
  1190 ;;  cp              2    0        PTR const unsigned char 
  1191 ;;  len             2    0        unsigned int 
  1192 ;;  c               1   24[BANK1 ] char 
  1193 ;;  ap              1    3[BANK1 ] PTR void [1]
  1194 ;;		 -> ?_sprintf(2), 
  1195 ;;  d               1    0        unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2   58[BANK0 ] int 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1205 ;;      Params:         0       4       0       0       0
  1206 ;;      Locals:         0       0      25       0       0
  1207 ;;      Temps:          0       6       0       0       0
  1208 ;;      Totals:         0      10      25       0       0
  1209 ;;Total ram usage:       35 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    3
  1212 ;; This function calls:
  1213 ;;		___awdiv
  1214 ;;		___ftadd
  1215 ;;		___ftge
  1216 ;;		___ftmul
  1217 ;;		___ftneg
  1218 ;;		___ftsub
  1219 ;;		___fttol
  1220 ;;		___lldiv
  1221 ;;		___llmod
  1222 ;;		___lltoft
  1223 ;;		___wmul
  1224 ;;		__div_to_l_
  1225 ;;		__tdiv_to_l_
  1226 ;;		_fround
  1227 ;;		_isdigit
  1228 ;;		_scale
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function _sprintf
  1236  0037                     _sprintf:	
  1237                           
  1238                           ;incstack = 0
  1239                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1240                           ;sprintf@sp stored from wreg
  1241  0037  1683               	bsf	3,5	;RP0=1, select bank1
  1242  0038  1303               	bcf	3,6	;RP1=0, select bank1
  1243  0039  00B5               	movwf	sprintf@sp^(0+128)
  1244                           
  1245                           ;doprnt.c: 494: va_list ap;
  1246                           ;doprnt.c: 499: signed char c;
  1247                           ;doprnt.c: 501: int width;
  1248                           ;doprnt.c: 504: int prec;
  1249                           ;doprnt.c: 508: unsigned short flag;
  1250                           ;doprnt.c: 515: char d;
  1251                           ;doprnt.c: 516: double fval;
  1252                           ;doprnt.c: 517: int exp;
  1253                           ;doprnt.c: 523: union {
  1254                           ;doprnt.c: 524: unsigned long vd;
  1255                           ;doprnt.c: 525: double integ;
  1256                           ;doprnt.c: 526: } tmpval;
  1257                           ;doprnt.c: 528: unsigned long val;
  1258                           ;doprnt.c: 529: unsigned len;
  1259                           ;doprnt.c: 530: const char * cp;
  1260                           ;doprnt.c: 533: *ap = __va_start();
  1261  003A  305B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1262  003B  1283               	bcf	3,5	;RP0=0, select bank0
  1263  003C  1303               	bcf	3,6	;RP1=0, select bank0
  1264  003D  00DE               	movwf	??_sprintf
  1265  003E  085E               	movf	??_sprintf,w
  1266  003F  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0040  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0041  00A3               	movwf	sprintf@ap^(0+128)
  1269  0042                     l2639:	
  1270                           ;doprnt.c: 536: while(c = *f++) {
  1271                           
  1272  0042  3001               	movlw	1
  1273  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1274  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1275  0045  07DA               	addwf	sprintf@f,f
  1276  0046  30FF               	movlw	-1
  1277  0047  075A               	addwf	sprintf@f,w
  1278  0048  0084               	movwf	4
  1279  0049  160A  118A  200A  120A  118A  	fcall	stringdir
  1280  004E  00DE               	movwf	??_sprintf
  1281  004F  085E               	movf	??_sprintf,w
  1282  0050  1683               	bsf	3,5	;RP0=1, select bank1
  1283  0051  1303               	bcf	3,6	;RP1=0, select bank1
  1284  0052  00B8               	movwf	sprintf@c^(0+128)
  1285  0053  0838               	movf	sprintf@c^(0+128),w
  1286  0054  1903               	btfsc	3,2
  1287  0055  2FF9               	goto	L10
  1288                           
  1289                           ;doprnt.c: 538: if(c != '%')
  1290  0056  3025               	movlw	37
  1291  0057  0638               	xorwf	sprintf@c^(0+128),w
  1292  0058  1903               	btfsc	3,2
  1293  0059  286E               	goto	l2371
  1294                           
  1295                           ;doprnt.c: 540: {
  1296                           ;doprnt.c: 541: ((*sp++ = (c)));
  1297  005A  0838               	movf	sprintf@c^(0+128),w
  1298  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1299  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1300  005D  00DE               	movwf	??_sprintf
  1301  005E  1683               	bsf	3,5	;RP0=1, select bank1
  1302  005F  1303               	bcf	3,6	;RP1=0, select bank1
  1303  0060  0835               	movf	sprintf@sp^(0+128),w
  1304  0061  0084               	movwf	4
  1305  0062  1283               	bcf	3,5	;RP0=0, select bank0
  1306  0063  1303               	bcf	3,6	;RP1=0, select bank0
  1307  0064  085E               	movf	??_sprintf,w
  1308  0065  1383               	bcf	3,7	;select IRP bank0
  1309  0066  0080               	movwf	0
  1310  0067  3001               	movlw	1
  1311  0068  00DE               	movwf	??_sprintf
  1312  0069  085E               	movf	??_sprintf,w
  1313  006A  1683               	bsf	3,5	;RP0=1, select bank1
  1314  006B  1303               	bcf	3,6	;RP1=0, select bank1
  1315  006C  07B5               	addwf	sprintf@sp^(0+128),f
  1316                           
  1317                           ;doprnt.c: 542: continue;
  1318  006D  2842               	goto	l2639
  1319  006E                     l2371:	
  1320                           
  1321                           ;doprnt.c: 543: }
  1322                           ;doprnt.c: 546: width = 0;
  1323  006E  01A6               	clrf	sprintf@width^(0+128)
  1324  006F  01A7               	clrf	(sprintf@width+1)^(0+128)
  1325                           
  1326                           ;doprnt.c: 548: flag = 0;
  1327  0070  01A4               	clrf	sprintf@flag^(0+128)
  1328  0071  01A5               	clrf	(sprintf@flag+1)^(0+128)
  1329                           
  1330                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1331  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0074  085A               	movf	sprintf@f,w
  1334  0075  0084               	movwf	4
  1335  0076  160A  118A  200A  120A  118A  	fcall	stringdir
  1336  007B  160A  118A  2161  120A  118A  	fcall	_isdigit
  1337  0080  1C03               	btfss	3,0
  1338  0081  28CA               	goto	l2385
  1339                           
  1340                           ;doprnt.c: 598: width = 0;
  1341  0082  1683               	bsf	3,5	;RP0=1, select bank1
  1342  0083  1303               	bcf	3,6	;RP1=0, select bank1
  1343  0084  01A6               	clrf	sprintf@width^(0+128)
  1344  0085  01A7               	clrf	(sprintf@width+1)^(0+128)
  1345  0086                     l2377:	
  1346                           ;doprnt.c: 599: do {
  1347                           
  1348                           
  1349                           ;doprnt.c: 600: width *= 10;
  1350  0086  300A               	movlw	10
  1351  0087  00F0               	movwf	___wmul@multiplier
  1352  0088  3000               	movlw	0
  1353  0089  00F1               	movwf	___wmul@multiplier+1
  1354  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1355  008B  1303               	bcf	3,6	;RP1=0, select bank1
  1356  008C  0827               	movf	(sprintf@width+1)^(0+128),w
  1357  008D  00F3               	movwf	___wmul@multiplicand+1
  1358  008E  0826               	movf	sprintf@width^(0+128),w
  1359  008F  00F2               	movwf	___wmul@multiplicand
  1360  0090  160A  118A  21D7  120A  118A  	fcall	___wmul
  1361  0095  0871               	movf	?___wmul+1,w
  1362  0096  1683               	bsf	3,5	;RP0=1, select bank1
  1363  0097  1303               	bcf	3,6	;RP1=0, select bank1
  1364  0098  00A7               	movwf	(sprintf@width+1)^(0+128)
  1365  0099  0870               	movf	?___wmul,w
  1366  009A  00A6               	movwf	sprintf@width^(0+128)
  1367                           
  1368                           ;doprnt.c: 601: width += *f++ - '0';
  1369  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1370  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1371  009D  085A               	movf	sprintf@f,w
  1372  009E  0084               	movwf	4
  1373  009F  160A  118A  200A  120A  118A  	fcall	stringdir
  1374  00A4  3ED0               	addlw	208
  1375  00A5  00DE               	movwf	??_sprintf
  1376  00A6  30FF               	movlw	255
  1377  00A7  1803               	skipnc
  1378  00A8  3000               	movlw	0
  1379  00A9  00DF               	movwf	??_sprintf+1
  1380  00AA  085E               	movf	??_sprintf,w
  1381  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  1382  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  1383  00AD  07A6               	addwf	sprintf@width^(0+128),f
  1384  00AE  1803               	skipnc
  1385  00AF  0AA7               	incf	(sprintf@width+1)^(0+128),f
  1386  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1387  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1388  00B2  085F               	movf	??_sprintf+1,w
  1389  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  1390  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  1391  00B5  07A7               	addwf	(sprintf@width+1)^(0+128),f
  1392  00B6  3001               	movlw	1
  1393  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1394  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1395  00B9  00DE               	movwf	??_sprintf
  1396  00BA  085E               	movf	??_sprintf,w
  1397  00BB  07DA               	addwf	sprintf@f,f
  1398                           
  1399                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1400  00BC  085A               	movf	sprintf@f,w
  1401  00BD  0084               	movwf	4
  1402  00BE  160A  118A  200A  120A  118A  	fcall	stringdir
  1403  00C3  160A  118A  2161  120A  118A  	fcall	_isdigit
  1404  00C8  1803               	btfsc	3,0
  1405  00C9  2886               	goto	l2377
  1406  00CA                     l2385:	
  1407                           
  1408                           ;doprnt.c: 608: }
  1409                           ;doprnt.c: 611: if(*f == '.') {
  1410  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1411  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1412  00CC  085A               	movf	sprintf@f,w
  1413  00CD  0084               	movwf	4
  1414  00CE  160A  118A  200A  120A  118A  	fcall	stringdir
  1415  00D3  3A2E               	xorlw	46
  1416  00D4  1D03               	skipz
  1417  00D5  2926               	goto	l2399
  1418                           
  1419                           ;doprnt.c: 612: flag |= 0x4000;
  1420  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1421  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1422  00D8  1725               	bsf	(sprintf@flag^(0+128)+1),6
  1423                           
  1424                           ;doprnt.c: 613: f++;
  1425  00D9  3001               	movlw	1
  1426  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1427  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1428  00DC  00DE               	movwf	??_sprintf
  1429  00DD  085E               	movf	??_sprintf,w
  1430  00DE  07DA               	addwf	sprintf@f,f
  1431                           
  1432                           ;doprnt.c: 620: {
  1433                           ;doprnt.c: 621: prec = 0;
  1434  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1435  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1436  00E1  01B6               	clrf	sprintf@prec^(0+128)
  1437  00E2  01B7               	clrf	(sprintf@prec+1)^(0+128)
  1438  00E3                     l2397:	
  1439                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1440                           
  1441  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1442  00E4  085A               	movf	sprintf@f,w
  1443  00E5  0084               	movwf	4
  1444  00E6  160A  118A  200A  120A  118A  	fcall	stringdir
  1445  00EB  160A  118A  2161  120A  118A  	fcall	_isdigit
  1446  00F0  1C03               	btfss	3,0
  1447  00F1  292E               	goto	l2405
  1448                           
  1449                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1450  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1451  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1452  00F4  0837               	movf	(sprintf@prec+1)^(0+128),w
  1453  00F5  00F1               	movwf	___wmul@multiplier+1
  1454  00F6  0836               	movf	sprintf@prec^(0+128),w
  1455  00F7  00F0               	movwf	___wmul@multiplier
  1456  00F8  300A               	movlw	10
  1457  00F9  00F2               	movwf	___wmul@multiplicand
  1458  00FA  3000               	movlw	0
  1459  00FB  00F3               	movwf	___wmul@multiplicand+1
  1460  00FC  160A  118A  21D7  120A  118A  	fcall	___wmul
  1461  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0103  085A               	movf	sprintf@f,w
  1464  0104  0084               	movwf	4
  1465  0105  160A  118A  200A  120A  118A  	fcall	stringdir
  1466  010A  0770               	addwf	?___wmul,w
  1467  010B  00DE               	movwf	??_sprintf
  1468  010C  3000               	movlw	0
  1469  010D  1803               	skipnc
  1470  010E  3001               	movlw	1
  1471  010F  0771               	addwf	?___wmul+1,w
  1472  0110  00DF               	movwf	??_sprintf+1
  1473  0111  085E               	movf	??_sprintf,w
  1474  0112  3ED0               	addlw	208
  1475  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1476  0114  1303               	bcf	3,6	;RP1=0, select bank1
  1477  0115  00B6               	movwf	sprintf@prec^(0+128)
  1478  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0118  085F               	movf	??_sprintf+1,w
  1481  0119  1803               	skipnc
  1482  011A  3E01               	addlw	1
  1483  011B  3EFF               	addlw	255
  1484  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1485  011D  1303               	bcf	3,6	;RP1=0, select bank1
  1486  011E  00B7               	movwf	(sprintf@prec+1)^(0+128)
  1487  011F  3001               	movlw	1
  1488  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0122  00DE               	movwf	??_sprintf
  1491  0123  085E               	movf	??_sprintf,w
  1492  0124  07DA               	addwf	sprintf@f,f
  1493  0125  28E3               	goto	l2397
  1494  0126                     l2399:	
  1495                           ;doprnt.c: 624: }
  1496                           ;doprnt.c: 625: } else {
  1497                           
  1498                           
  1499                           ;doprnt.c: 626: prec = 0;
  1500  0126  1683               	bsf	3,5	;RP0=1, select bank1
  1501  0127  1303               	bcf	3,6	;RP1=0, select bank1
  1502  0128  01B6               	clrf	sprintf@prec^(0+128)
  1503  0129  01B7               	clrf	(sprintf@prec+1)^(0+128)
  1504                           
  1505                           ;doprnt.c: 628: flag |= 0x1000;
  1506  012A  1625               	bsf	(sprintf@flag^(0+128)+1),4
  1507                           
  1508                           ;doprnt.c: 630: }
  1509                           ;doprnt.c: 635: switch(c = *f++) {
  1510  012B  292E               	goto	l2405
  1511  012C                     l112:	
  1512                           ;doprnt.c: 662: case 'f':
  1513                           
  1514                           ;doprnt.c: 638: goto alldone;
  1515                           
  1516                           ;doprnt.c: 637: case 0:
  1517                           
  1518                           
  1519                           ;doprnt.c: 663: flag |= 0x400;
  1520  012C  1525               	bsf	(sprintf@flag^(0+128)+1),2
  1521                           
  1522                           ;doprnt.c: 698: case 'i':
  1523                           ;doprnt.c: 699: break;
  1524                           
  1525                           ;doprnt.c: 697: case 'd':
  1526                           
  1527                           ;doprnt.c: 664: break;
  1528  012D  294A               	goto	l2407
  1529  012E                     l2405:	
  1530                           ;doprnt.c: 822: }
  1531                           
  1532                           ;doprnt.c: 813: continue;
  1533                           
  1534                           ;doprnt.c: 802: default:
  1535                           
  1536  012E  3001               	movlw	1
  1537  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1539  0131  07DA               	addwf	sprintf@f,f
  1540  0132  30FF               	movlw	-1
  1541  0133  075A               	addwf	sprintf@f,w
  1542  0134  0084               	movwf	4
  1543  0135  160A  118A  200A  120A  118A  	fcall	stringdir
  1544  013A  1683               	bsf	3,5	;RP0=1, select bank1
  1545  013B  1303               	bcf	3,6	;RP1=0, select bank1
  1546  013C  00B8               	movwf	sprintf@c^(0+128)
  1547                           
  1548                           ; Switch size 1, requested type "space"
  1549                           ; Number of cases is 4, Range of values is 0 to 105
  1550                           ; switch strategies available:
  1551                           ; Name         Instructions Cycles
  1552                           ; simple_byte           13     7 (average)
  1553                           ; jumptable            260     6 (fixed)
  1554                           ;	Chosen strategy is simple_byte
  1555  013D  3A00               	xorlw	0	; case 0
  1556  013E  1903               	skipnz
  1557  013F  2FF9               	goto	L10
  1558  0140  3A64               	xorlw	100	; case 100
  1559  0141  1903               	skipnz
  1560  0142  294A               	goto	l2407
  1561  0143  3A02               	xorlw	2	; case 102
  1562  0144  1903               	skipnz
  1563  0145  292C               	goto	l112
  1564  0146  3A0F               	xorlw	15	; case 105
  1565  0147  1903               	skipnz
  1566  0148  294A               	goto	l2407
  1567  0149  2842               	goto	l2639
  1568  014A                     l2407:	
  1569                           
  1570                           ;doprnt.c: 825: if(flag & (0x700)) {
  1571  014A  3000               	movlw	0
  1572  014B  0524               	andwf	sprintf@flag^(0+128),w
  1573  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1574  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1575  014E  00DE               	movwf	??_sprintf
  1576  014F  3007               	movlw	7
  1577  0150  1683               	bsf	3,5	;RP0=1, select bank1
  1578  0151  1303               	bcf	3,6	;RP1=0, select bank1
  1579  0152  0525               	andwf	(sprintf@flag+1)^(0+128),w
  1580  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0155  00DF               	movwf	??_sprintf+1
  1583  0156  085E               	movf	??_sprintf,w
  1584  0157  045F               	iorwf	??_sprintf+1,w
  1585  0158  1903               	btfsc	3,2
  1586  0159  2F35               	goto	l2563
  1587                           
  1588                           ;doprnt.c: 827: if(flag & 0x1000)
  1589  015A  1683               	bsf	3,5	;RP0=1, select bank1
  1590  015B  1303               	bcf	3,6	;RP1=0, select bank1
  1591  015C  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  1592  015D  2962               	goto	l2413
  1593                           
  1594                           ;doprnt.c: 829: prec = 6;
  1595  015E  3006               	movlw	6
  1596  015F  00B6               	movwf	sprintf@prec^(0+128)
  1597  0160  3000               	movlw	0
  1598  0161  00B7               	movwf	(sprintf@prec^(0+128)+1)
  1599  0162                     l2413:	
  1600                           
  1601                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1602  0162  0823               	movf	sprintf@ap^(0+128),w
  1603  0163  0084               	movwf	4
  1604  0164  1383               	bcf	3,7	;select IRP bank0
  1605  0165  0800               	movf	0,w
  1606  0166  00B2               	movwf	sprintf@fval^(0+128)
  1607  0167  0A84               	incf	4,f
  1608  0168  0800               	movf	0,w
  1609  0169  00B3               	movwf	(sprintf@fval+1)^(0+128)
  1610  016A  0A84               	incf	4,f
  1611  016B  0800               	movf	0,w
  1612  016C  00B4               	movwf	(sprintf@fval+2)^(0+128)
  1613  016D  3003               	movlw	3
  1614  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1615  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1616  0170  00DE               	movwf	??_sprintf
  1617  0171  085E               	movf	??_sprintf,w
  1618  0172  1683               	bsf	3,5	;RP0=1, select bank1
  1619  0173  1303               	bcf	3,6	;RP1=0, select bank1
  1620  0174  07A3               	addwf	sprintf@ap^(0+128),f
  1621                           
  1622                           ;doprnt.c: 831: if(fval < 0.0) {
  1623  0175  0832               	movf	sprintf@fval^(0+128),w
  1624  0176  00F0               	movwf	___ftge@ff1
  1625  0177  0833               	movf	(sprintf@fval+1)^(0+128),w
  1626  0178  00F1               	movwf	___ftge@ff1+1
  1627  0179  0834               	movf	(sprintf@fval+2)^(0+128),w
  1628  017A  00F2               	movwf	___ftge@ff1+2
  1629  017B  3000               	movlw	0
  1630  017C  00F3               	movwf	___ftge@ff2
  1631  017D  3000               	movlw	0
  1632  017E  00F4               	movwf	___ftge@ff2+1
  1633  017F  3000               	movlw	0
  1634  0180  00F5               	movwf	___ftge@ff2+2
  1635  0181  160A  118A  236D  120A  118A  	fcall	___ftge
  1636  0186  1803               	btfsc	3,0
  1637  0187  29A1               	goto	l2423
  1638                           
  1639                           ;doprnt.c: 832: fval = -fval;
  1640  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1641  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1642  018A  0832               	movf	sprintf@fval^(0+128),w
  1643  018B  00F0               	movwf	___ftneg@f1
  1644  018C  0833               	movf	(sprintf@fval+1)^(0+128),w
  1645  018D  00F1               	movwf	___ftneg@f1+1
  1646  018E  0834               	movf	(sprintf@fval+2)^(0+128),w
  1647  018F  00F2               	movwf	___ftneg@f1+2
  1648  0190  120A  118A  2004  120A  118A  	fcall	___ftneg
  1649  0195  0870               	movf	?___ftneg,w
  1650  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1651  0197  1303               	bcf	3,6	;RP1=0, select bank1
  1652  0198  00B2               	movwf	sprintf@fval^(0+128)
  1653  0199  0871               	movf	?___ftneg+1,w
  1654  019A  00B3               	movwf	(sprintf@fval+1)^(0+128)
  1655  019B  0872               	movf	?___ftneg+2,w
  1656  019C  00B4               	movwf	(sprintf@fval+2)^(0+128)
  1657                           
  1658                           ;doprnt.c: 833: flag |= 0x03;
  1659  019D  3003               	movlw	3
  1660  019E  04A4               	iorwf	sprintf@flag^(0+128),f
  1661  019F  3000               	movlw	0
  1662  01A0  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  1663  01A1                     l2423:	
  1664                           
  1665                           ;doprnt.c: 834: }
  1666                           ;doprnt.c: 835: exp = 0;
  1667  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  1668  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  1669  01A3  01B0               	clrf	sprintf@exp^(0+128)
  1670  01A4  01B1               	clrf	(sprintf@exp+1)^(0+128)
  1671                           
  1672                           ;doprnt.c: 836: if( fval!=0) {
  1673  01A5  0834               	movf	(sprintf@fval+2)^(0+128),w
  1674  01A6  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  1675  01A7  0432               	iorwf	sprintf@fval^(0+128),w
  1676  01A8  1903               	skipnz
  1677  01A9  2A95               	goto	l2451
  1678                           
  1679                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1680  01AA  30B2               	movlw	low (sprintf@fval| 0)
  1681  01AB  0084               	movwf	4
  1682  01AC  1383               	bcf	3,7	;select IRP bank1
  1683  01AD  0800               	movf	0,w
  1684  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1685  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1686  01B0  00DE               	movwf	??_sprintf
  1687  01B1  0A84               	incf	4,f
  1688  01B2  0800               	movf	0,w
  1689  01B3  00DF               	movwf	??_sprintf+1
  1690  01B4  0A84               	incf	4,f
  1691  01B5  0800               	movf	0,w
  1692  01B6  00E0               	movwf	??_sprintf+2
  1693  01B7  0A84               	incf	4,f
  1694  01B8  0800               	movf	0,w
  1695  01B9  00E1               	movwf	??_sprintf+3
  1696  01BA  300F               	movlw	15
  1697  01BB                     u3725:	
  1698  01BB  1003               	clrc
  1699  01BC  0CE1               	rrf	??_sprintf+3,f
  1700  01BD  0CE0               	rrf	??_sprintf+2,f
  1701  01BE  0CDF               	rrf	??_sprintf+1,f
  1702  01BF  0CDE               	rrf	??_sprintf,f
  1703  01C0  3EFF               	addlw	-1
  1704  01C1  1D03               	skipz
  1705  01C2  29BB               	goto	u3725
  1706  01C3  30FF               	movlw	255
  1707  01C4  055E               	andwf	??_sprintf,w
  1708  01C5  00E2               	movwf	??_sprintf+4
  1709  01C6  3000               	movlw	0
  1710  01C7  055F               	andwf	??_sprintf+1,w
  1711  01C8  00E3               	movwf	??_sprintf+5
  1712  01C9  0862               	movf	??_sprintf+4,w
  1713  01CA  3E82               	addlw	130
  1714  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1715  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1716  01CD  00B0               	movwf	sprintf@exp^(0+128)
  1717  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1718  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  1719  01D0  0863               	movf	??_sprintf+5,w
  1720  01D1  1803               	skipnc
  1721  01D2  3E01               	addlw	1
  1722  01D3  3EFF               	addlw	255
  1723  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  1724  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  1725  01D6  00B1               	movwf	(sprintf@exp+1)^(0+128)
  1726                           
  1727                           ;doprnt.c: 838: exp--;
  1728  01D7  30FF               	movlw	255
  1729  01D8  07B0               	addwf	sprintf@exp^(0+128),f
  1730  01D9  1803               	skipnc
  1731  01DA  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  1732  01DB  30FF               	movlw	255
  1733  01DC  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  1734                           
  1735                           ;doprnt.c: 839: exp *= 3;
  1736  01DD  3003               	movlw	3
  1737  01DE  00F0               	movwf	___wmul@multiplier
  1738  01DF  3000               	movlw	0
  1739  01E0  00F1               	movwf	___wmul@multiplier+1
  1740  01E1  0831               	movf	(sprintf@exp+1)^(0+128),w
  1741  01E2  00F3               	movwf	___wmul@multiplicand+1
  1742  01E3  0830               	movf	sprintf@exp^(0+128),w
  1743  01E4  00F2               	movwf	___wmul@multiplicand
  1744  01E5  160A  118A  21D7  120A  118A  	fcall	___wmul
  1745  01EA  0871               	movf	?___wmul+1,w
  1746  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1747  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1748  01ED  00B1               	movwf	(sprintf@exp+1)^(0+128)
  1749  01EE  0870               	movf	?___wmul,w
  1750  01EF  00B0               	movwf	sprintf@exp^(0+128)
  1751                           
  1752                           ;doprnt.c: 840: exp /= 10;
  1753  01F0  300A               	movlw	10
  1754  01F1  00F7               	movwf	___awdiv@divisor
  1755  01F2  3000               	movlw	0
  1756  01F3  00F8               	movwf	___awdiv@divisor+1
  1757  01F4  0831               	movf	(sprintf@exp+1)^(0+128),w
  1758  01F5  00FA               	movwf	___awdiv@dividend+1
  1759  01F6  0830               	movf	sprintf@exp^(0+128),w
  1760  01F7  00F9               	movwf	___awdiv@dividend
  1761  01F8  160A  118A  2312  120A  118A  	fcall	___awdiv
  1762  01FD  0878               	movf	?___awdiv+1,w
  1763  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  1764  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  1765  0200  00B1               	movwf	(sprintf@exp+1)^(0+128)
  1766  0201  0877               	movf	?___awdiv,w
  1767  0202  00B0               	movwf	sprintf@exp^(0+128)
  1768                           
  1769                           ;doprnt.c: 841: if(exp < 0)
  1770  0203  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  1771  0204  2A0B               	goto	l2439
  1772                           
  1773                           ;doprnt.c: 842: exp--;
  1774  0205  30FF               	movlw	255
  1775  0206  07B0               	addwf	sprintf@exp^(0+128),f
  1776  0207  1803               	skipnc
  1777  0208  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  1778  0209  30FF               	movlw	255
  1779  020A  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  1780  020B                     l2439:	
  1781                           
  1782                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1783  020B  0330               	decf	sprintf@exp^(0+128),w
  1784  020C  3AFF               	xorlw	255
  1785  020D  120A  158A  2565  120A  118A  	fcall	_scale
  1786  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0214  0837               	movf	?_scale,w
  1789  0215  1683               	bsf	3,5	;RP0=1, select bank1
  1790  0216  1303               	bcf	3,6	;RP1=0, select bank1
  1791  0217  00A8               	movwf	sprintf@tmpval^(0+128)
  1792  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1794  021A  0838               	movf	?_scale+1,w
  1795  021B  1683               	bsf	3,5	;RP0=1, select bank1
  1796  021C  1303               	bcf	3,6	;RP1=0, select bank1
  1797  021D  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  1798  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1799  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0220  0839               	movf	?_scale+2,w
  1801  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0222  1303               	bcf	3,6	;RP1=0, select bank1
  1803  0223  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  1804                           
  1805                           ;doprnt.c: 847: tmpval.integ *= fval;
  1806  0224  0832               	movf	sprintf@fval^(0+128),w
  1807  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1808  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1809  0227  00A7               	movwf	___ftmul@f1
  1810  0228  1683               	bsf	3,5	;RP0=1, select bank1
  1811  0229  1303               	bcf	3,6	;RP1=0, select bank1
  1812  022A  0833               	movf	(sprintf@fval+1)^(0+128),w
  1813  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1814  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1815  022D  00A8               	movwf	___ftmul@f1+1
  1816  022E  1683               	bsf	3,5	;RP0=1, select bank1
  1817  022F  1303               	bcf	3,6	;RP1=0, select bank1
  1818  0230  0834               	movf	(sprintf@fval+2)^(0+128),w
  1819  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0233  00A9               	movwf	___ftmul@f1+2
  1822  0234  1683               	bsf	3,5	;RP0=1, select bank1
  1823  0235  1303               	bcf	3,6	;RP1=0, select bank1
  1824  0236  0828               	movf	sprintf@tmpval^(0+128),w
  1825  0237  1283               	bcf	3,5	;RP0=0, select bank0
  1826  0238  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0239  00AA               	movwf	___ftmul@f2
  1828  023A  1683               	bsf	3,5	;RP0=1, select bank1
  1829  023B  1303               	bcf	3,6	;RP1=0, select bank1
  1830  023C  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  1831  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1832  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1833  023F  00AB               	movwf	___ftmul@f2+1
  1834  0240  1683               	bsf	3,5	;RP0=1, select bank1
  1835  0241  1303               	bcf	3,6	;RP1=0, select bank1
  1836  0242  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  1837  0243  1283               	bcf	3,5	;RP0=0, select bank0
  1838  0244  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0245  00AC               	movwf	___ftmul@f2+2
  1840  0246  160A  118A  2646  120A  118A  	fcall	___ftmul
  1841  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1842  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1843  024D  0827               	movf	?___ftmul,w
  1844  024E  1683               	bsf	3,5	;RP0=1, select bank1
  1845  024F  1303               	bcf	3,6	;RP1=0, select bank1
  1846  0250  00A8               	movwf	sprintf@tmpval^(0+128)
  1847  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1848  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0253  0828               	movf	?___ftmul+1,w
  1850  0254  1683               	bsf	3,5	;RP0=1, select bank1
  1851  0255  1303               	bcf	3,6	;RP1=0, select bank1
  1852  0256  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  1853  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0259  0829               	movf	?___ftmul+2,w
  1856  025A  1683               	bsf	3,5	;RP0=1, select bank1
  1857  025B  1303               	bcf	3,6	;RP1=0, select bank1
  1858  025C  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  1859                           
  1860                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1861  025D  0828               	movf	sprintf@tmpval^(0+128),w
  1862  025E  00F0               	movwf	___ftge@ff1
  1863  025F  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  1864  0260  00F1               	movwf	___ftge@ff1+1
  1865  0261  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  1866  0262  00F2               	movwf	___ftge@ff1+2
  1867  0263  3000               	movlw	0
  1868  0264  00F3               	movwf	___ftge@ff2
  1869  0265  3080               	movlw	128
  1870  0266  00F4               	movwf	___ftge@ff2+1
  1871  0267  303F               	movlw	63
  1872  0268  00F5               	movwf	___ftge@ff2+2
  1873  0269  160A  118A  236D  120A  118A  	fcall	___ftge
  1874  026E  1803               	btfsc	3,0
  1875  026F  2A78               	goto	l2447
  1876                           
  1877                           ;doprnt.c: 849: exp--;
  1878  0270  30FF               	movlw	255
  1879  0271  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0272  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0273  07B0               	addwf	sprintf@exp^(0+128),f
  1882  0274  1803               	skipnc
  1883  0275  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  1884  0276  30FF               	movlw	255
  1885  0277  2A94               	goto	L1
  1886  0278                     l2447:	
  1887                           
  1888                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1889  0278  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0279  1303               	bcf	3,6	;RP1=0, select bank1
  1891  027A  0828               	movf	sprintf@tmpval^(0+128),w
  1892  027B  00F0               	movwf	___ftge@ff1
  1893  027C  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  1894  027D  00F1               	movwf	___ftge@ff1+1
  1895  027E  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  1896  027F  00F2               	movwf	___ftge@ff1+2
  1897  0280  3000               	movlw	0
  1898  0281  00F3               	movwf	___ftge@ff2
  1899  0282  3020               	movlw	32
  1900  0283  00F4               	movwf	___ftge@ff2+1
  1901  0284  3041               	movlw	65
  1902  0285  00F5               	movwf	___ftge@ff2+2
  1903  0286  160A  118A  236D  120A  118A  	fcall	___ftge
  1904  028B  1C03               	btfss	3,0
  1905  028C  2A95               	goto	l2451
  1906                           
  1907                           ;doprnt.c: 851: exp++;
  1908  028D  3001               	movlw	1
  1909  028E  1683               	bsf	3,5	;RP0=1, select bank1
  1910  028F  1303               	bcf	3,6	;RP1=0, select bank1
  1911  0290  07B0               	addwf	sprintf@exp^(0+128),f
  1912  0291  1803               	skipnc
  1913  0292  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  1914  0293  3000               	movlw	0
  1915  0294                     L1:	
  1916  0294  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  1917  0295                     l2451:	
  1918                           
  1919                           ;doprnt.c: 852: }
  1920                           ;doprnt.c: 1112: if(prec <= 12)
  1921  0295  1683               	bsf	3,5	;RP0=1, select bank1
  1922  0296  1303               	bcf	3,6	;RP1=0, select bank1
  1923  0297  0837               	movf	(sprintf@prec+1)^(0+128),w
  1924  0298  3A80               	xorlw	128
  1925  0299  00FF               	movwf	127
  1926  029A  3080               	movlw	128
  1927  029B  027F               	subwf	127,w
  1928  029C  1D03               	skipz
  1929  029D  2AA0               	goto	u3765
  1930  029E  300D               	movlw	13
  1931  029F  0236               	subwf	sprintf@prec^(0+128),w
  1932  02A0                     u3765:	
  1933  02A0  1803               	skipnc
  1934  02A1  2ADB               	goto	l2455
  1935                           
  1936                           ;doprnt.c: 1113: fval += fround(prec);
  1937  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  1938  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  1939  02A4  0836               	movf	sprintf@prec^(0+128),w
  1940  02A5  120A  158A  23CB  120A  118A  	fcall	_fround
  1941  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1942  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1943  02AC  0837               	movf	?_fround,w
  1944  02AD  00C7               	movwf	___ftadd@f1
  1945  02AE  0838               	movf	?_fround+1,w
  1946  02AF  00C8               	movwf	___ftadd@f1+1
  1947  02B0  0839               	movf	?_fround+2,w
  1948  02B1  00C9               	movwf	___ftadd@f1+2
  1949  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  1950  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  1951  02B4  0832               	movf	sprintf@fval^(0+128),w
  1952  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1953  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1954  02B7  00CA               	movwf	___ftadd@f2
  1955  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  1956  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  1957  02BA  0833               	movf	(sprintf@fval+1)^(0+128),w
  1958  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1959  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1960  02BD  00CB               	movwf	___ftadd@f2+1
  1961  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  1962  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  1963  02C0  0834               	movf	(sprintf@fval+2)^(0+128),w
  1964  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  1965  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  1966  02C3  00CC               	movwf	___ftadd@f2+2
  1967  02C4  120A  158A  2042  120A  118A  	fcall	___ftadd
  1968  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1969  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1970  02CB  0847               	movf	?___ftadd,w
  1971  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  1972  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  1973  02CE  00B2               	movwf	sprintf@fval^(0+128)
  1974  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1975  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1976  02D1  0848               	movf	?___ftadd+1,w
  1977  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1978  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1979  02D4  00B3               	movwf	(sprintf@fval+1)^(0+128)
  1980  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1981  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1982  02D7  0849               	movf	?___ftadd+2,w
  1983  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  1984  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  1985  02DA  00B4               	movwf	(sprintf@fval+2)^(0+128)
  1986  02DB                     l2455:	
  1987                           
  1988                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1989  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  1990  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  1991  02DD  0831               	movf	(sprintf@exp+1)^(0+128),w
  1992  02DE  3A80               	xorlw	128
  1993  02DF  00FF               	movwf	127
  1994  02E0  3080               	movlw	128
  1995  02E1  027F               	subwf	127,w
  1996  02E2  1D03               	skipz
  1997  02E3  2AE6               	goto	u3775
  1998  02E4  300A               	movlw	10
  1999  02E5  0230               	subwf	sprintf@exp^(0+128),w
  2000  02E6                     u3775:	
  2001  02E6  1803               	skipnc
  2002  02E7  2B19               	goto	l2463
  2003  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2004  02E9  1303               	bcf	3,6	;RP1=0, select bank1
  2005  02EA  0834               	movf	(sprintf@fval+2)^(0+128),w
  2006  02EB  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  2007  02EC  0432               	iorwf	sprintf@fval^(0+128),w
  2008  02ED  1903               	skipnz
  2009  02EE  2B72               	goto	l2477
  2010  02EF  0832               	movf	sprintf@fval^(0+128),w
  2011  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2012  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2013  02F2  00C0               	movwf	___fttol@f1
  2014  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  2015  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  2016  02F5  0833               	movf	(sprintf@fval+1)^(0+128),w
  2017  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2018  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2019  02F8  00C1               	movwf	___fttol@f1+1
  2020  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2021  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  2022  02FB  0834               	movf	(sprintf@fval+2)^(0+128),w
  2023  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2024  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2025  02FE  00C2               	movwf	___fttol@f1+2
  2026  02FF  160A  118A  24F5  120A  118A  	fcall	___fttol
  2027  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2028  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2029  0306  0843               	movf	?___fttol+3,w
  2030  0307  0442               	iorwf	?___fttol+2,w
  2031  0308  0441               	iorwf	?___fttol+1,w
  2032  0309  0440               	iorwf	?___fttol,w
  2033  030A  1D03               	skipz
  2034  030B  2B72               	goto	l2477
  2035  030C  1683               	bsf	3,5	;RP0=1, select bank1
  2036  030D  1303               	bcf	3,6	;RP1=0, select bank1
  2037  030E  0831               	movf	(sprintf@exp+1)^(0+128),w
  2038  030F  3A80               	xorlw	128
  2039  0310  00FF               	movwf	127
  2040  0311  3080               	movlw	128
  2041  0312  027F               	subwf	127,w
  2042  0313  1D03               	skipz
  2043  0314  2B17               	goto	u3805
  2044  0315  3002               	movlw	2
  2045  0316  0230               	subwf	sprintf@exp^(0+128),w
  2046  0317                     u3805:	
  2047  0317  1C03               	skipc
  2048  0318  2B72               	goto	l2477
  2049  0319                     l2463:	
  2050                           
  2051                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2052  0319  1683               	bsf	3,5	;RP0=1, select bank1
  2053  031A  1303               	bcf	3,6	;RP1=0, select bank1
  2054  031B  0828               	movf	sprintf@tmpval^(0+128),w
  2055  031C  00F0               	movwf	___ftge@ff1
  2056  031D  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2057  031E  00F1               	movwf	___ftge@ff1+1
  2058  031F  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2059  0320  00F2               	movwf	___ftge@ff1+2
  2060  0321  3070               	movlw	112
  2061  0322  00F3               	movwf	___ftge@ff2
  2062  0323  3089               	movlw	137
  2063  0324  00F4               	movwf	___ftge@ff2+1
  2064  0325  3040               	movlw	64
  2065  0326  00F5               	movwf	___ftge@ff2+2
  2066  0327  160A  118A  236D  120A  118A  	fcall	___ftge
  2067  032C  1803               	btfsc	3,0
  2068  032D  2B30               	goto	l2467
  2069                           
  2070                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2071  032E  30F7               	movlw	247
  2072  032F  2B31               	goto	L2
  2073  0330                     l2467:	
  2074                           ;doprnt.c: 1122: }else{
  2075                           
  2076                           
  2077                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2078  0330  30F8               	movlw	248
  2079  0331                     L2:	
  2080  0331  1683               	bsf	3,5	;RP0=1, select bank1
  2081  0332  1303               	bcf	3,6	;RP1=0, select bank1
  2082  0333  07B0               	addwf	sprintf@exp^(0+128),f
  2083  0334  1803               	skipnc
  2084  0335  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  2085  0336  30FF               	movlw	255
  2086  0337  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  2087                           
  2088                           ;doprnt.c: 1124: }
  2089                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2090  0338  0830               	movf	sprintf@exp^(0+128),w
  2091  0339  120A  158A  2565  120A  118A  	fcall	_scale
  2092  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2093  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0340  0837               	movf	?_scale,w
  2095  0341  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0342  1303               	bcf	3,6	;RP1=0, select bank1
  2097  0343  00A8               	movwf	sprintf@tmpval^(0+128)
  2098  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2099  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2100  0346  0838               	movf	?_scale+1,w
  2101  0347  1683               	bsf	3,5	;RP0=1, select bank1
  2102  0348  1303               	bcf	3,6	;RP1=0, select bank1
  2103  0349  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2104  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2105  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2106  034C  0839               	movf	?_scale+2,w
  2107  034D  1683               	bsf	3,5	;RP0=1, select bank1
  2108  034E  1303               	bcf	3,6	;RP1=0, select bank1
  2109  034F  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2110                           
  2111                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2112  0350  0832               	movf	sprintf@fval^(0+128),w
  2113  0351  00F0               	movwf	__tdiv_to_l_@f1
  2114  0352  0833               	movf	(sprintf@fval+1)^(0+128),w
  2115  0353  00F1               	movwf	__tdiv_to_l_@f1+1
  2116  0354  0834               	movf	(sprintf@fval+2)^(0+128),w
  2117  0355  00F2               	movwf	__tdiv_to_l_@f1+2
  2118  0356  0828               	movf	sprintf@tmpval^(0+128),w
  2119  0357  00F3               	movwf	__tdiv_to_l_@f2
  2120  0358  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2121  0359  00F4               	movwf	__tdiv_to_l_@f2+1
  2122  035A  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2123  035B  00F5               	movwf	__tdiv_to_l_@f2+2
  2124  035C  160A  118A  2583  120A  118A  	fcall	__tdiv_to_l_
  2125  0361  0873               	movf	?__tdiv_to_l_+3,w
  2126  0362  1683               	bsf	3,5	;RP0=1, select bank1
  2127  0363  1303               	bcf	3,6	;RP1=0, select bank1
  2128  0364  00AF               	movwf	(sprintf@val+3)^(0+128)
  2129  0365  0872               	movf	?__tdiv_to_l_+2,w
  2130  0366  00AE               	movwf	(sprintf@val+2)^(0+128)
  2131  0367  0871               	movf	?__tdiv_to_l_+1,w
  2132  0368  00AD               	movwf	(sprintf@val+1)^(0+128)
  2133  0369  0870               	movf	?__tdiv_to_l_,w
  2134  036A  00AC               	movwf	sprintf@val^(0+128)
  2135                           
  2136                           ;doprnt.c: 1129: fval = 0.0;
  2137  036B  3000               	movlw	0
  2138  036C  00B2               	movwf	sprintf@fval^(0+128)
  2139  036D  3000               	movlw	0
  2140  036E  00B3               	movwf	(sprintf@fval+1)^(0+128)
  2141  036F  3000               	movlw	0
  2142  0370  00B4               	movwf	(sprintf@fval+2)^(0+128)
  2143                           
  2144                           ;doprnt.c: 1130: } else {
  2145  0371  2BE1               	goto	l2481
  2146  0372                     l2477:	
  2147                           
  2148                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2149  0372  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0373  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0374  0832               	movf	sprintf@fval^(0+128),w
  2152  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0377  00C0               	movwf	___fttol@f1
  2155  0378  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0379  1303               	bcf	3,6	;RP1=0, select bank1
  2157  037A  0833               	movf	(sprintf@fval+1)^(0+128),w
  2158  037B  1283               	bcf	3,5	;RP0=0, select bank0
  2159  037C  1303               	bcf	3,6	;RP1=0, select bank0
  2160  037D  00C1               	movwf	___fttol@f1+1
  2161  037E  1683               	bsf	3,5	;RP0=1, select bank1
  2162  037F  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0380  0834               	movf	(sprintf@fval+2)^(0+128),w
  2164  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2166  0383  00C2               	movwf	___fttol@f1+2
  2167  0384  160A  118A  24F5  120A  118A  	fcall	___fttol
  2168  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2169  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2170  038B  0843               	movf	?___fttol+3,w
  2171  038C  1683               	bsf	3,5	;RP0=1, select bank1
  2172  038D  1303               	bcf	3,6	;RP1=0, select bank1
  2173  038E  00AF               	movwf	(sprintf@val+3)^(0+128)
  2174  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0391  0842               	movf	?___fttol+2,w
  2177  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2178  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2179  0394  00AE               	movwf	(sprintf@val+2)^(0+128)
  2180  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0397  0841               	movf	?___fttol+1,w
  2183  0398  1683               	bsf	3,5	;RP0=1, select bank1
  2184  0399  1303               	bcf	3,6	;RP1=0, select bank1
  2185  039A  00AD               	movwf	(sprintf@val+1)^(0+128)
  2186  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2187  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2188  039D  0840               	movf	?___fttol,w
  2189  039E  1683               	bsf	3,5	;RP0=1, select bank1
  2190  039F  1303               	bcf	3,6	;RP1=0, select bank1
  2191  03A0  00AC               	movwf	sprintf@val^(0+128)
  2192                           
  2193                           ;doprnt.c: 1132: fval -= (double)val;
  2194  03A1  082F               	movf	(sprintf@val+3)^(0+128),w
  2195  03A2  00FB               	movwf	___lltoft@c+3
  2196  03A3  082E               	movf	(sprintf@val+2)^(0+128),w
  2197  03A4  00FA               	movwf	___lltoft@c+2
  2198  03A5  082D               	movf	(sprintf@val+1)^(0+128),w
  2199  03A6  00F9               	movwf	___lltoft@c+1
  2200  03A7  082C               	movf	sprintf@val^(0+128),w
  2201  03A8  00F8               	movwf	___lltoft@c
  2202  03A9  120A  118A  200C  120A  118A  	fcall	___lltoft
  2203  03AE  0878               	movf	?___lltoft,w
  2204  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  2205  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  2206  03B1  00D4               	movwf	___ftsub@f2
  2207  03B2  0879               	movf	?___lltoft+1,w
  2208  03B3  00D5               	movwf	___ftsub@f2+1
  2209  03B4  087A               	movf	?___lltoft+2,w
  2210  03B5  00D6               	movwf	___ftsub@f2+2
  2211  03B6  1683               	bsf	3,5	;RP0=1, select bank1
  2212  03B7  1303               	bcf	3,6	;RP1=0, select bank1
  2213  03B8  0832               	movf	sprintf@fval^(0+128),w
  2214  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2215  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2216  03BB  00D7               	movwf	___ftsub@f1
  2217  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2218  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  2219  03BE  0833               	movf	(sprintf@fval+1)^(0+128),w
  2220  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2221  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2222  03C1  00D8               	movwf	___ftsub@f1+1
  2223  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  2224  03C3  1303               	bcf	3,6	;RP1=0, select bank1
  2225  03C4  0834               	movf	(sprintf@fval+2)^(0+128),w
  2226  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2227  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2228  03C7  00D9               	movwf	___ftsub@f1+2
  2229  03C8  160A  118A  21B6  120A  118A  	fcall	___ftsub
  2230  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2231  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2232  03CF  0854               	movf	?___ftsub,w
  2233  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2234  03D1  1303               	bcf	3,6	;RP1=0, select bank1
  2235  03D2  00B2               	movwf	sprintf@fval^(0+128)
  2236  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2237  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2238  03D5  0855               	movf	?___ftsub+1,w
  2239  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  2240  03D7  1303               	bcf	3,6	;RP1=0, select bank1
  2241  03D8  00B3               	movwf	(sprintf@fval+1)^(0+128)
  2242  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2243  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2244  03DB  0856               	movf	?___ftsub+2,w
  2245  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2246  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  2247  03DE  00B4               	movwf	(sprintf@fval+2)^(0+128)
  2248                           
  2249                           ;doprnt.c: 1133: exp = 0;
  2250  03DF  01B0               	clrf	sprintf@exp^(0+128)
  2251  03E0  01B1               	clrf	(sprintf@exp+1)^(0+128)
  2252  03E1                     l2481:	
  2253                           
  2254                           ;doprnt.c: 1134: }
  2255                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2256  03E1  01B8               	clrf	sprintf@c^(0+128)
  2257  03E2  0AB8               	incf	sprintf@c^(0+128),f
  2258  03E3  300A               	movlw	10
  2259  03E4  0638               	xorwf	sprintf@c^(0+128),w
  2260  03E5  1903               	btfsc	3,2
  2261  03E6  2C37               	goto	l2493
  2262  03E7                     l2487:	
  2263                           
  2264                           ;doprnt.c: 1137: if(val < dpowers[c])
  2265  03E7  0838               	movf	sprintf@c^(0+128),w
  2266  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2267  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2268  03EA  00DE               	movwf	??_sprintf
  2269  03EB  3001               	movlw	1
  2270  03EC                     u3835:	
  2271  03EC  1003               	clrc
  2272  03ED  0DDE               	rlf	??_sprintf,f
  2273  03EE  3EFF               	addlw	-1
  2274  03EF  1D03               	skipz
  2275  03F0  2BEC               	goto	u3835
  2276  03F1  1003               	clrc
  2277  03F2  0D5E               	rlf	??_sprintf,w
  2278  03F3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2279  03F4  0084               	movwf	4
  2280  03F5  160A  118A  200A  120A  118A  	fcall	stringdir
  2281  03FA  00DF               	movwf	??_sprintf+1
  2282  03FB  160A  118A  200A  120A  118A  	fcall	stringdir
  2283  0400  00E0               	movwf	??_sprintf+2
  2284  0401  160A  118A  200A  120A  118A  	fcall	stringdir
  2285  0406  00E1               	movwf	??_sprintf+3
  2286  0407  160A  118A  200A  120A  118A  	fcall	stringdir
  2287  040C  00E2               	movwf	??_sprintf+4
  2288  040D  0862               	movf	??_sprintf+4,w
  2289  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2290  040F  1303               	bcf	3,6	;RP1=0, select bank1
  2291  0410  022F               	subwf	(sprintf@val+3)^(0+128),w
  2292  0411  1D03               	skipz
  2293  0412  2C29               	goto	u3845
  2294  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0414  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0415  0861               	movf	??_sprintf+3,w
  2297  0416  1683               	bsf	3,5	;RP0=1, select bank1
  2298  0417  1303               	bcf	3,6	;RP1=0, select bank1
  2299  0418  022E               	subwf	(sprintf@val+2)^(0+128),w
  2300  0419  1D03               	skipz
  2301  041A  2C29               	goto	u3845
  2302  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2303  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2304  041D  0860               	movf	??_sprintf+2,w
  2305  041E  1683               	bsf	3,5	;RP0=1, select bank1
  2306  041F  1303               	bcf	3,6	;RP1=0, select bank1
  2307  0420  022D               	subwf	(sprintf@val+1)^(0+128),w
  2308  0421  1D03               	skipz
  2309  0422  2C29               	goto	u3845
  2310  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0425  085F               	movf	??_sprintf+1,w
  2313  0426  1683               	bsf	3,5	;RP0=1, select bank1
  2314  0427  1303               	bcf	3,6	;RP1=0, select bank1
  2315  0428  022C               	subwf	sprintf@val^(0+128),w
  2316  0429                     u3845:	
  2317  0429  1C03               	btfss	3,0
  2318  042A  2C37               	goto	l2493
  2319                           
  2320                           ;doprnt.c: 1138: break;
  2321  042B  3001               	movlw	1
  2322  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2323  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2324  042E  00DE               	movwf	??_sprintf
  2325  042F  085E               	movf	??_sprintf,w
  2326  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2327  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2328  0432  07B8               	addwf	sprintf@c^(0+128),f
  2329  0433  300A               	movlw	10
  2330  0434  0638               	xorwf	sprintf@c^(0+128),w
  2331  0435  1D03               	btfss	3,2
  2332  0436  2BE7               	goto	l2487
  2333  0437                     l2493:	
  2334                           
  2335                           ;doprnt.c: 1142: width -= prec + c + exp;
  2336  0437  0836               	movf	sprintf@prec^(0+128),w
  2337  0438  0738               	addwf	sprintf@c^(0+128),w
  2338  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2339  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2340  043B  00DE               	movwf	??_sprintf
  2341  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2342  043D  1303               	bcf	3,6	;RP1=0, select bank1
  2343  043E  0837               	movf	(sprintf@prec+1)^(0+128),w
  2344  043F  1803               	skipnc
  2345  0440  0A37               	incf	(sprintf@prec+1)^(0+128),w
  2346  0441  3E00               	addlw	0
  2347  0442  1BB8               	btfsc	sprintf@c^(0+128),7
  2348  0443  3EFF               	addlw	255
  2349  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0446  00DF               	movwf	??_sprintf+1
  2352  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2353  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2354  0449  0830               	movf	sprintf@exp^(0+128),w
  2355  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2356  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2357  044C  075E               	addwf	??_sprintf,w
  2358  044D  00E0               	movwf	??_sprintf+2
  2359  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2360  044F  1303               	bcf	3,6	;RP1=0, select bank1
  2361  0450  0831               	movf	(sprintf@exp+1)^(0+128),w
  2362  0451  1803               	skipnc
  2363  0452  0A31               	incf	(sprintf@exp+1)^(0+128),w
  2364  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2365  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2366  0455  075F               	addwf	??_sprintf+1,w
  2367  0456  00E1               	movwf	??_sprintf+3
  2368  0457  0860               	movf	??_sprintf+2,w
  2369  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2370  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2371  045A  02A6               	subwf	sprintf@width^(0+128),f
  2372  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2373  045C  1303               	bcf	3,6	;RP1=0, select bank0
  2374  045D  0861               	movf	??_sprintf+3,w
  2375  045E  1683               	bsf	3,5	;RP0=1, select bank1
  2376  045F  1303               	bcf	3,6	;RP1=0, select bank1
  2377  0460  1C03               	skipc
  2378  0461  03A7               	decf	(sprintf@width+1)^(0+128),f
  2379  0462  02A7               	subwf	(sprintf@width+1)^(0+128),f
  2380                           
  2381                           ;doprnt.c: 1143: if(
  2382                           ;doprnt.c: 1147: prec)
  2383  0463  0836               	movf	sprintf@prec^(0+128),w
  2384  0464  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  2385  0465  1903               	btfsc	3,2
  2386  0466  2C6D               	goto	l2497
  2387                           
  2388                           ;doprnt.c: 1148: width--;
  2389  0467  30FF               	movlw	255
  2390  0468  07A6               	addwf	sprintf@width^(0+128),f
  2391  0469  1803               	skipnc
  2392  046A  0AA7               	incf	(sprintf@width+1)^(0+128),f
  2393  046B  30FF               	movlw	255
  2394  046C  07A7               	addwf	(sprintf@width+1)^(0+128),f
  2395  046D                     l2497:	
  2396                           
  2397                           ;doprnt.c: 1149: if(flag & 0x03)
  2398  046D  3003               	movlw	3
  2399  046E  0524               	andwf	sprintf@flag^(0+128),w
  2400  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0471  00DE               	movwf	??_sprintf
  2403  0472  3000               	movlw	0
  2404  0473  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0474  1303               	bcf	3,6	;RP1=0, select bank1
  2406  0475  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2407  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0478  00DF               	movwf	??_sprintf+1
  2410  0479  085E               	movf	??_sprintf,w
  2411  047A  045F               	iorwf	??_sprintf+1,w
  2412  047B  1903               	btfsc	3,2
  2413  047C  2C85               	goto	l2507
  2414                           
  2415                           ;doprnt.c: 1150: width--;
  2416  047D  30FF               	movlw	255
  2417  047E  1683               	bsf	3,5	;RP0=1, select bank1
  2418  047F  1303               	bcf	3,6	;RP1=0, select bank1
  2419  0480                     L3:	
  2420  0480  07A6               	addwf	sprintf@width^(0+128),f
  2421  0481  1803               	skipnc
  2422  0482  0AA7               	incf	(sprintf@width+1)^(0+128),f
  2423  0483  30FF               	movlw	255
  2424  0484  07A7               	addwf	(sprintf@width+1)^(0+128),f
  2425  0485                     l2507:	
  2426  0485  1683               	bsf	3,5	;RP0=1, select bank1
  2427  0486  1303               	bcf	3,6	;RP1=0, select bank1
  2428  0487  0827               	movf	(sprintf@width+1)^(0+128),w
  2429  0488  3A80               	xorlw	128
  2430  0489  00FF               	movwf	127
  2431  048A  3080               	movlw	128
  2432  048B  027F               	subwf	127,w
  2433  048C  1D03               	skipz
  2434  048D  2C90               	goto	u3885
  2435  048E  3001               	movlw	1
  2436  048F  0226               	subwf	sprintf@width^(0+128),w
  2437  0490                     u3885:	
  2438  0490  1C03               	btfss	3,0
  2439  0491  2CA7               	goto	l2509
  2440                           
  2441                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2442                           
  2443                           ;doprnt.c: 1175: {
  2444                           ;doprnt.c: 1180: while(width > 0) {
  2445  0492  3020               	movlw	32
  2446  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0495  00DE               	movwf	??_sprintf
  2449  0496  1683               	bsf	3,5	;RP0=1, select bank1
  2450  0497  1303               	bcf	3,6	;RP1=0, select bank1
  2451  0498  0835               	movf	sprintf@sp^(0+128),w
  2452  0499  0084               	movwf	4
  2453  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2454  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2455  049C  085E               	movf	??_sprintf,w
  2456  049D  1383               	bcf	3,7	;select IRP bank0
  2457  049E  0080               	movwf	0
  2458  049F  3001               	movlw	1
  2459  04A0  00DE               	movwf	??_sprintf
  2460  04A1  085E               	movf	??_sprintf,w
  2461  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  2462  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  2463  04A4  07B5               	addwf	sprintf@sp^(0+128),f
  2464                           
  2465                           ;doprnt.c: 1182: width--;
  2466  04A5  30FF               	movlw	255
  2467  04A6  2C80               	goto	L3
  2468  04A7                     l2509:	
  2469                           
  2470                           ;doprnt.c: 1183: }
  2471                           ;doprnt.c: 1188: if(flag & 0x03)
  2472  04A7  3003               	movlw	3
  2473  04A8  1683               	bsf	3,5	;RP0=1, select bank1
  2474  04A9  1303               	bcf	3,6	;RP1=0, select bank1
  2475  04AA  0524               	andwf	sprintf@flag^(0+128),w
  2476  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2477  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2478  04AD  00DE               	movwf	??_sprintf
  2479  04AE  3000               	movlw	0
  2480  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2481  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2482  04B1  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2483  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2484  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2485  04B4  00DF               	movwf	??_sprintf+1
  2486  04B5  085E               	movf	??_sprintf,w
  2487  04B6  045F               	iorwf	??_sprintf+1,w
  2488  04B7  1903               	btfsc	3,2
  2489  04B8  2CCA               	goto	l145
  2490                           
  2491                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2492  04B9  302D               	movlw	45
  2493  04BA                     L4:	
  2494  04BA  00DE               	movwf	??_sprintf
  2495  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  2496  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  2497  04BD  0835               	movf	sprintf@sp^(0+128),w
  2498  04BE  0084               	movwf	4
  2499  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2500  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2501  04C1  085E               	movf	??_sprintf,w
  2502  04C2  1383               	bcf	3,7	;select IRP bank0
  2503  04C3  0080               	movwf	0
  2504  04C4  3001               	movlw	1
  2505  04C5  00DE               	movwf	??_sprintf
  2506  04C6  085E               	movf	??_sprintf,w
  2507  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  2508  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  2509  04C9  07B5               	addwf	sprintf@sp^(0+128),f
  2510  04CA                     l145:	
  2511  04CA  30FF               	movlw	255
  2512  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2513  04CC  00DE               	movwf	??_sprintf
  2514  04CD  085E               	movf	??_sprintf,w
  2515  04CE  1683               	bsf	3,5	;RP0=1, select bank1
  2516  04CF  1303               	bcf	3,6	;RP1=0, select bank1
  2517  04D0  07B8               	addwf	sprintf@c^(0+128),f
  2518  04D1  0A38               	incf	sprintf@c^(0+128),w
  2519  04D2  1903               	btfsc	3,2
  2520  04D3  2D70               	goto	l2527
  2521                           
  2522                           ;doprnt.c: 1200: {
  2523                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2524                           
  2525                           ;doprnt.c: 1195: }
  2526                           ;doprnt.c: 1196: while(c--) {
  2527  04D4  0838               	movf	sprintf@c^(0+128),w
  2528  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  2529  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  2530  04D7  00DE               	movwf	??_sprintf
  2531  04D8  3001               	movlw	1
  2532  04D9                     u3905:	
  2533  04D9  1003               	clrc
  2534  04DA  0DDE               	rlf	??_sprintf,f
  2535  04DB  3EFF               	addlw	-1
  2536  04DC  1D03               	skipz
  2537  04DD  2CD9               	goto	u3905
  2538  04DE  1003               	clrc
  2539  04DF  0D5E               	rlf	??_sprintf,w
  2540  04E0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2541  04E1  0084               	movwf	4
  2542  04E2  160A  118A  200A  120A  118A  	fcall	stringdir
  2543  04E7  00F0               	movwf	___lldiv@divisor
  2544  04E8  160A  118A  200A  120A  118A  	fcall	stringdir
  2545  04ED  00F1               	movwf	___lldiv@divisor+1
  2546  04EE  160A  118A  200A  120A  118A  	fcall	stringdir
  2547  04F3  00F2               	movwf	___lldiv@divisor+2
  2548  04F4  160A  118A  200A  120A  118A  	fcall	stringdir
  2549  04F9  00F3               	movwf	___lldiv@divisor+3
  2550  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  2551  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  2552  04FC  082F               	movf	(sprintf@val+3)^(0+128),w
  2553  04FD  00F7               	movwf	___lldiv@dividend+3
  2554  04FE  082E               	movf	(sprintf@val+2)^(0+128),w
  2555  04FF  00F6               	movwf	___lldiv@dividend+2
  2556  0500  082D               	movf	(sprintf@val+1)^(0+128),w
  2557  0501  00F5               	movwf	___lldiv@dividend+1
  2558  0502  082C               	movf	sprintf@val^(0+128),w
  2559  0503  00F4               	movwf	___lldiv@dividend
  2560  0504  160A  118A  23CA  120A  118A  	fcall	___lldiv
  2561  0509  0873               	movf	?___lldiv+3,w
  2562  050A  1683               	bsf	3,5	;RP0=1, select bank1
  2563  050B  1303               	bcf	3,6	;RP1=0, select bank1
  2564  050C  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2565  050D  0872               	movf	?___lldiv+2,w
  2566  050E  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2567  050F  0871               	movf	?___lldiv+1,w
  2568  0510  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2569  0511  0870               	movf	?___lldiv,w
  2570  0512  00A8               	movwf	sprintf@tmpval^(0+128)
  2571                           
  2572                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2573  0513  3000               	movlw	0
  2574  0514  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0515  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0516  00A3               	movwf	___llmod@divisor+3
  2577  0517  3000               	movlw	0
  2578  0518  00A2               	movwf	___llmod@divisor+2
  2579  0519  3000               	movlw	0
  2580  051A  00A1               	movwf	___llmod@divisor+1
  2581  051B  300A               	movlw	10
  2582  051C  00A0               	movwf	___llmod@divisor
  2583  051D  1683               	bsf	3,5	;RP0=1, select bank1
  2584  051E  1303               	bcf	3,6	;RP1=0, select bank1
  2585  051F  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  2586  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0522  00A7               	movwf	___llmod@dividend+3
  2589  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2590  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2591  0525  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2592  0526  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0527  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0528  00A6               	movwf	___llmod@dividend+2
  2595  0529  1683               	bsf	3,5	;RP0=1, select bank1
  2596  052A  1303               	bcf	3,6	;RP1=0, select bank1
  2597  052B  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2598  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2599  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2600  052E  00A5               	movwf	___llmod@dividend+1
  2601  052F  1683               	bsf	3,5	;RP0=1, select bank1
  2602  0530  1303               	bcf	3,6	;RP1=0, select bank1
  2603  0531  0828               	movf	sprintf@tmpval^(0+128),w
  2604  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0534  00A4               	movwf	___llmod@dividend
  2607  0535  160A  118A  22C4  120A  118A  	fcall	___llmod
  2608  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2609  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2610  053C  0823               	movf	?___llmod+3,w
  2611  053D  1683               	bsf	3,5	;RP0=1, select bank1
  2612  053E  1303               	bcf	3,6	;RP1=0, select bank1
  2613  053F  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2614  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0541  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0542  0822               	movf	?___llmod+2,w
  2617  0543  1683               	bsf	3,5	;RP0=1, select bank1
  2618  0544  1303               	bcf	3,6	;RP1=0, select bank1
  2619  0545  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2620  0546  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0547  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0548  0821               	movf	?___llmod+1,w
  2623  0549  1683               	bsf	3,5	;RP0=1, select bank1
  2624  054A  1303               	bcf	3,6	;RP1=0, select bank1
  2625  054B  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2626  054C  1283               	bcf	3,5	;RP0=0, select bank0
  2627  054D  1303               	bcf	3,6	;RP1=0, select bank0
  2628  054E  0820               	movf	?___llmod,w
  2629  054F  1683               	bsf	3,5	;RP0=1, select bank1
  2630  0550  1303               	bcf	3,6	;RP1=0, select bank1
  2631  0551  00A8               	movwf	sprintf@tmpval^(0+128)
  2632                           
  2633                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2634  0552  0828               	movf	sprintf@tmpval^(0+128),w
  2635  0553  3E30               	addlw	48
  2636  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0556  2CBA               	goto	L4
  2639  0557                     l2521:	
  2640                           ;doprnt.c: 1204: }
  2641                           ;doprnt.c: 1206: }
  2642                           ;doprnt.c: 1207: while(exp > 0) {
  2643                           
  2644                           
  2645                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2646  0557  3030               	movlw	48
  2647  0558  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0559  1303               	bcf	3,6	;RP1=0, select bank0
  2649  055A  00DE               	movwf	??_sprintf
  2650  055B  1683               	bsf	3,5	;RP0=1, select bank1
  2651  055C  1303               	bcf	3,6	;RP1=0, select bank1
  2652  055D  0835               	movf	sprintf@sp^(0+128),w
  2653  055E  0084               	movwf	4
  2654  055F  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0560  1303               	bcf	3,6	;RP1=0, select bank0
  2656  0561  085E               	movf	??_sprintf,w
  2657  0562  1383               	bcf	3,7	;select IRP bank0
  2658  0563  0080               	movwf	0
  2659  0564  3001               	movlw	1
  2660  0565  00DE               	movwf	??_sprintf
  2661  0566  085E               	movf	??_sprintf,w
  2662  0567  1683               	bsf	3,5	;RP0=1, select bank1
  2663  0568  1303               	bcf	3,6	;RP1=0, select bank1
  2664  0569  07B5               	addwf	sprintf@sp^(0+128),f
  2665                           
  2666                           ;doprnt.c: 1209: exp--;
  2667  056A  30FF               	movlw	255
  2668  056B  07B0               	addwf	sprintf@exp^(0+128),f
  2669  056C  1803               	skipnc
  2670  056D  0AB1               	incf	(sprintf@exp+1)^(0+128),f
  2671  056E  30FF               	movlw	255
  2672  056F  07B1               	addwf	(sprintf@exp+1)^(0+128),f
  2673  0570                     l2527:	
  2674  0570  0831               	movf	(sprintf@exp+1)^(0+128),w
  2675  0571  3A80               	xorlw	128
  2676  0572  00FF               	movwf	127
  2677  0573  3080               	movlw	128
  2678  0574  027F               	subwf	127,w
  2679  0575  1D03               	skipz
  2680  0576  2D79               	goto	u3925
  2681  0577  3001               	movlw	1
  2682  0578  0230               	subwf	sprintf@exp^(0+128),w
  2683  0579                     u3925:	
  2684  0579  1803               	skipnc
  2685  057A  2D57               	goto	l2521
  2686                           
  2687                           ;doprnt.c: 1210: }
  2688                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2689  057B  1683               	bsf	3,5	;RP0=1, select bank1
  2690  057C  1303               	bcf	3,6	;RP1=0, select bank1
  2691  057D  0837               	movf	(sprintf@prec+1)^(0+128),w
  2692  057E  3A80               	xorlw	128
  2693  057F  00FF               	movwf	127
  2694  0580  3080               	movlw	128
  2695  0581  027F               	subwf	127,w
  2696  0582  1D03               	skipz
  2697  0583  2D86               	goto	u3935
  2698  0584  3009               	movlw	9
  2699  0585  0236               	subwf	sprintf@prec^(0+128),w
  2700  0586                     u3935:	
  2701  0586  1C03               	skipc
  2702  0587  2D8A               	goto	l2533
  2703                           
  2704                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2705  0588  3008               	movlw	8
  2706  0589  2D8D               	goto	L5
  2707  058A                     l2533:	
  2708                           
  2709                           ;doprnt.c: 1213: else
  2710                           ;doprnt.c: 1214: c = prec;
  2711  058A  1683               	bsf	3,5	;RP0=1, select bank1
  2712  058B  1303               	bcf	3,6	;RP1=0, select bank1
  2713  058C  0836               	movf	sprintf@prec^(0+128),w
  2714  058D                     L5:	
  2715  058D  1283               	bcf	3,5	;RP0=0, select bank0
  2716  058E  1303               	bcf	3,6	;RP1=0, select bank0
  2717  058F  00DE               	movwf	??_sprintf
  2718  0590  085E               	movf	??_sprintf,w
  2719  0591  1683               	bsf	3,5	;RP0=1, select bank1
  2720  0592  1303               	bcf	3,6	;RP1=0, select bank1
  2721  0593  00B8               	movwf	sprintf@c^(0+128)
  2722                           
  2723                           ;doprnt.c: 1215: prec -= c;
  2724  0594  0838               	movf	sprintf@c^(0+128),w
  2725  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0597  00DE               	movwf	??_sprintf
  2728  0598  01DF               	clrf	??_sprintf+1
  2729  0599  1BDE               	btfsc	??_sprintf,7
  2730  059A  03DF               	decf	??_sprintf+1,f
  2731  059B  085E               	movf	??_sprintf,w
  2732  059C  1683               	bsf	3,5	;RP0=1, select bank1
  2733  059D  1303               	bcf	3,6	;RP1=0, select bank1
  2734  059E  02B6               	subwf	sprintf@prec^(0+128),f
  2735  059F  1283               	bcf	3,5	;RP0=0, select bank0
  2736  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  2737  05A1  085F               	movf	??_sprintf+1,w
  2738  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  2739  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  2740  05A4  1C03               	skipc
  2741  05A5  03B7               	decf	(sprintf@prec+1)^(0+128),f
  2742  05A6  02B7               	subwf	(sprintf@prec+1)^(0+128),f
  2743                           
  2744                           ;doprnt.c: 1219: if(c)
  2745  05A7  0838               	movf	sprintf@c^(0+128),w
  2746  05A8  1903               	btfsc	3,2
  2747  05A9  2DBD               	goto	l2541
  2748                           
  2749                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2750  05AA  302E               	movlw	46
  2751  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  2752  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  2753  05AD  00DE               	movwf	??_sprintf
  2754  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  2755  05AF  1303               	bcf	3,6	;RP1=0, select bank1
  2756  05B0  0835               	movf	sprintf@sp^(0+128),w
  2757  05B1  0084               	movwf	4
  2758  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  2759  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  2760  05B4  085E               	movf	??_sprintf,w
  2761  05B5  1383               	bcf	3,7	;select IRP bank0
  2762  05B6  0080               	movwf	0
  2763  05B7  3001               	movlw	1
  2764  05B8  00DE               	movwf	??_sprintf
  2765  05B9  085E               	movf	??_sprintf,w
  2766  05BA  1683               	bsf	3,5	;RP0=1, select bank1
  2767  05BB  1303               	bcf	3,6	;RP1=0, select bank1
  2768  05BC  07B5               	addwf	sprintf@sp^(0+128),f
  2769  05BD                     l2541:	
  2770                           
  2771                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2772  05BD  0838               	movf	sprintf@c^(0+128),w
  2773  05BE  120A  158A  2565  120A  118A  	fcall	_scale
  2774  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2775  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2776  05C5  0837               	movf	?_scale,w
  2777  05C6  1683               	bsf	3,5	;RP0=1, select bank1
  2778  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  2779  05C8  00A0               	movwf	_sprintf$553^(0+128)
  2780  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  2781  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  2782  05CB  0838               	movf	?_scale+1,w
  2783  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  2784  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  2785  05CE  00A1               	movwf	(_sprintf$553+1)^(0+128)
  2786  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2787  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2788  05D1  0839               	movf	?_scale+2,w
  2789  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  2790  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  2791  05D4  00A2               	movwf	(_sprintf$553+2)^(0+128)
  2792                           
  2793                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2794  05D5  0820               	movf	_sprintf$553^(0+128),w
  2795  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2796  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2797  05D8  00AA               	movwf	___ftmul@f2
  2798  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  2799  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  2800  05DB  0821               	movf	(_sprintf$553+1)^(0+128),w
  2801  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2802  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2803  05DE  00AB               	movwf	___ftmul@f2+1
  2804  05DF  1683               	bsf	3,5	;RP0=1, select bank1
  2805  05E0  1303               	bcf	3,6	;RP1=0, select bank1
  2806  05E1  0822               	movf	(_sprintf$553+2)^(0+128),w
  2807  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  2808  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  2809  05E4  00AC               	movwf	___ftmul@f2+2
  2810  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  2811  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  2812  05E7  0832               	movf	sprintf@fval^(0+128),w
  2813  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  2814  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  2815  05EA  00A7               	movwf	___ftmul@f1
  2816  05EB  1683               	bsf	3,5	;RP0=1, select bank1
  2817  05EC  1303               	bcf	3,6	;RP1=0, select bank1
  2818  05ED  0833               	movf	(sprintf@fval+1)^(0+128),w
  2819  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  2820  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  2821  05F0  00A8               	movwf	___ftmul@f1+1
  2822  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  2823  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  2824  05F3  0834               	movf	(sprintf@fval+2)^(0+128),w
  2825  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  2826  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  2827  05F6  00A9               	movwf	___ftmul@f1+2
  2828  05F7  160A  118A  2646  120A  118A  	fcall	___ftmul
  2829  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  2830  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  2831  05FE  0827               	movf	?___ftmul,w
  2832  05FF  00C0               	movwf	___fttol@f1
  2833  0600  0828               	movf	?___ftmul+1,w
  2834  0601  00C1               	movwf	___fttol@f1+1
  2835  0602  0829               	movf	?___ftmul+2,w
  2836  0603  00C2               	movwf	___fttol@f1+2
  2837  0604  160A  118A  24F5  120A  118A  	fcall	___fttol
  2838  0609  1283               	bcf	3,5	;RP0=0, select bank0
  2839  060A  1303               	bcf	3,6	;RP1=0, select bank0
  2840  060B  0843               	movf	?___fttol+3,w
  2841  060C  1683               	bsf	3,5	;RP0=1, select bank1
  2842  060D  1303               	bcf	3,6	;RP1=0, select bank1
  2843  060E  00AF               	movwf	(sprintf@val+3)^(0+128)
  2844  060F  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0610  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0611  0842               	movf	?___fttol+2,w
  2847  0612  1683               	bsf	3,5	;RP0=1, select bank1
  2848  0613  1303               	bcf	3,6	;RP1=0, select bank1
  2849  0614  00AE               	movwf	(sprintf@val+2)^(0+128)
  2850  0615  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0616  1303               	bcf	3,6	;RP1=0, select bank0
  2852  0617  0841               	movf	?___fttol+1,w
  2853  0618  1683               	bsf	3,5	;RP0=1, select bank1
  2854  0619  1303               	bcf	3,6	;RP1=0, select bank1
  2855  061A  00AD               	movwf	(sprintf@val+1)^(0+128)
  2856  061B  1283               	bcf	3,5	;RP0=0, select bank0
  2857  061C  1303               	bcf	3,6	;RP1=0, select bank0
  2858  061D  0840               	movf	?___fttol,w
  2859  061E                     L6:	
  2860  061E  1683               	bsf	3,5	;RP0=1, select bank1
  2861  061F  1303               	bcf	3,6	;RP1=0, select bank1
  2862  0620  00AC               	movwf	sprintf@val^(0+128)
  2863  0621  30FF               	movlw	255
  2864  0622  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0623  1303               	bcf	3,6	;RP1=0, select bank0
  2866  0624  00DE               	movwf	??_sprintf
  2867  0625  085E               	movf	??_sprintf,w
  2868  0626  1683               	bsf	3,5	;RP0=1, select bank1
  2869  0627  1303               	bcf	3,6	;RP1=0, select bank1
  2870  0628  07B8               	addwf	sprintf@c^(0+128),f
  2871  0629  0A38               	incf	sprintf@c^(0+128),w
  2872  062A  1903               	btfsc	3,2
  2873  062B  2F30               	goto	l2561
  2874                           
  2875                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2876                           
  2877                           ;doprnt.c: 1228: while(c--) {
  2878  062C  0838               	movf	sprintf@c^(0+128),w
  2879  062D  1283               	bcf	3,5	;RP0=0, select bank0
  2880  062E  1303               	bcf	3,6	;RP1=0, select bank0
  2881  062F  00DE               	movwf	??_sprintf
  2882  0630  3001               	movlw	1
  2883  0631                     u3955:	
  2884  0631  1003               	clrc
  2885  0632  0DDE               	rlf	??_sprintf,f
  2886  0633  3EFF               	addlw	-1
  2887  0634  1D03               	skipz
  2888  0635  2E31               	goto	u3955
  2889  0636  1003               	clrc
  2890  0637  0D5E               	rlf	??_sprintf,w
  2891  0638  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2892  0639  0084               	movwf	4
  2893  063A  160A  118A  200A  120A  118A  	fcall	stringdir
  2894  063F  00F0               	movwf	___lldiv@divisor
  2895  0640  160A  118A  200A  120A  118A  	fcall	stringdir
  2896  0645  00F1               	movwf	___lldiv@divisor+1
  2897  0646  160A  118A  200A  120A  118A  	fcall	stringdir
  2898  064B  00F2               	movwf	___lldiv@divisor+2
  2899  064C  160A  118A  200A  120A  118A  	fcall	stringdir
  2900  0651  00F3               	movwf	___lldiv@divisor+3
  2901  0652  1683               	bsf	3,5	;RP0=1, select bank1
  2902  0653  1303               	bcf	3,6	;RP1=0, select bank1
  2903  0654  082F               	movf	(sprintf@val+3)^(0+128),w
  2904  0655  00F7               	movwf	___lldiv@dividend+3
  2905  0656  082E               	movf	(sprintf@val+2)^(0+128),w
  2906  0657  00F6               	movwf	___lldiv@dividend+2
  2907  0658  082D               	movf	(sprintf@val+1)^(0+128),w
  2908  0659  00F5               	movwf	___lldiv@dividend+1
  2909  065A  082C               	movf	sprintf@val^(0+128),w
  2910  065B  00F4               	movwf	___lldiv@dividend
  2911  065C  160A  118A  23CA  120A  118A  	fcall	___lldiv
  2912  0661  0873               	movf	?___lldiv+3,w
  2913  0662  1683               	bsf	3,5	;RP0=1, select bank1
  2914  0663  1303               	bcf	3,6	;RP1=0, select bank1
  2915  0664  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2916  0665  0872               	movf	?___lldiv+2,w
  2917  0666  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2918  0667  0871               	movf	?___lldiv+1,w
  2919  0668  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2920  0669  0870               	movf	?___lldiv,w
  2921  066A  00A8               	movwf	sprintf@tmpval^(0+128)
  2922                           
  2923                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2924  066B  3000               	movlw	0
  2925  066C  1283               	bcf	3,5	;RP0=0, select bank0
  2926  066D  1303               	bcf	3,6	;RP1=0, select bank0
  2927  066E  00A3               	movwf	___llmod@divisor+3
  2928  066F  3000               	movlw	0
  2929  0670  00A2               	movwf	___llmod@divisor+2
  2930  0671  3000               	movlw	0
  2931  0672  00A1               	movwf	___llmod@divisor+1
  2932  0673  300A               	movlw	10
  2933  0674  00A0               	movwf	___llmod@divisor
  2934  0675  1683               	bsf	3,5	;RP0=1, select bank1
  2935  0676  1303               	bcf	3,6	;RP1=0, select bank1
  2936  0677  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  2937  0678  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0679  1303               	bcf	3,6	;RP1=0, select bank0
  2939  067A  00A7               	movwf	___llmod@dividend+3
  2940  067B  1683               	bsf	3,5	;RP0=1, select bank1
  2941  067C  1303               	bcf	3,6	;RP1=0, select bank1
  2942  067D  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  2943  067E  1283               	bcf	3,5	;RP0=0, select bank0
  2944  067F  1303               	bcf	3,6	;RP1=0, select bank0
  2945  0680  00A6               	movwf	___llmod@dividend+2
  2946  0681  1683               	bsf	3,5	;RP0=1, select bank1
  2947  0682  1303               	bcf	3,6	;RP1=0, select bank1
  2948  0683  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  2949  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0686  00A5               	movwf	___llmod@dividend+1
  2952  0687  1683               	bsf	3,5	;RP0=1, select bank1
  2953  0688  1303               	bcf	3,6	;RP1=0, select bank1
  2954  0689  0828               	movf	sprintf@tmpval^(0+128),w
  2955  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2956  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2957  068C  00A4               	movwf	___llmod@dividend
  2958  068D  160A  118A  22C4  120A  118A  	fcall	___llmod
  2959  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0694  0823               	movf	?___llmod+3,w
  2962  0695  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0696  1303               	bcf	3,6	;RP1=0, select bank1
  2964  0697  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  2965  0698  1283               	bcf	3,5	;RP0=0, select bank0
  2966  0699  1303               	bcf	3,6	;RP1=0, select bank0
  2967  069A  0822               	movf	?___llmod+2,w
  2968  069B  1683               	bsf	3,5	;RP0=1, select bank1
  2969  069C  1303               	bcf	3,6	;RP1=0, select bank1
  2970  069D  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  2971  069E  1283               	bcf	3,5	;RP0=0, select bank0
  2972  069F  1303               	bcf	3,6	;RP1=0, select bank0
  2973  06A0  0821               	movf	?___llmod+1,w
  2974  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  2975  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  2976  06A3  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  2977  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2978  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2979  06A6  0820               	movf	?___llmod,w
  2980  06A7  1683               	bsf	3,5	;RP0=1, select bank1
  2981  06A8  1303               	bcf	3,6	;RP1=0, select bank1
  2982  06A9  00A8               	movwf	sprintf@tmpval^(0+128)
  2983                           
  2984                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2985  06AA  0828               	movf	sprintf@tmpval^(0+128),w
  2986  06AB  3E30               	addlw	48
  2987  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2988  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2989  06AE  00DE               	movwf	??_sprintf
  2990  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  2991  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  2992  06B1  0835               	movf	sprintf@sp^(0+128),w
  2993  06B2  0084               	movwf	4
  2994  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2995  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  2996  06B5  085E               	movf	??_sprintf,w
  2997  06B6  1383               	bcf	3,7	;select IRP bank0
  2998  06B7  0080               	movwf	0
  2999  06B8  3001               	movlw	1
  3000  06B9  00DE               	movwf	??_sprintf
  3001  06BA  085E               	movf	??_sprintf,w
  3002  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  3003  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  3004  06BD  07B5               	addwf	sprintf@sp^(0+128),f
  3005                           
  3006                           ;doprnt.c: 1232: val %= dpowers[c];
  3007  06BE  0838               	movf	sprintf@c^(0+128),w
  3008  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  3009  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  3010  06C1  00DE               	movwf	??_sprintf
  3011  06C2  3001               	movlw	1
  3012  06C3                     u3965:	
  3013  06C3  1003               	clrc
  3014  06C4  0DDE               	rlf	??_sprintf,f
  3015  06C5  3EFF               	addlw	-1
  3016  06C6  1D03               	skipz
  3017  06C7  2EC3               	goto	u3965
  3018  06C8  1003               	clrc
  3019  06C9  0D5E               	rlf	??_sprintf,w
  3020  06CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3021  06CB  0084               	movwf	4
  3022  06CC  160A  118A  200A  120A  118A  	fcall	stringdir
  3023  06D1  00A0               	movwf	___llmod@divisor
  3024  06D2  160A  118A  200A  120A  118A  	fcall	stringdir
  3025  06D7  00A1               	movwf	___llmod@divisor+1
  3026  06D8  160A  118A  200A  120A  118A  	fcall	stringdir
  3027  06DD  00A2               	movwf	___llmod@divisor+2
  3028  06DE  160A  118A  200A  120A  118A  	fcall	stringdir
  3029  06E3  00A3               	movwf	___llmod@divisor+3
  3030  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  3031  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  3032  06E6  082F               	movf	(sprintf@val+3)^(0+128),w
  3033  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  3034  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  3035  06E9  00A7               	movwf	___llmod@dividend+3
  3036  06EA  1683               	bsf	3,5	;RP0=1, select bank1
  3037  06EB  1303               	bcf	3,6	;RP1=0, select bank1
  3038  06EC  082E               	movf	(sprintf@val+2)^(0+128),w
  3039  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  3040  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  3041  06EF  00A6               	movwf	___llmod@dividend+2
  3042  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  3043  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  3044  06F2  082D               	movf	(sprintf@val+1)^(0+128),w
  3045  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  3046  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  3047  06F5  00A5               	movwf	___llmod@dividend+1
  3048  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  3049  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  3050  06F8  082C               	movf	sprintf@val^(0+128),w
  3051  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  3052  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  3053  06FB  00A4               	movwf	___llmod@dividend
  3054  06FC  160A  118A  22C4  120A  118A  	fcall	___llmod
  3055  0701  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0702  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0703  0823               	movf	?___llmod+3,w
  3058  0704  1683               	bsf	3,5	;RP0=1, select bank1
  3059  0705  1303               	bcf	3,6	;RP1=0, select bank1
  3060  0706  00AF               	movwf	(sprintf@val+3)^(0+128)
  3061  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0708  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0709  0822               	movf	?___llmod+2,w
  3064  070A  1683               	bsf	3,5	;RP0=1, select bank1
  3065  070B  1303               	bcf	3,6	;RP1=0, select bank1
  3066  070C  00AE               	movwf	(sprintf@val+2)^(0+128)
  3067  070D  1283               	bcf	3,5	;RP0=0, select bank0
  3068  070E  1303               	bcf	3,6	;RP1=0, select bank0
  3069  070F  0821               	movf	?___llmod+1,w
  3070  0710  1683               	bsf	3,5	;RP0=1, select bank1
  3071  0711  1303               	bcf	3,6	;RP1=0, select bank1
  3072  0712  00AD               	movwf	(sprintf@val+1)^(0+128)
  3073  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0715  0820               	movf	?___llmod,w
  3076  0716  2E1E               	goto	L6
  3077  0717                     l2555:	
  3078                           ;doprnt.c: 1233: }
  3079                           ;doprnt.c: 1235: while(prec) {
  3080                           
  3081                           
  3082                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3083  0717  3030               	movlw	48
  3084  0718  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0719  1303               	bcf	3,6	;RP1=0, select bank0
  3086  071A  00DE               	movwf	??_sprintf
  3087  071B  1683               	bsf	3,5	;RP0=1, select bank1
  3088  071C  1303               	bcf	3,6	;RP1=0, select bank1
  3089  071D  0835               	movf	sprintf@sp^(0+128),w
  3090  071E  0084               	movwf	4
  3091  071F  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0720  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0721  085E               	movf	??_sprintf,w
  3094  0722  1383               	bcf	3,7	;select IRP bank0
  3095  0723  0080               	movwf	0
  3096  0724  3001               	movlw	1
  3097  0725  00DE               	movwf	??_sprintf
  3098  0726  085E               	movf	??_sprintf,w
  3099  0727  1683               	bsf	3,5	;RP0=1, select bank1
  3100  0728  1303               	bcf	3,6	;RP1=0, select bank1
  3101  0729  07B5               	addwf	sprintf@sp^(0+128),f
  3102                           
  3103                           ;doprnt.c: 1237: prec--;
  3104  072A  30FF               	movlw	255
  3105  072B  07B6               	addwf	sprintf@prec^(0+128),f
  3106  072C  1803               	skipnc
  3107  072D  0AB7               	incf	(sprintf@prec+1)^(0+128),f
  3108  072E  30FF               	movlw	255
  3109  072F  07B7               	addwf	(sprintf@prec+1)^(0+128),f
  3110  0730                     l2561:	
  3111  0730  0836               	movf	sprintf@prec^(0+128),w
  3112  0731  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  3113  0732  1903               	btfsc	3,2
  3114  0733  2842               	goto	l2639
  3115  0734  2F17               	goto	l2555
  3116  0735                     l2563:	
  3117                           ;doprnt.c: 1238: }
  3118                           ;doprnt.c: 1245: continue;
  3119                           
  3120                           
  3121                           ;doprnt.c: 1246: }
  3122                           ;doprnt.c: 1253: {
  3123                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3124  0735  1683               	bsf	3,5	;RP0=1, select bank1
  3125  0736  1303               	bcf	3,6	;RP1=0, select bank1
  3126  0737  0823               	movf	sprintf@ap^(0+128),w
  3127  0738  0084               	movwf	4
  3128  0739  1383               	bcf	3,7	;select IRP bank0
  3129  073A  0800               	movf	0,w
  3130  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3131  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3132  073D  00DE               	movwf	??_sprintf
  3133  073E  0A84               	incf	4,f
  3134  073F  0800               	movf	0,w
  3135  0740  00DF               	movwf	??_sprintf+1
  3136  0741  085E               	movf	??_sprintf,w
  3137  0742  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0743  1303               	bcf	3,6	;RP1=0, select bank1
  3139  0744  00AC               	movwf	sprintf@val^(0+128)
  3140  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0747  085F               	movf	??_sprintf+1,w
  3143  0748  1683               	bsf	3,5	;RP0=1, select bank1
  3144  0749  1303               	bcf	3,6	;RP1=0, select bank1
  3145  074A  00AD               	movwf	(sprintf@val+1)^(0+128)
  3146  074B  3000               	movlw	0
  3147  074C  1BAD               	btfsc	(sprintf@val+1)^(0+128),7
  3148  074D  30FF               	movlw	255
  3149  074E  00AE               	movwf	(sprintf@val+2)^(0+128)
  3150  074F  00AF               	movwf	(sprintf@val+3)^(0+128)
  3151  0750  3002               	movlw	2
  3152  0751  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0752  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0753  00DE               	movwf	??_sprintf
  3155  0754  085E               	movf	??_sprintf,w
  3156  0755  1683               	bsf	3,5	;RP0=1, select bank1
  3157  0756  1303               	bcf	3,6	;RP1=0, select bank1
  3158  0757  07A3               	addwf	sprintf@ap^(0+128),f
  3159                           
  3160                           ;doprnt.c: 1261: if((long)val < 0) {
  3161  0758  1FAF               	btfss	(sprintf@val+3)^(0+128),7
  3162  0759  2F69               	goto	l2573
  3163                           
  3164                           ;doprnt.c: 1262: flag |= 0x03;
  3165  075A  3003               	movlw	3
  3166  075B  04A4               	iorwf	sprintf@flag^(0+128),f
  3167  075C  3000               	movlw	0
  3168  075D  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  3169                           
  3170                           ;doprnt.c: 1263: val = -val;
  3171  075E  09AC               	comf	sprintf@val^(0+128),f
  3172  075F  09AD               	comf	(sprintf@val+1)^(0+128),f
  3173  0760  09AE               	comf	(sprintf@val+2)^(0+128),f
  3174  0761  09AF               	comf	(sprintf@val+3)^(0+128),f
  3175  0762  0AAC               	incf	sprintf@val^(0+128),f
  3176  0763  1903               	skipnz
  3177  0764  0AAD               	incf	(sprintf@val+1)^(0+128),f
  3178  0765  1903               	skipnz
  3179  0766  0AAE               	incf	(sprintf@val+2)^(0+128),f
  3180  0767  1903               	skipnz
  3181  0768  0AAF               	incf	(sprintf@val+3)^(0+128),f
  3182  0769                     l2573:	
  3183                           
  3184                           ;doprnt.c: 1264: }
  3185                           ;doprnt.c: 1266: }
  3186                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3187  0769  0836               	movf	sprintf@prec^(0+128),w
  3188  076A  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  3189  076B  1D03               	btfss	3,2
  3190  076C  2F79               	goto	l2579
  3191  076D  082F               	movf	(sprintf@val+3)^(0+128),w
  3192  076E  042E               	iorwf	(sprintf@val+2)^(0+128),w
  3193  076F  042D               	iorwf	(sprintf@val+1)^(0+128),w
  3194  0770  042C               	iorwf	sprintf@val^(0+128),w
  3195  0771  1D03               	skipz
  3196  0772  2F79               	goto	l2579
  3197                           
  3198                           ;doprnt.c: 1291: prec++;
  3199  0773  3001               	movlw	1
  3200  0774  07B6               	addwf	sprintf@prec^(0+128),f
  3201  0775  1803               	skipnc
  3202  0776  0AB7               	incf	(sprintf@prec+1)^(0+128),f
  3203  0777  3000               	movlw	0
  3204  0778  07B7               	addwf	(sprintf@prec+1)^(0+128),f
  3205  0779                     l2579:	
  3206                           
  3207                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3208  0779  01B8               	clrf	sprintf@c^(0+128)
  3209  077A  0AB8               	incf	sprintf@c^(0+128),f
  3210  077B  300A               	movlw	10
  3211  077C  0638               	xorwf	sprintf@c^(0+128),w
  3212  077D  1903               	btfsc	3,2
  3213  077E  2FCF               	goto	l2591
  3214  077F                     l2585:	
  3215                           
  3216                           ;doprnt.c: 1306: if(val < dpowers[c])
  3217  077F  0838               	movf	sprintf@c^(0+128),w
  3218  0780  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0781  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0782  00DE               	movwf	??_sprintf
  3221  0783  3001               	movlw	1
  3222  0784                     u4035:	
  3223  0784  1003               	clrc
  3224  0785  0DDE               	rlf	??_sprintf,f
  3225  0786  3EFF               	addlw	-1
  3226  0787  1D03               	skipz
  3227  0788  2F84               	goto	u4035
  3228  0789  1003               	clrc
  3229  078A  0D5E               	rlf	??_sprintf,w
  3230  078B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3231  078C  0084               	movwf	4
  3232  078D  160A  118A  200A  120A  118A  	fcall	stringdir
  3233  0792  00DF               	movwf	??_sprintf+1
  3234  0793  160A  118A  200A  120A  118A  	fcall	stringdir
  3235  0798  00E0               	movwf	??_sprintf+2
  3236  0799  160A  118A  200A  120A  118A  	fcall	stringdir
  3237  079E  00E1               	movwf	??_sprintf+3
  3238  079F  160A  118A  200A  120A  118A  	fcall	stringdir
  3239  07A4  00E2               	movwf	??_sprintf+4
  3240  07A5  0862               	movf	??_sprintf+4,w
  3241  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  3242  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  3243  07A8  022F               	subwf	(sprintf@val+3)^(0+128),w
  3244  07A9  1D03               	skipz
  3245  07AA  2FC1               	goto	u4045
  3246  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  3247  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  3248  07AD  0861               	movf	??_sprintf+3,w
  3249  07AE  1683               	bsf	3,5	;RP0=1, select bank1
  3250  07AF  1303               	bcf	3,6	;RP1=0, select bank1
  3251  07B0  022E               	subwf	(sprintf@val+2)^(0+128),w
  3252  07B1  1D03               	skipz
  3253  07B2  2FC1               	goto	u4045
  3254  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  3255  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  3256  07B5  0860               	movf	??_sprintf+2,w
  3257  07B6  1683               	bsf	3,5	;RP0=1, select bank1
  3258  07B7  1303               	bcf	3,6	;RP1=0, select bank1
  3259  07B8  022D               	subwf	(sprintf@val+1)^(0+128),w
  3260  07B9  1D03               	skipz
  3261  07BA  2FC1               	goto	u4045
  3262  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  3263  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  3264  07BD  085F               	movf	??_sprintf+1,w
  3265  07BE  1683               	bsf	3,5	;RP0=1, select bank1
  3266  07BF  1303               	bcf	3,6	;RP1=0, select bank1
  3267  07C0  022C               	subwf	sprintf@val^(0+128),w
  3268  07C1                     u4045:	
  3269  07C1  1C03               	btfss	3,0
  3270  07C2  2FCF               	goto	l2591
  3271                           
  3272                           ;doprnt.c: 1307: break;
  3273  07C3  3001               	movlw	1
  3274  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3275  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3276  07C6  00DE               	movwf	??_sprintf
  3277  07C7  085E               	movf	??_sprintf,w
  3278  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  3279  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  3280  07CA  07B8               	addwf	sprintf@c^(0+128),f
  3281  07CB  300A               	movlw	10
  3282  07CC  0638               	xorwf	sprintf@c^(0+128),w
  3283  07CD  1D03               	btfss	3,2
  3284  07CE  2F7F               	goto	l2585
  3285  07CF                     l2591:	
  3286                           
  3287                           ;doprnt.c: 1339: if(c < prec)
  3288  07CF  0838               	movf	sprintf@c^(0+128),w
  3289  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  3290  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  3291  07D2  00DE               	movwf	??_sprintf
  3292  07D3  01DF               	clrf	??_sprintf+1
  3293  07D4  1BDE               	btfsc	??_sprintf,7
  3294  07D5  03DF               	decf	??_sprintf+1,f
  3295  07D6  085F               	movf	??_sprintf+1,w
  3296  07D7  3A80               	xorlw	128
  3297  07D8  00E0               	movwf	??_sprintf+2
  3298  07D9  1683               	bsf	3,5	;RP0=1, select bank1
  3299  07DA  1303               	bcf	3,6	;RP1=0, select bank1
  3300  07DB  0837               	movf	(sprintf@prec+1)^(0+128),w
  3301  07DC  3A80               	xorlw	128
  3302  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  3303  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  3304  07DF  0260               	subwf	??_sprintf+2,w
  3305  07E0  1D03               	skipz
  3306  07E1  2FE8               	goto	u4065
  3307  07E2  1683               	bsf	3,5	;RP0=1, select bank1
  3308  07E3  1303               	bcf	3,6	;RP1=0, select bank1
  3309  07E4  0836               	movf	sprintf@prec^(0+128),w
  3310  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  3311  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  3312  07E7  025E               	subwf	??_sprintf,w
  3313  07E8                     u4065:	
  3314  07E8  120A  158A  1803   	skipnc
  3315  07EB  2A7D               	goto	l2595
  3316                           
  3317                           ;doprnt.c: 1340: c = prec;
  3318  07EC  1683               	bsf	3,5	;RP0=1, select bank1
  3319  07ED  1303               	bcf	3,6	;RP1=0, select bank1
  3320  07EE  0836               	movf	sprintf@prec^(0+128),w
  3321  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  3322  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  3323  07F1  00DE               	movwf	??_sprintf
  3324  07F2  085E               	movf	??_sprintf,w
  3325  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  3326  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  3327  07F5  00B8               	movwf	sprintf@c^(0+128)
  3328  07F6  120A  158A  2A9F   	goto	l166
  3329  07F9                     L10:	
  3330  07F9                     L9:	
  3331  07F9  120A  158A  2BC3   	ljmp	l2641
  3332                           
  3333                           	psect	text2
  3334  0D65                     __ptext2:	
  3335 ;; *************** function _scale *****************
  3336 ;; Defined at:
  3337 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  scl             1    wreg     char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  scl             1   31[BANK0 ] char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  3   23[BANK0 ] char 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         0       3       0       0       0
  3352 ;;      Locals:         0       4       0       0       0
  3353 ;;      Temps:          0       2       0       0       0
  3354 ;;      Totals:         0       9       0       0       0
  3355 ;;Total ram usage:        9 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    2
  3358 ;; This function calls:
  3359 ;;		___awdiv
  3360 ;;		___awmod
  3361 ;;		___bmul
  3362 ;;		___ftmul
  3363 ;; This function is called by:
  3364 ;;		_sprintf
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _scale
  3370  0D65                     _scale:	
  3371                           
  3372                           ;incstack = 0
  3373                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3374                           ;scale@scl stored from wreg
  3375  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  3376  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  3377  0D67  00BF               	movwf	scale@scl
  3378                           
  3379                           ;doprnt.c: 428: if(scl < 0) {
  3380  0D68  1FBF               	btfss	scale@scl,7
  3381  0D69  2EB6               	goto	l2023
  3382                           
  3383                           ;doprnt.c: 429: scl = -scl;
  3384  0D6A  09BF               	comf	scale@scl,f
  3385  0D6B  0ABF               	incf	scale@scl,f
  3386                           
  3387                           ;doprnt.c: 430: if(scl>=110)
  3388  0D6C  083F               	movf	scale@scl,w
  3389  0D6D  3A80               	xorlw	128
  3390  0D6E  3E12               	addlw	-238
  3391  0D6F  1C03               	skipc
  3392  0D70  2E29               	goto	l2013
  3393                           
  3394                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3395  0D71  3003               	movlw	3
  3396  0D72  00BA               	movwf	??_scale
  3397  0D73  083A               	movf	??_scale,w
  3398  0D74  00A4               	movwf	___bmul@multiplicand
  3399  0D75  300A               	movlw	10
  3400  0D76  00F7               	movwf	___awdiv@divisor
  3401  0D77  3000               	movlw	0
  3402  0D78  00F8               	movwf	___awdiv@divisor+1
  3403  0D79  083F               	movf	scale@scl,w
  3404  0D7A  00F2               	movwf	___awmod@dividend
  3405  0D7B  01F3               	clrf	___awmod@dividend+1
  3406  0D7C  1BF2               	btfsc	___awmod@dividend,7
  3407  0D7D  03F3               	decf	___awmod@dividend+1,f
  3408  0D7E  3064               	movlw	100
  3409  0D7F  00F0               	movwf	___awmod@divisor
  3410  0D80  3000               	movlw	0
  3411  0D81  00F1               	movwf	___awmod@divisor+1
  3412  0D82  160A  118A  2279  120A  158A  	fcall	___awmod
  3413  0D87  0871               	movf	?___awmod+1,w
  3414  0D88  00FA               	movwf	___awdiv@dividend+1
  3415  0D89  0870               	movf	?___awmod,w
  3416  0D8A  00F9               	movwf	___awdiv@dividend
  3417  0D8B  160A  118A  2312  120A  158A  	fcall	___awdiv
  3418  0D90  0877               	movf	?___awdiv,w
  3419  0D91  3E09               	addlw	9
  3420  0D92  160A  118A  216F  120A  158A  	fcall	___bmul
  3421  0D97  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3422  0D98  0084               	movwf	4
  3423  0D99  160A  118A  200A  120A  158A  	fcall	stringdir
  3424  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3425  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3426  0DA0  00A7               	movwf	___ftmul@f1
  3427  0DA1  160A  118A  200A  120A  158A  	fcall	stringdir
  3428  0DA6  00A8               	movwf	___ftmul@f1+1
  3429  0DA7  160A  118A  200A  120A  158A  	fcall	stringdir
  3430  0DAC  00A9               	movwf	___ftmul@f1+2
  3431  0DAD  3003               	movlw	3
  3432  0DAE  00BB               	movwf	??_scale+1
  3433  0DAF  083B               	movf	??_scale+1,w
  3434  0DB0  00A4               	movwf	___bmul@multiplicand
  3435  0DB1  3064               	movlw	100
  3436  0DB2  00F7               	movwf	___awdiv@divisor
  3437  0DB3  3000               	movlw	0
  3438  0DB4  00F8               	movwf	___awdiv@divisor+1
  3439  0DB5  083F               	movf	scale@scl,w
  3440  0DB6  00F9               	movwf	___awdiv@dividend
  3441  0DB7  01FA               	clrf	___awdiv@dividend+1
  3442  0DB8  1BF9               	btfsc	___awdiv@dividend,7
  3443  0DB9  03FA               	decf	___awdiv@dividend+1,f
  3444  0DBA  160A  118A  2312  120A  158A  	fcall	___awdiv
  3445  0DBF  0877               	movf	?___awdiv,w
  3446  0DC0  3E12               	addlw	18
  3447  0DC1  160A  118A  216F  120A  158A  	fcall	___bmul
  3448  0DC6  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3449  0DC7  0084               	movwf	4
  3450  0DC8  160A  118A  200A  120A  158A  	fcall	stringdir
  3451  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0DCF  00AA               	movwf	___ftmul@f2
  3454  0DD0  160A  118A  200A  120A  158A  	fcall	stringdir
  3455  0DD5  00AB               	movwf	___ftmul@f2+1
  3456  0DD6  160A  118A  200A  120A  158A  	fcall	stringdir
  3457  0DDB  00AC               	movwf	___ftmul@f2+2
  3458  0DDC  160A  118A  2646  120A  158A  	fcall	___ftmul
  3459  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0DE3  0827               	movf	?___ftmul,w
  3462  0DE4  00BC               	movwf	_scale$552
  3463  0DE5  0828               	movf	?___ftmul+1,w
  3464  0DE6  00BD               	movwf	_scale$552+1
  3465  0DE7  0829               	movf	?___ftmul+2,w
  3466  0DE8  00BE               	movwf	_scale$552+2
  3467                           
  3468                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3469  0DE9  3003               	movlw	3
  3470  0DEA  00BA               	movwf	??_scale
  3471  0DEB  083A               	movf	??_scale,w
  3472  0DEC  00A4               	movwf	___bmul@multiplicand
  3473  0DED  083F               	movf	scale@scl,w
  3474  0DEE  00F2               	movwf	___awmod@dividend
  3475  0DEF  01F3               	clrf	___awmod@dividend+1
  3476  0DF0  1BF2               	btfsc	___awmod@dividend,7
  3477  0DF1  03F3               	decf	___awmod@dividend+1,f
  3478  0DF2  300A               	movlw	10
  3479  0DF3  00F0               	movwf	___awmod@divisor
  3480  0DF4  3000               	movlw	0
  3481  0DF5  00F1               	movwf	___awmod@divisor+1
  3482  0DF6  160A  118A  2279  120A  158A  	fcall	___awmod
  3483  0DFB  0870               	movf	?___awmod,w
  3484  0DFC  160A  118A  216F  120A  158A  	fcall	___bmul
  3485  0E01  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3486  0E02  0084               	movwf	4
  3487  0E03  160A  118A  200A  120A  158A  	fcall	stringdir
  3488  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  3489  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  3490  0E0A  00A7               	movwf	___ftmul@f1
  3491  0E0B  160A  118A  200A  120A  158A  	fcall	stringdir
  3492  0E10  00A8               	movwf	___ftmul@f1+1
  3493  0E11  160A  118A  200A  120A  158A  	fcall	stringdir
  3494  0E16  00A9               	movwf	___ftmul@f1+2
  3495  0E17  083C               	movf	_scale$552,w
  3496  0E18  00AA               	movwf	___ftmul@f2
  3497  0E19  083D               	movf	_scale$552+1,w
  3498  0E1A  00AB               	movwf	___ftmul@f2+1
  3499  0E1B  083E               	movf	_scale$552+2,w
  3500  0E1C  00AC               	movwf	___ftmul@f2+2
  3501  0E1D  160A  118A  2646   	fcall	___ftmul
  3502  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  3503  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  3504  0E22  0827               	movf	?___ftmul,w
  3505  0E23  00B7               	movwf	?_scale
  3506  0E24  0828               	movf	?___ftmul+1,w
  3507  0E25  00B8               	movwf	?_scale+1
  3508  0E26  0829               	movf	?___ftmul+2,w
  3509  0E27  00B9               	movwf	?_scale+2
  3510  0E28  0008               	return
  3511  0E29                     l2013:	
  3512                           
  3513                           ;doprnt.c: 432: else if(scl > 10)
  3514  0E29  083F               	movf	scale@scl,w
  3515  0E2A  3A80               	xorlw	128
  3516  0E2B  3E75               	addlw	-139
  3517  0E2C  1C03               	skipc
  3518  0E2D  2E97               	goto	l2019
  3519                           
  3520                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3521  0E2E  3003               	movlw	3
  3522  0E2F  00BA               	movwf	??_scale
  3523  0E30  083A               	movf	??_scale,w
  3524  0E31  00A4               	movwf	___bmul@multiplicand
  3525  0E32  083F               	movf	scale@scl,w
  3526  0E33  00F2               	movwf	___awmod@dividend
  3527  0E34  01F3               	clrf	___awmod@dividend+1
  3528  0E35  1BF2               	btfsc	___awmod@dividend,7
  3529  0E36  03F3               	decf	___awmod@dividend+1,f
  3530  0E37  300A               	movlw	10
  3531  0E38  00F0               	movwf	___awmod@divisor
  3532  0E39  3000               	movlw	0
  3533  0E3A  00F1               	movwf	___awmod@divisor+1
  3534  0E3B  160A  118A  2279  120A  158A  	fcall	___awmod
  3535  0E40  0870               	movf	?___awmod,w
  3536  0E41  160A  118A  216F  120A  158A  	fcall	___bmul
  3537  0E46  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3538  0E47  0084               	movwf	4
  3539  0E48  160A  118A  200A  120A  158A  	fcall	stringdir
  3540  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0E4F  00A7               	movwf	___ftmul@f1
  3543  0E50  160A  118A  200A  120A  158A  	fcall	stringdir
  3544  0E55  00A8               	movwf	___ftmul@f1+1
  3545  0E56  160A  118A  200A  120A  158A  	fcall	stringdir
  3546  0E5B  00A9               	movwf	___ftmul@f1+2
  3547  0E5C  3003               	movlw	3
  3548  0E5D  00BB               	movwf	??_scale+1
  3549  0E5E  083B               	movf	??_scale+1,w
  3550  0E5F  00A4               	movwf	___bmul@multiplicand
  3551  0E60  300A               	movlw	10
  3552  0E61  00F7               	movwf	___awdiv@divisor
  3553  0E62  3000               	movlw	0
  3554  0E63  00F8               	movwf	___awdiv@divisor+1
  3555  0E64  083F               	movf	scale@scl,w
  3556  0E65  00F9               	movwf	___awdiv@dividend
  3557  0E66  01FA               	clrf	___awdiv@dividend+1
  3558  0E67  1BF9               	btfsc	___awdiv@dividend,7
  3559  0E68  03FA               	decf	___awdiv@dividend+1,f
  3560  0E69  160A  118A  2312  120A  158A  	fcall	___awdiv
  3561  0E6E  0877               	movf	?___awdiv,w
  3562  0E6F  3E09               	addlw	9
  3563  0E70  160A  118A  216F  120A  158A  	fcall	___bmul
  3564  0E75  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3565  0E76  0084               	movwf	4
  3566  0E77  160A  118A  200A  120A  158A  	fcall	stringdir
  3567  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3568  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3569  0E7E  00AA               	movwf	___ftmul@f2
  3570  0E7F  160A  118A  200A  120A  158A  	fcall	stringdir
  3571  0E84  00AB               	movwf	___ftmul@f2+1
  3572  0E85  160A  118A  200A  120A  158A  	fcall	stringdir
  3573  0E8A  00AC               	movwf	___ftmul@f2+2
  3574  0E8B  160A  118A  2646   	fcall	___ftmul
  3575  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0E90  0827               	movf	?___ftmul,w
  3578  0E91  00B7               	movwf	?_scale
  3579  0E92  0828               	movf	?___ftmul+1,w
  3580  0E93  00B8               	movwf	?_scale+1
  3581  0E94  0829               	movf	?___ftmul+2,w
  3582  0E95  00B9               	movwf	?_scale+2
  3583  0E96  0008               	return
  3584  0E97                     l2019:	
  3585                           
  3586                           ;doprnt.c: 434: return _npowers_[scl];
  3587  0E97  3003               	movlw	3
  3588  0E98  00BA               	movwf	??_scale
  3589  0E99  083A               	movf	??_scale,w
  3590  0E9A  00A4               	movwf	___bmul@multiplicand
  3591  0E9B  083F               	movf	scale@scl,w
  3592  0E9C  160A  118A  216F  120A  158A  	fcall	___bmul
  3593  0EA1  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3594  0EA2  0084               	movwf	4
  3595  0EA3  160A  118A  200A  120A  158A  	fcall	stringdir
  3596  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0EAA  00B7               	movwf	?_scale
  3599  0EAB  160A  118A  200A  120A  158A  	fcall	stringdir
  3600  0EB0  00B8               	movwf	?_scale+1
  3601  0EB1  160A  118A  200A   	fcall	stringdir
  3602  0EB4  00B9               	movwf	?_scale+2
  3603  0EB5  0008               	return
  3604  0EB6                     l2023:	
  3605                           
  3606                           ;doprnt.c: 435: }
  3607                           ;doprnt.c: 436: if(scl>=110)
  3608  0EB6  083F               	movf	scale@scl,w
  3609  0EB7  3A80               	xorlw	128
  3610  0EB8  3E12               	addlw	-238
  3611  0EB9  1C03               	skipc
  3612  0EBA  2F73               	goto	l2031
  3613                           
  3614                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3615  0EBB  3003               	movlw	3
  3616  0EBC  00BA               	movwf	??_scale
  3617  0EBD  083A               	movf	??_scale,w
  3618  0EBE  00A4               	movwf	___bmul@multiplicand
  3619  0EBF  300A               	movlw	10
  3620  0EC0  00F7               	movwf	___awdiv@divisor
  3621  0EC1  3000               	movlw	0
  3622  0EC2  00F8               	movwf	___awdiv@divisor+1
  3623  0EC3  083F               	movf	scale@scl,w
  3624  0EC4  00F2               	movwf	___awmod@dividend
  3625  0EC5  01F3               	clrf	___awmod@dividend+1
  3626  0EC6  1BF2               	btfsc	___awmod@dividend,7
  3627  0EC7  03F3               	decf	___awmod@dividend+1,f
  3628  0EC8  3064               	movlw	100
  3629  0EC9  00F0               	movwf	___awmod@divisor
  3630  0ECA  3000               	movlw	0
  3631  0ECB  00F1               	movwf	___awmod@divisor+1
  3632  0ECC  160A  118A  2279  120A  158A  	fcall	___awmod
  3633  0ED1  0871               	movf	?___awmod+1,w
  3634  0ED2  00FA               	movwf	___awdiv@dividend+1
  3635  0ED3  0870               	movf	?___awmod,w
  3636  0ED4  00F9               	movwf	___awdiv@dividend
  3637  0ED5  160A  118A  2312  120A  158A  	fcall	___awdiv
  3638  0EDA  0877               	movf	?___awdiv,w
  3639  0EDB  3E09               	addlw	9
  3640  0EDC  160A  118A  216F  120A  158A  	fcall	___bmul
  3641  0EE1  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3642  0EE2  0084               	movwf	4
  3643  0EE3  160A  118A  200A  120A  158A  	fcall	stringdir
  3644  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0EEA  00A7               	movwf	___ftmul@f1
  3647  0EEB  160A  118A  200A  120A  158A  	fcall	stringdir
  3648  0EF0  00A8               	movwf	___ftmul@f1+1
  3649  0EF1  160A  118A  200A  120A  158A  	fcall	stringdir
  3650  0EF6  00A9               	movwf	___ftmul@f1+2
  3651  0EF7  3003               	movlw	3
  3652  0EF8  00BB               	movwf	??_scale+1
  3653  0EF9  083B               	movf	??_scale+1,w
  3654  0EFA  00A4               	movwf	___bmul@multiplicand
  3655  0EFB  3064               	movlw	100
  3656  0EFC  00F7               	movwf	___awdiv@divisor
  3657  0EFD  3000               	movlw	0
  3658  0EFE  00F8               	movwf	___awdiv@divisor+1
  3659  0EFF  083F               	movf	scale@scl,w
  3660  0F00  00F9               	movwf	___awdiv@dividend
  3661  0F01  01FA               	clrf	___awdiv@dividend+1
  3662  0F02  1BF9               	btfsc	___awdiv@dividend,7
  3663  0F03  03FA               	decf	___awdiv@dividend+1,f
  3664  0F04  160A  118A  2312  120A  158A  	fcall	___awdiv
  3665  0F09  0877               	movf	?___awdiv,w
  3666  0F0A  3E12               	addlw	18
  3667  0F0B  160A  118A  216F  120A  158A  	fcall	___bmul
  3668  0F10  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3669  0F11  0084               	movwf	4
  3670  0F12  160A  118A  200A  120A  158A  	fcall	stringdir
  3671  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  3672  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  3673  0F19  00AA               	movwf	___ftmul@f2
  3674  0F1A  160A  118A  200A  120A  158A  	fcall	stringdir
  3675  0F1F  00AB               	movwf	___ftmul@f2+1
  3676  0F20  160A  118A  200A  120A  158A  	fcall	stringdir
  3677  0F25  00AC               	movwf	___ftmul@f2+2
  3678  0F26  160A  118A  2646  120A  158A  	fcall	___ftmul
  3679  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0F2D  0827               	movf	?___ftmul,w
  3682  0F2E  00BC               	movwf	_scale$552
  3683  0F2F  0828               	movf	?___ftmul+1,w
  3684  0F30  00BD               	movwf	_scale$552+1
  3685  0F31  0829               	movf	?___ftmul+2,w
  3686  0F32  00BE               	movwf	_scale$552+2
  3687                           
  3688                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3689  0F33  3003               	movlw	3
  3690  0F34  00BA               	movwf	??_scale
  3691  0F35  083A               	movf	??_scale,w
  3692  0F36  00A4               	movwf	___bmul@multiplicand
  3693  0F37  083F               	movf	scale@scl,w
  3694  0F38  00F2               	movwf	___awmod@dividend
  3695  0F39  01F3               	clrf	___awmod@dividend+1
  3696  0F3A  1BF2               	btfsc	___awmod@dividend,7
  3697  0F3B  03F3               	decf	___awmod@dividend+1,f
  3698  0F3C  300A               	movlw	10
  3699  0F3D  00F0               	movwf	___awmod@divisor
  3700  0F3E  3000               	movlw	0
  3701  0F3F  00F1               	movwf	___awmod@divisor+1
  3702  0F40  160A  118A  2279  120A  158A  	fcall	___awmod
  3703  0F45  0870               	movf	?___awmod,w
  3704  0F46  160A  118A  216F  120A  158A  	fcall	___bmul
  3705  0F4B  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3706  0F4C  0084               	movwf	4
  3707  0F4D  160A  118A  200A  120A  158A  	fcall	stringdir
  3708  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0F54  00A7               	movwf	___ftmul@f1
  3711  0F55  160A  118A  200A  120A  158A  	fcall	stringdir
  3712  0F5A  00A8               	movwf	___ftmul@f1+1
  3713  0F5B  160A  118A  200A  120A  158A  	fcall	stringdir
  3714  0F60  00A9               	movwf	___ftmul@f1+2
  3715  0F61  083C               	movf	_scale$552,w
  3716  0F62  00AA               	movwf	___ftmul@f2
  3717  0F63  083D               	movf	_scale$552+1,w
  3718  0F64  00AB               	movwf	___ftmul@f2+1
  3719  0F65  083E               	movf	_scale$552+2,w
  3720  0F66  00AC               	movwf	___ftmul@f2+2
  3721  0F67  160A  118A  2646   	fcall	___ftmul
  3722  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3723  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3724  0F6C  0827               	movf	?___ftmul,w
  3725  0F6D  00B7               	movwf	?_scale
  3726  0F6E  0828               	movf	?___ftmul+1,w
  3727  0F6F  00B8               	movwf	?_scale+1
  3728  0F70  0829               	movf	?___ftmul+2,w
  3729  0F71  00B9               	movwf	?_scale+2
  3730  0F72  0008               	return
  3731  0F73                     l2031:	
  3732                           
  3733                           ;doprnt.c: 438: else if(scl > 10)
  3734  0F73  083F               	movf	scale@scl,w
  3735  0F74  3A80               	xorlw	128
  3736  0F75  3E75               	addlw	-139
  3737  0F76  1C03               	skipc
  3738  0F77  2FE1               	goto	l2037
  3739                           
  3740                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3741  0F78  3003               	movlw	3
  3742  0F79  00BA               	movwf	??_scale
  3743  0F7A  083A               	movf	??_scale,w
  3744  0F7B  00A4               	movwf	___bmul@multiplicand
  3745  0F7C  083F               	movf	scale@scl,w
  3746  0F7D  00F2               	movwf	___awmod@dividend
  3747  0F7E  01F3               	clrf	___awmod@dividend+1
  3748  0F7F  1BF2               	btfsc	___awmod@dividend,7
  3749  0F80  03F3               	decf	___awmod@dividend+1,f
  3750  0F81  300A               	movlw	10
  3751  0F82  00F0               	movwf	___awmod@divisor
  3752  0F83  3000               	movlw	0
  3753  0F84  00F1               	movwf	___awmod@divisor+1
  3754  0F85  160A  118A  2279  120A  158A  	fcall	___awmod
  3755  0F8A  0870               	movf	?___awmod,w
  3756  0F8B  160A  118A  216F  120A  158A  	fcall	___bmul
  3757  0F90  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3758  0F91  0084               	movwf	4
  3759  0F92  160A  118A  200A  120A  158A  	fcall	stringdir
  3760  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  3762  0F99  00A7               	movwf	___ftmul@f1
  3763  0F9A  160A  118A  200A  120A  158A  	fcall	stringdir
  3764  0F9F  00A8               	movwf	___ftmul@f1+1
  3765  0FA0  160A  118A  200A  120A  158A  	fcall	stringdir
  3766  0FA5  00A9               	movwf	___ftmul@f1+2
  3767  0FA6  3003               	movlw	3
  3768  0FA7  00BB               	movwf	??_scale+1
  3769  0FA8  083B               	movf	??_scale+1,w
  3770  0FA9  00A4               	movwf	___bmul@multiplicand
  3771  0FAA  300A               	movlw	10
  3772  0FAB  00F7               	movwf	___awdiv@divisor
  3773  0FAC  3000               	movlw	0
  3774  0FAD  00F8               	movwf	___awdiv@divisor+1
  3775  0FAE  083F               	movf	scale@scl,w
  3776  0FAF  00F9               	movwf	___awdiv@dividend
  3777  0FB0  01FA               	clrf	___awdiv@dividend+1
  3778  0FB1  1BF9               	btfsc	___awdiv@dividend,7
  3779  0FB2  03FA               	decf	___awdiv@dividend+1,f
  3780  0FB3  160A  118A  2312  120A  158A  	fcall	___awdiv
  3781  0FB8  0877               	movf	?___awdiv,w
  3782  0FB9  3E09               	addlw	9
  3783  0FBA  160A  118A  216F  120A  158A  	fcall	___bmul
  3784  0FBF  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3785  0FC0  0084               	movwf	4
  3786  0FC1  160A  118A  200A  120A  158A  	fcall	stringdir
  3787  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  3788  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  3789  0FC8  00AA               	movwf	___ftmul@f2
  3790  0FC9  160A  118A  200A  120A  158A  	fcall	stringdir
  3791  0FCE  00AB               	movwf	___ftmul@f2+1
  3792  0FCF  160A  118A  200A  120A  158A  	fcall	stringdir
  3793  0FD4  00AC               	movwf	___ftmul@f2+2
  3794  0FD5  160A  118A  2646   	fcall	___ftmul
  3795  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  3796  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  3797  0FDA  0827               	movf	?___ftmul,w
  3798  0FDB  00B7               	movwf	?_scale
  3799  0FDC  0828               	movf	?___ftmul+1,w
  3800  0FDD  00B8               	movwf	?_scale+1
  3801  0FDE  0829               	movf	?___ftmul+2,w
  3802  0FDF  00B9               	movwf	?_scale+2
  3803  0FE0  0008               	return
  3804  0FE1                     l2037:	
  3805                           
  3806                           ;doprnt.c: 440: return _powers_[scl];
  3807  0FE1  3003               	movlw	3
  3808  0FE2  00BA               	movwf	??_scale
  3809  0FE3  083A               	movf	??_scale,w
  3810  0FE4  00A4               	movwf	___bmul@multiplicand
  3811  0FE5  083F               	movf	scale@scl,w
  3812  0FE6  160A  118A  216F  120A  158A  	fcall	___bmul
  3813  0FEB  3E29               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3814  0FEC  0084               	movwf	4
  3815  0FED  160A  118A  200A  120A  158A  	fcall	stringdir
  3816  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3817  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  3818  0FF4  00B7               	movwf	?_scale
  3819  0FF5  160A  118A  200A  120A  158A  	fcall	stringdir
  3820  0FFA  00B8               	movwf	?_scale+1
  3821  0FFB  160A  118A  200A   	fcall	stringdir
  3822  0FFE  00B9               	movwf	?_scale+2
  3823  0FFF  0008               	return
  3824  1000                     __end_of_scale:	
  3825                           
  3826                           	psect	text3
  3827  1161                     __ptext3:	
  3828 ;; *************** function _isdigit *****************
  3829 ;; Defined at:
  3830 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  c               1    wreg     unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  c               1    1[COMMON] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, status,2, status,0
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3844 ;;      Params:         0       0       0       0       0
  3845 ;;      Locals:         2       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0
  3847 ;;      Totals:         2       0       0       0       0
  3848 ;;Total ram usage:        2 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_sprintf
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function _isdigit
  3859  1161                     _isdigit:	
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3863                           ;isdigit@c stored from wreg
  3864  1161  00F1               	movwf	isdigit@c
  3865  1162  01F0               	clrf	_isdigit$332
  3866  1163  303A               	movlw	58
  3867  1164  0271               	subwf	isdigit@c,w
  3868  1165  1803               	skipnc
  3869  1166  296D               	goto	l2049
  3870  1167  3030               	movlw	48
  3871  1168  0271               	subwf	isdigit@c,w
  3872  1169  1C03               	skipc
  3873  116A  296D               	goto	l2049
  3874  116B  01F0               	clrf	_isdigit$332
  3875  116C  0AF0               	incf	_isdigit$332,f
  3876  116D                     l2049:	
  3877  116D  0C70               	rrf	_isdigit$332,w
  3878  116E  0008               	return
  3879  116F                     __end_of_isdigit:	
  3880                           
  3881                           	psect	text4
  3882  0BCB                     __ptext4:	
  3883 ;; *************** function _fround *****************
  3884 ;; Defined at:
  3885 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  prec            1    wreg     unsigned char 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  prec            1   38[BANK0 ] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  3   23[BANK0 ] unsigned char 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3899 ;;      Params:         0       3       0       0       0
  3900 ;;      Locals:         0       7       0       0       0
  3901 ;;      Temps:          0       6       0       0       0
  3902 ;;      Totals:         0      16       0       0       0
  3903 ;;Total ram usage:       16 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    2
  3906 ;; This function calls:
  3907 ;;		___awdiv
  3908 ;;		___awmod
  3909 ;;		___bmul
  3910 ;;		___ftmul
  3911 ;; This function is called by:
  3912 ;;		_sprintf
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _fround
  3918  0BCB                     _fround:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3922                           ;fround@prec stored from wreg
  3923  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  3924  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  3925  0BCD  00C6               	movwf	fround@prec
  3926                           
  3927                           ;doprnt.c: 413: if(prec>=110)
  3928  0BCE  306E               	movlw	110
  3929  0BCF  0246               	subwf	fround@prec,w
  3930  0BD0  1C03               	skipc
  3931  0BD1  2CA9               	goto	l1989
  3932                           
  3933                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3934  0BD2  3003               	movlw	3
  3935  0BD3  00BA               	movwf	??_fround
  3936  0BD4  083A               	movf	??_fround,w
  3937  0BD5  00A4               	movwf	___bmul@multiplicand
  3938  0BD6  300A               	movlw	10
  3939  0BD7  00F7               	movwf	___awdiv@divisor
  3940  0BD8  3000               	movlw	0
  3941  0BD9  00F8               	movwf	___awdiv@divisor+1
  3942  0BDA  0846               	movf	fround@prec,w
  3943  0BDB  00BB               	movwf	??_fround+1
  3944  0BDC  01BC               	clrf	??_fround+2
  3945  0BDD  083B               	movf	??_fround+1,w
  3946  0BDE  00F2               	movwf	___awmod@dividend
  3947  0BDF  083C               	movf	??_fround+2,w
  3948  0BE0  00F3               	movwf	___awmod@dividend+1
  3949  0BE1  3064               	movlw	100
  3950  0BE2  00F0               	movwf	___awmod@divisor
  3951  0BE3  3000               	movlw	0
  3952  0BE4  00F1               	movwf	___awmod@divisor+1
  3953  0BE5  160A  118A  2279  120A  158A  	fcall	___awmod
  3954  0BEA  0871               	movf	?___awmod+1,w
  3955  0BEB  00FA               	movwf	___awdiv@dividend+1
  3956  0BEC  0870               	movf	?___awmod,w
  3957  0BED  00F9               	movwf	___awdiv@dividend
  3958  0BEE  160A  118A  2312  120A  158A  	fcall	___awdiv
  3959  0BF3  0877               	movf	?___awdiv,w
  3960  0BF4  3E09               	addlw	9
  3961  0BF5  160A  118A  216F  120A  158A  	fcall	___bmul
  3962  0BFA  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3963  0BFB  0084               	movwf	4
  3964  0BFC  160A  118A  200A  120A  158A  	fcall	stringdir
  3965  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  3966  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  3967  0C03  00A7               	movwf	___ftmul@f1
  3968  0C04  160A  118A  200A  120A  158A  	fcall	stringdir
  3969  0C09  00A8               	movwf	___ftmul@f1+1
  3970  0C0A  160A  118A  200A  120A  158A  	fcall	stringdir
  3971  0C0F  00A9               	movwf	___ftmul@f1+2
  3972  0C10  3003               	movlw	3
  3973  0C11  00BD               	movwf	??_fround+3
  3974  0C12  083D               	movf	??_fround+3,w
  3975  0C13  00A4               	movwf	___bmul@multiplicand
  3976  0C14  3064               	movlw	100
  3977  0C15  00F7               	movwf	___awdiv@divisor
  3978  0C16  3000               	movlw	0
  3979  0C17  00F8               	movwf	___awdiv@divisor+1
  3980  0C18  0846               	movf	fround@prec,w
  3981  0C19  00BE               	movwf	??_fround+4
  3982  0C1A  01BF               	clrf	??_fround+5
  3983  0C1B  083E               	movf	??_fround+4,w
  3984  0C1C  00F9               	movwf	___awdiv@dividend
  3985  0C1D  083F               	movf	??_fround+5,w
  3986  0C1E  00FA               	movwf	___awdiv@dividend+1
  3987  0C1F  160A  118A  2312  120A  158A  	fcall	___awdiv
  3988  0C24  0877               	movf	?___awdiv,w
  3989  0C25  3E12               	addlw	18
  3990  0C26  160A  118A  216F  120A  158A  	fcall	___bmul
  3991  0C2B  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3992  0C2C  0084               	movwf	4
  3993  0C2D  160A  118A  200A  120A  158A  	fcall	stringdir
  3994  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  3995  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  3996  0C34  00AA               	movwf	___ftmul@f2
  3997  0C35  160A  118A  200A  120A  158A  	fcall	stringdir
  3998  0C3A  00AB               	movwf	___ftmul@f2+1
  3999  0C3B  160A  118A  200A  120A  158A  	fcall	stringdir
  4000  0C40  00AC               	movwf	___ftmul@f2+2
  4001  0C41  160A  118A  2646  120A  158A  	fcall	___ftmul
  4002  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0C48  0827               	movf	?___ftmul,w
  4005  0C49  00C3               	movwf	_fround$550
  4006  0C4A  0828               	movf	?___ftmul+1,w
  4007  0C4B  00C4               	movwf	_fround$550+1
  4008  0C4C  0829               	movf	?___ftmul+2,w
  4009  0C4D  00C5               	movwf	_fround$550+2
  4010                           
  4011                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4012  0C4E  3003               	movlw	3
  4013  0C4F  00BA               	movwf	??_fround
  4014  0C50  083A               	movf	??_fround,w
  4015  0C51  00A4               	movwf	___bmul@multiplicand
  4016  0C52  0846               	movf	fround@prec,w
  4017  0C53  00BB               	movwf	??_fround+1
  4018  0C54  01BC               	clrf	??_fround+2
  4019  0C55  083B               	movf	??_fround+1,w
  4020  0C56  00F2               	movwf	___awmod@dividend
  4021  0C57  083C               	movf	??_fround+2,w
  4022  0C58  00F3               	movwf	___awmod@dividend+1
  4023  0C59  300A               	movlw	10
  4024  0C5A  00F0               	movwf	___awmod@divisor
  4025  0C5B  3000               	movlw	0
  4026  0C5C  00F1               	movwf	___awmod@divisor+1
  4027  0C5D  160A  118A  2279  120A  158A  	fcall	___awmod
  4028  0C62  0870               	movf	?___awmod,w
  4029  0C63  160A  118A  216F  120A  158A  	fcall	___bmul
  4030  0C68  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4031  0C69  0084               	movwf	4
  4032  0C6A  160A  118A  200A  120A  158A  	fcall	stringdir
  4033  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  4034  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  4035  0C71  00A7               	movwf	___ftmul@f1
  4036  0C72  160A  118A  200A  120A  158A  	fcall	stringdir
  4037  0C77  00A8               	movwf	___ftmul@f1+1
  4038  0C78  160A  118A  200A  120A  158A  	fcall	stringdir
  4039  0C7D  00A9               	movwf	___ftmul@f1+2
  4040  0C7E  0843               	movf	_fround$550,w
  4041  0C7F  00AA               	movwf	___ftmul@f2
  4042  0C80  0844               	movf	_fround$550+1,w
  4043  0C81  00AB               	movwf	___ftmul@f2+1
  4044  0C82  0845               	movf	_fround$550+2,w
  4045  0C83  00AC               	movwf	___ftmul@f2+2
  4046  0C84  160A  118A  2646  120A  158A  	fcall	___ftmul
  4047  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0C8B  0827               	movf	?___ftmul,w
  4050  0C8C  00C0               	movwf	_fround$551
  4051  0C8D  0828               	movf	?___ftmul+1,w
  4052  0C8E  00C1               	movwf	_fround$551+1
  4053  0C8F  0829               	movf	?___ftmul+2,w
  4054  0C90  00C2               	movwf	_fround$551+2
  4055                           
  4056                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4057  0C91  3000               	movlw	0
  4058  0C92  00A7               	movwf	___ftmul@f1
  4059  0C93  3000               	movlw	0
  4060  0C94  00A8               	movwf	___ftmul@f1+1
  4061  0C95  303F               	movlw	63
  4062  0C96  00A9               	movwf	___ftmul@f1+2
  4063  0C97  0840               	movf	_fround$551,w
  4064  0C98  00AA               	movwf	___ftmul@f2
  4065  0C99  0841               	movf	_fround$551+1,w
  4066  0C9A  00AB               	movwf	___ftmul@f2+1
  4067  0C9B  0842               	movf	_fround$551+2,w
  4068  0C9C  00AC               	movwf	___ftmul@f2+2
  4069  0C9D  160A  118A  2646   	fcall	___ftmul
  4070  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  4071  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  4072  0CA2  0827               	movf	?___ftmul,w
  4073  0CA3  00B7               	movwf	?_fround
  4074  0CA4  0828               	movf	?___ftmul+1,w
  4075  0CA5  00B8               	movwf	?_fround+1
  4076  0CA6  0829               	movf	?___ftmul+2,w
  4077  0CA7  00B9               	movwf	?_fround+2
  4078  0CA8  0008               	return
  4079  0CA9                     l1989:	
  4080                           
  4081                           ;doprnt.c: 415: else if(prec > 10)
  4082  0CA9  300B               	movlw	11
  4083  0CAA  0246               	subwf	fround@prec,w
  4084  0CAB  1C03               	skipc
  4085  0CAC  2D33               	goto	l1997
  4086                           
  4087                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4088  0CAD  3003               	movlw	3
  4089  0CAE  00BA               	movwf	??_fround
  4090  0CAF  083A               	movf	??_fround,w
  4091  0CB0  00A4               	movwf	___bmul@multiplicand
  4092  0CB1  0846               	movf	fround@prec,w
  4093  0CB2  00BB               	movwf	??_fround+1
  4094  0CB3  01BC               	clrf	??_fround+2
  4095  0CB4  083B               	movf	??_fround+1,w
  4096  0CB5  00F2               	movwf	___awmod@dividend
  4097  0CB6  083C               	movf	??_fround+2,w
  4098  0CB7  00F3               	movwf	___awmod@dividend+1
  4099  0CB8  300A               	movlw	10
  4100  0CB9  00F0               	movwf	___awmod@divisor
  4101  0CBA  3000               	movlw	0
  4102  0CBB  00F1               	movwf	___awmod@divisor+1
  4103  0CBC  160A  118A  2279  120A  158A  	fcall	___awmod
  4104  0CC1  0870               	movf	?___awmod,w
  4105  0CC2  160A  118A  216F  120A  158A  	fcall	___bmul
  4106  0CC7  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4107  0CC8  0084               	movwf	4
  4108  0CC9  160A  118A  200A  120A  158A  	fcall	stringdir
  4109  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0CD0  00A7               	movwf	___ftmul@f1
  4112  0CD1  160A  118A  200A  120A  158A  	fcall	stringdir
  4113  0CD6  00A8               	movwf	___ftmul@f1+1
  4114  0CD7  160A  118A  200A  120A  158A  	fcall	stringdir
  4115  0CDC  00A9               	movwf	___ftmul@f1+2
  4116  0CDD  3003               	movlw	3
  4117  0CDE  00BD               	movwf	??_fround+3
  4118  0CDF  083D               	movf	??_fround+3,w
  4119  0CE0  00A4               	movwf	___bmul@multiplicand
  4120  0CE1  300A               	movlw	10
  4121  0CE2  00F7               	movwf	___awdiv@divisor
  4122  0CE3  3000               	movlw	0
  4123  0CE4  00F8               	movwf	___awdiv@divisor+1
  4124  0CE5  0846               	movf	fround@prec,w
  4125  0CE6  00BE               	movwf	??_fround+4
  4126  0CE7  01BF               	clrf	??_fround+5
  4127  0CE8  083E               	movf	??_fround+4,w
  4128  0CE9  00F9               	movwf	___awdiv@dividend
  4129  0CEA  083F               	movf	??_fround+5,w
  4130  0CEB  00FA               	movwf	___awdiv@dividend+1
  4131  0CEC  160A  118A  2312  120A  158A  	fcall	___awdiv
  4132  0CF1  0877               	movf	?___awdiv,w
  4133  0CF2  3E09               	addlw	9
  4134  0CF3  160A  118A  216F  120A  158A  	fcall	___bmul
  4135  0CF8  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4136  0CF9  0084               	movwf	4
  4137  0CFA  160A  118A  200A  120A  158A  	fcall	stringdir
  4138  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0D01  00AA               	movwf	___ftmul@f2
  4141  0D02  160A  118A  200A  120A  158A  	fcall	stringdir
  4142  0D07  00AB               	movwf	___ftmul@f2+1
  4143  0D08  160A  118A  200A  120A  158A  	fcall	stringdir
  4144  0D0D  00AC               	movwf	___ftmul@f2+2
  4145  0D0E  160A  118A  2646  120A  158A  	fcall	___ftmul
  4146  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0D15  0827               	movf	?___ftmul,w
  4149  0D16  00C3               	movwf	_fround$550
  4150  0D17  0828               	movf	?___ftmul+1,w
  4151  0D18  00C4               	movwf	_fround$550+1
  4152  0D19  0829               	movf	?___ftmul+2,w
  4153  0D1A  00C5               	movwf	_fround$550+2
  4154                           
  4155                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4156  0D1B  3000               	movlw	0
  4157  0D1C  00A7               	movwf	___ftmul@f1
  4158  0D1D  3000               	movlw	0
  4159  0D1E  00A8               	movwf	___ftmul@f1+1
  4160  0D1F  303F               	movlw	63
  4161  0D20  00A9               	movwf	___ftmul@f1+2
  4162  0D21  0843               	movf	_fround$550,w
  4163  0D22  00AA               	movwf	___ftmul@f2
  4164  0D23  0844               	movf	_fround$550+1,w
  4165  0D24  00AB               	movwf	___ftmul@f2+1
  4166  0D25  0845               	movf	_fround$550+2,w
  4167  0D26  00AC               	movwf	___ftmul@f2+2
  4168  0D27  160A  118A  2646   	fcall	___ftmul
  4169  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0D2C  0827               	movf	?___ftmul,w
  4172  0D2D  00B7               	movwf	?_fround
  4173  0D2E  0828               	movf	?___ftmul+1,w
  4174  0D2F  00B8               	movwf	?_fround+1
  4175  0D30  0829               	movf	?___ftmul+2,w
  4176  0D31  00B9               	movwf	?_fround+2
  4177  0D32  0008               	return
  4178  0D33                     l1997:	
  4179                           
  4180                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4181  0D33  3000               	movlw	0
  4182  0D34  00A7               	movwf	___ftmul@f1
  4183  0D35  3000               	movlw	0
  4184  0D36  00A8               	movwf	___ftmul@f1+1
  4185  0D37  303F               	movlw	63
  4186  0D38  00A9               	movwf	___ftmul@f1+2
  4187  0D39  3003               	movlw	3
  4188  0D3A  00BA               	movwf	??_fround
  4189  0D3B  083A               	movf	??_fround,w
  4190  0D3C  00A4               	movwf	___bmul@multiplicand
  4191  0D3D  0846               	movf	fround@prec,w
  4192  0D3E  160A  118A  216F  120A  158A  	fcall	___bmul
  4193  0D43  3E50               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4194  0D44  0084               	movwf	4
  4195  0D45  160A  118A  200A  120A  158A  	fcall	stringdir
  4196  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  4198  0D4C  00AA               	movwf	___ftmul@f2
  4199  0D4D  160A  118A  200A  120A  158A  	fcall	stringdir
  4200  0D52  00AB               	movwf	___ftmul@f2+1
  4201  0D53  160A  118A  200A  120A  158A  	fcall	stringdir
  4202  0D58  00AC               	movwf	___ftmul@f2+2
  4203  0D59  160A  118A  2646   	fcall	___ftmul
  4204  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0D5E  0827               	movf	?___ftmul,w
  4207  0D5F  00B7               	movwf	?_fround
  4208  0D60  0828               	movf	?___ftmul+1,w
  4209  0D61  00B8               	movwf	?_fround+1
  4210  0D62  0829               	movf	?___ftmul+2,w
  4211  0D63  00B9               	movwf	?_fround+2
  4212  0D64  0008               	return
  4213  0D65                     __end_of_fround:	
  4214                           
  4215                           	psect	text5
  4216  1646                     __ptext5:	
  4217 ;; *************** function ___ftmul *****************
  4218 ;; Defined at:
  4219 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  f1              3    7[BANK0 ] float 
  4222 ;;  f2              3   10[BANK0 ] float 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  4225 ;;  sign            1   22[BANK0 ] unsigned char 
  4226 ;;  cntr            1   21[BANK0 ] unsigned char 
  4227 ;;  exp             1   17[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  3    7[BANK0 ] float 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4237 ;;      Params:         0       6       0       0       0
  4238 ;;      Locals:         0       6       0       0       0
  4239 ;;      Temps:          0       4       0       0       0
  4240 ;;      Totals:         0      16       0       0       0
  4241 ;;Total ram usage:       16 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    1
  4244 ;; This function calls:
  4245 ;;		___ftpack
  4246 ;; This function is called by:
  4247 ;;		_fround
  4248 ;;		_scale
  4249 ;;		_sprintf
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function ___ftmul
  4255  1646                     ___ftmul:	
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4259  1646  1283               	bcf	3,5	;RP0=0, select bank0
  4260  1647  1303               	bcf	3,6	;RP1=0, select bank0
  4261  1648  0827               	movf	___ftmul@f1,w
  4262  1649  00AD               	movwf	??___ftmul
  4263  164A  0828               	movf	___ftmul@f1+1,w
  4264  164B  00AE               	movwf	??___ftmul+1
  4265  164C  0829               	movf	___ftmul@f1+2,w
  4266  164D  00AF               	movwf	??___ftmul+2
  4267  164E  1003               	clrc
  4268  164F  0D2E               	rlf	??___ftmul+1,w
  4269  1650  0D2F               	rlf	??___ftmul+2,w
  4270  1651  00B0               	movwf	??___ftmul+3
  4271  1652  0830               	movf	??___ftmul+3,w
  4272  1653  00B1               	movwf	___ftmul@exp
  4273  1654  0831               	movf	___ftmul@exp,w
  4274  1655  1D03               	btfss	3,2
  4275  1656  2E5E               	goto	l1905
  4276  1657  3000               	movlw	0
  4277  1658  00A7               	movwf	?___ftmul
  4278  1659  3000               	movlw	0
  4279  165A  00A8               	movwf	?___ftmul+1
  4280  165B  3000               	movlw	0
  4281  165C  00A9               	movwf	?___ftmul+2
  4282  165D  0008               	return
  4283  165E                     l1905:	
  4284  165E  082A               	movf	___ftmul@f2,w
  4285  165F  00AD               	movwf	??___ftmul
  4286  1660  082B               	movf	___ftmul@f2+1,w
  4287  1661  00AE               	movwf	??___ftmul+1
  4288  1662  082C               	movf	___ftmul@f2+2,w
  4289  1663  00AF               	movwf	??___ftmul+2
  4290  1664  1003               	clrc
  4291  1665  0D2E               	rlf	??___ftmul+1,w
  4292  1666  0D2F               	rlf	??___ftmul+2,w
  4293  1667  00B0               	movwf	??___ftmul+3
  4294  1668  0830               	movf	??___ftmul+3,w
  4295  1669  00B6               	movwf	___ftmul@sign
  4296  166A  0836               	movf	___ftmul@sign,w
  4297  166B  1D03               	btfss	3,2
  4298  166C  2E74               	goto	l1911
  4299  166D  3000               	movlw	0
  4300  166E  00A7               	movwf	?___ftmul
  4301  166F  3000               	movlw	0
  4302  1670  00A8               	movwf	?___ftmul+1
  4303  1671  3000               	movlw	0
  4304  1672  00A9               	movwf	?___ftmul+2
  4305  1673  0008               	return
  4306  1674                     l1911:	
  4307  1674  0836               	movf	___ftmul@sign,w
  4308  1675  3E7B               	addlw	123
  4309  1676  00AD               	movwf	??___ftmul
  4310  1677  082D               	movf	??___ftmul,w
  4311  1678  07B1               	addwf	___ftmul@exp,f
  4312  1679  0827               	movf	___ftmul@f1,w
  4313  167A  00AD               	movwf	??___ftmul
  4314  167B  0828               	movf	___ftmul@f1+1,w
  4315  167C  00AE               	movwf	??___ftmul+1
  4316  167D  0829               	movf	___ftmul@f1+2,w
  4317  167E  00AF               	movwf	??___ftmul+2
  4318  167F  3010               	movlw	16
  4319  1680                     u2735:	
  4320  1680  1003               	clrc
  4321  1681  0CAF               	rrf	??___ftmul+2,f
  4322  1682  0CAE               	rrf	??___ftmul+1,f
  4323  1683  0CAD               	rrf	??___ftmul,f
  4324  1684  3EFF               	addlw	-1
  4325  1685  1D03               	skipz
  4326  1686  2E80               	goto	u2735
  4327  1687  082D               	movf	??___ftmul,w
  4328  1688  00B0               	movwf	??___ftmul+3
  4329  1689  0830               	movf	??___ftmul+3,w
  4330  168A  00B6               	movwf	___ftmul@sign
  4331  168B  082A               	movf	___ftmul@f2,w
  4332  168C  00AD               	movwf	??___ftmul
  4333  168D  082B               	movf	___ftmul@f2+1,w
  4334  168E  00AE               	movwf	??___ftmul+1
  4335  168F  082C               	movf	___ftmul@f2+2,w
  4336  1690  00AF               	movwf	??___ftmul+2
  4337  1691  3010               	movlw	16
  4338  1692                     u2745:	
  4339  1692  1003               	clrc
  4340  1693  0CAF               	rrf	??___ftmul+2,f
  4341  1694  0CAE               	rrf	??___ftmul+1,f
  4342  1695  0CAD               	rrf	??___ftmul,f
  4343  1696  3EFF               	addlw	-1
  4344  1697  1D03               	skipz
  4345  1698  2E92               	goto	u2745
  4346  1699  082D               	movf	??___ftmul,w
  4347  169A  00B0               	movwf	??___ftmul+3
  4348  169B  0830               	movf	??___ftmul+3,w
  4349  169C  06B6               	xorwf	___ftmul@sign,f
  4350  169D  3080               	movlw	128
  4351  169E  00AD               	movwf	??___ftmul
  4352  169F  082D               	movf	??___ftmul,w
  4353  16A0  05B6               	andwf	___ftmul@sign,f
  4354  16A1  17A8               	bsf	___ftmul@f1+1,7
  4355  16A2  17AB               	bsf	___ftmul@f2+1,7
  4356  16A3  30FF               	movlw	255
  4357  16A4  05AA               	andwf	___ftmul@f2,f
  4358  16A5  30FF               	movlw	255
  4359  16A6  05AB               	andwf	___ftmul@f2+1,f
  4360  16A7  3000               	movlw	0
  4361  16A8  05AC               	andwf	___ftmul@f2+2,f
  4362  16A9  3000               	movlw	0
  4363  16AA  00B2               	movwf	___ftmul@f3_as_product
  4364  16AB  3000               	movlw	0
  4365  16AC  00B3               	movwf	___ftmul@f3_as_product+1
  4366  16AD  3000               	movlw	0
  4367  16AE  00B4               	movwf	___ftmul@f3_as_product+2
  4368  16AF  3007               	movlw	7
  4369  16B0  00AD               	movwf	??___ftmul
  4370  16B1  082D               	movf	??___ftmul,w
  4371  16B2  00B5               	movwf	___ftmul@cntr
  4372  16B3                     l1923:	
  4373  16B3  1C27               	btfss	___ftmul@f1,0
  4374  16B4  2EC3               	goto	l1927
  4375  16B5  082A               	movf	___ftmul@f2,w
  4376  16B6  07B2               	addwf	___ftmul@f3_as_product,f
  4377  16B7  082B               	movf	___ftmul@f2+1,w
  4378  16B8  1103               	clrz
  4379  16B9  1803               	skipnc
  4380  16BA  0A2B               	incf	___ftmul@f2+1,w
  4381  16BB  1D03               	btfss	3,2
  4382  16BC  07B3               	addwf	___ftmul@f3_as_product+1,f
  4383  16BD  082C               	movf	___ftmul@f2+2,w
  4384  16BE  1103               	clrz
  4385  16BF  1803               	skipnc
  4386  16C0  0A2C               	incf	___ftmul@f2+2,w
  4387  16C1  1D03               	btfss	3,2
  4388  16C2  07B4               	addwf	___ftmul@f3_as_product+2,f
  4389  16C3                     l1927:	
  4390  16C3  3001               	movlw	1
  4391  16C4                     u2775:	
  4392  16C4  1003               	clrc
  4393  16C5  0CA9               	rrf	___ftmul@f1+2,f
  4394  16C6  0CA8               	rrf	___ftmul@f1+1,f
  4395  16C7  0CA7               	rrf	___ftmul@f1,f
  4396  16C8  3EFF               	addlw	-1
  4397  16C9  1D03               	skipz
  4398  16CA  2EC4               	goto	u2775
  4399  16CB  3001               	movlw	1
  4400  16CC                     u2785:	
  4401  16CC  1003               	clrc
  4402  16CD  0DAA               	rlf	___ftmul@f2,f
  4403  16CE  0DAB               	rlf	___ftmul@f2+1,f
  4404  16CF  0DAC               	rlf	___ftmul@f2+2,f
  4405  16D0  3EFF               	addlw	-1
  4406  16D1  1D03               	skipz
  4407  16D2  2ECC               	goto	u2785
  4408  16D3  3001               	movlw	1
  4409  16D4  02B5               	subwf	___ftmul@cntr,f
  4410  16D5  1D03               	btfss	3,2
  4411  16D6  2EB3               	goto	l1923
  4412  16D7  3009               	movlw	9
  4413  16D8  00AD               	movwf	??___ftmul
  4414  16D9  082D               	movf	??___ftmul,w
  4415  16DA  00B5               	movwf	___ftmul@cntr
  4416  16DB                     l1935:	
  4417  16DB  1C27               	btfss	___ftmul@f1,0
  4418  16DC  2EEB               	goto	l1939
  4419  16DD  082A               	movf	___ftmul@f2,w
  4420  16DE  07B2               	addwf	___ftmul@f3_as_product,f
  4421  16DF  082B               	movf	___ftmul@f2+1,w
  4422  16E0  1103               	clrz
  4423  16E1  1803               	skipnc
  4424  16E2  0A2B               	incf	___ftmul@f2+1,w
  4425  16E3  1D03               	btfss	3,2
  4426  16E4  07B3               	addwf	___ftmul@f3_as_product+1,f
  4427  16E5  082C               	movf	___ftmul@f2+2,w
  4428  16E6  1103               	clrz
  4429  16E7  1803               	skipnc
  4430  16E8  0A2C               	incf	___ftmul@f2+2,w
  4431  16E9  1D03               	btfss	3,2
  4432  16EA  07B4               	addwf	___ftmul@f3_as_product+2,f
  4433  16EB                     l1939:	
  4434  16EB  3001               	movlw	1
  4435  16EC                     u2825:	
  4436  16EC  1003               	clrc
  4437  16ED  0CA9               	rrf	___ftmul@f1+2,f
  4438  16EE  0CA8               	rrf	___ftmul@f1+1,f
  4439  16EF  0CA7               	rrf	___ftmul@f1,f
  4440  16F0  3EFF               	addlw	-1
  4441  16F1  1D03               	skipz
  4442  16F2  2EEC               	goto	u2825
  4443  16F3  3001               	movlw	1
  4444  16F4                     u2835:	
  4445  16F4  1003               	clrc
  4446  16F5  0CB4               	rrf	___ftmul@f3_as_product+2,f
  4447  16F6  0CB3               	rrf	___ftmul@f3_as_product+1,f
  4448  16F7  0CB2               	rrf	___ftmul@f3_as_product,f
  4449  16F8  3EFF               	addlw	-1
  4450  16F9  1D03               	skipz
  4451  16FA  2EF4               	goto	u2835
  4452  16FB  3001               	movlw	1
  4453  16FC  02B5               	subwf	___ftmul@cntr,f
  4454  16FD  1D03               	btfss	3,2
  4455  16FE  2EDB               	goto	l1935
  4456  16FF  0832               	movf	___ftmul@f3_as_product,w
  4457  1700  00F0               	movwf	___ftpack@arg
  4458  1701  0833               	movf	___ftmul@f3_as_product+1,w
  4459  1702  00F1               	movwf	___ftpack@arg+1
  4460  1703  0834               	movf	___ftmul@f3_as_product+2,w
  4461  1704  00F2               	movwf	___ftpack@arg+2
  4462  1705  0831               	movf	___ftmul@exp,w
  4463  1706  00AD               	movwf	??___ftmul
  4464  1707  082D               	movf	??___ftmul,w
  4465  1708  00F3               	movwf	___ftpack@exp
  4466  1709  0836               	movf	___ftmul@sign,w
  4467  170A  00AE               	movwf	??___ftmul+1
  4468  170B  082E               	movf	??___ftmul+1,w
  4469  170C  00F4               	movwf	___ftpack@sign
  4470  170D  160A  118A  2489   	fcall	___ftpack
  4471  1710  0870               	movf	?___ftpack,w
  4472  1711  1283               	bcf	3,5	;RP0=0, select bank0
  4473  1712  1303               	bcf	3,6	;RP1=0, select bank0
  4474  1713  00A7               	movwf	?___ftmul
  4475  1714  0871               	movf	?___ftpack+1,w
  4476  1715  00A8               	movwf	?___ftmul+1
  4477  1716  0872               	movf	?___ftpack+2,w
  4478  1717  00A9               	movwf	?___ftmul+2
  4479  1718  0008               	return
  4480  1719                     __end_of___ftmul:	
  4481                           
  4482                           	psect	text6
  4483  116F                     __ptext6:	
  4484 ;; *************** function ___bmul *****************
  4485 ;; Defined at:
  4486 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  multiplier      1    wreg     unsigned char 
  4489 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  multiplier      1    6[BANK0 ] unsigned char 
  4492 ;;  product         1    5[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      unsigned char 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4502 ;;      Params:         0       1       0       0       0
  4503 ;;      Locals:         0       2       0       0       0
  4504 ;;      Temps:          1       0       0       0       0
  4505 ;;      Totals:         1       3       0       0       0
  4506 ;;Total ram usage:        4 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_fround
  4512 ;;		_scale
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function ___bmul
  4518  116F                     ___bmul:	
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4522                           ;___bmul@multiplier stored from wreg
  4523  116F  1283               	bcf	3,5	;RP0=0, select bank0
  4524  1170  1303               	bcf	3,6	;RP1=0, select bank0
  4525  1171  00A6               	movwf	___bmul@multiplier
  4526  1172  01A5               	clrf	___bmul@product
  4527  1173                     l1735:	
  4528  1173  1C26               	btfss	___bmul@multiplier,0
  4529  1174  2979               	goto	l1739
  4530  1175  0824               	movf	___bmul@multiplicand,w
  4531  1176  00FC               	movwf	??___bmul
  4532  1177  087C               	movf	??___bmul,w
  4533  1178  07A5               	addwf	___bmul@product,f
  4534  1179                     l1739:	
  4535  1179  1003               	clrc
  4536  117A  0DA4               	rlf	___bmul@multiplicand,f
  4537  117B  1003               	clrc
  4538  117C  0CA6               	rrf	___bmul@multiplier,f
  4539  117D  0826               	movf	___bmul@multiplier,w
  4540  117E  1D03               	btfss	3,2
  4541  117F  2973               	goto	l1735
  4542  1180  0825               	movf	___bmul@product,w
  4543  1181  0008               	return
  4544  1182                     __end_of___bmul:	
  4545                           
  4546                           	psect	text7
  4547  1279                     __ptext7:	
  4548 ;; *************** function ___awmod *****************
  4549 ;; Defined at:
  4550 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  divisor         2    0[COMMON] int 
  4553 ;;  dividend        2    2[COMMON] int 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  sign            1    6[COMMON] unsigned char 
  4556 ;;  counter         1    5[COMMON] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  2    0[COMMON] int 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4566 ;;      Params:         4       0       0       0       0
  4567 ;;      Locals:         2       0       0       0       0
  4568 ;;      Temps:          1       0       0       0       0
  4569 ;;      Totals:         7       0       0       0       0
  4570 ;;Total ram usage:        7 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_fround
  4576 ;;		_scale
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function ___awmod
  4582  1279                     ___awmod:	
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4586  1279  01F6               	clrf	___awmod@sign
  4587  127A  1FF3               	btfss	___awmod@dividend+1,7
  4588  127B  2A83               	goto	l1799
  4589  127C  09F2               	comf	___awmod@dividend,f
  4590  127D  09F3               	comf	___awmod@dividend+1,f
  4591  127E  0AF2               	incf	___awmod@dividend,f
  4592  127F  1903               	skipnz
  4593  1280  0AF3               	incf	___awmod@dividend+1,f
  4594  1281  01F6               	clrf	___awmod@sign
  4595  1282  0AF6               	incf	___awmod@sign,f
  4596  1283                     l1799:	
  4597  1283  1FF1               	btfss	___awmod@divisor+1,7
  4598  1284  2A8A               	goto	l1803
  4599  1285  09F0               	comf	___awmod@divisor,f
  4600  1286  09F1               	comf	___awmod@divisor+1,f
  4601  1287  0AF0               	incf	___awmod@divisor,f
  4602  1288  1903               	skipnz
  4603  1289  0AF1               	incf	___awmod@divisor+1,f
  4604  128A                     l1803:	
  4605  128A  0870               	movf	___awmod@divisor,w
  4606  128B  0471               	iorwf	___awmod@divisor+1,w
  4607  128C  1903               	btfsc	3,2
  4608  128D  2AB7               	goto	l1821
  4609  128E  01F5               	clrf	___awmod@counter
  4610  128F  0AF5               	incf	___awmod@counter,f
  4611  1290                     l1811:	
  4612  1290  1BF1               	btfsc	___awmod@divisor+1,7
  4613  1291  2A9E               	goto	l1813
  4614  1292  3001               	movlw	1
  4615  1293                     u2415:	
  4616  1293  1003               	clrc
  4617  1294  0DF0               	rlf	___awmod@divisor,f
  4618  1295  0DF1               	rlf	___awmod@divisor+1,f
  4619  1296  3EFF               	addlw	-1
  4620  1297  1D03               	skipz
  4621  1298  2A93               	goto	u2415
  4622  1299  3001               	movlw	1
  4623  129A  00F4               	movwf	??___awmod
  4624  129B  0874               	movf	??___awmod,w
  4625  129C  07F5               	addwf	___awmod@counter,f
  4626  129D  2A90               	goto	l1811
  4627  129E                     l1813:	
  4628  129E  0871               	movf	___awmod@divisor+1,w
  4629  129F  0273               	subwf	___awmod@dividend+1,w
  4630  12A0  1D03               	skipz
  4631  12A1  2AA4               	goto	u2435
  4632  12A2  0870               	movf	___awmod@divisor,w
  4633  12A3  0272               	subwf	___awmod@dividend,w
  4634  12A4                     u2435:	
  4635  12A4  1C03               	skipc
  4636  12A5  2AAC               	goto	l1817
  4637  12A6  0870               	movf	___awmod@divisor,w
  4638  12A7  02F2               	subwf	___awmod@dividend,f
  4639  12A8  0871               	movf	___awmod@divisor+1,w
  4640  12A9  1C03               	skipc
  4641  12AA  03F3               	decf	___awmod@dividend+1,f
  4642  12AB  02F3               	subwf	___awmod@dividend+1,f
  4643  12AC                     l1817:	
  4644  12AC  3001               	movlw	1
  4645  12AD                     u2445:	
  4646  12AD  1003               	clrc
  4647  12AE  0CF1               	rrf	___awmod@divisor+1,f
  4648  12AF  0CF0               	rrf	___awmod@divisor,f
  4649  12B0  3EFF               	addlw	-1
  4650  12B1  1D03               	skipz
  4651  12B2  2AAD               	goto	u2445
  4652  12B3  3001               	movlw	1
  4653  12B4  02F5               	subwf	___awmod@counter,f
  4654  12B5  1D03               	btfss	3,2
  4655  12B6  2A9E               	goto	l1813
  4656  12B7                     l1821:	
  4657  12B7  0876               	movf	___awmod@sign,w
  4658  12B8  1903               	btfsc	3,2
  4659  12B9  2ABF               	goto	l1825
  4660  12BA  09F2               	comf	___awmod@dividend,f
  4661  12BB  09F3               	comf	___awmod@dividend+1,f
  4662  12BC  0AF2               	incf	___awmod@dividend,f
  4663  12BD  1903               	skipnz
  4664  12BE  0AF3               	incf	___awmod@dividend+1,f
  4665  12BF                     l1825:	
  4666  12BF  0873               	movf	___awmod@dividend+1,w
  4667  12C0  00F1               	movwf	?___awmod+1
  4668  12C1  0872               	movf	___awmod@dividend,w
  4669  12C2  00F0               	movwf	?___awmod
  4670  12C3  0008               	return
  4671  12C4                     __end_of___awmod:	
  4672                           
  4673                           	psect	text8
  4674  1312                     __ptext8:	
  4675 ;; *************** function ___awdiv *****************
  4676 ;; Defined at:
  4677 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  divisor         2    7[COMMON] int 
  4680 ;;  dividend        2    9[COMMON] int 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  quotient        2    2[BANK0 ] int 
  4683 ;;  sign            1    1[BANK0 ] unsigned char 
  4684 ;;  counter         1    0[BANK0 ] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  2    7[COMMON] int 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4694 ;;      Params:         4       0       0       0       0
  4695 ;;      Locals:         0       4       0       0       0
  4696 ;;      Temps:          1       0       0       0       0
  4697 ;;      Totals:         5       4       0       0       0
  4698 ;;Total ram usage:        9 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_fround
  4704 ;;		_scale
  4705 ;;		_sprintf
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function ___awdiv
  4711  1312                     ___awdiv:	
  4712                           
  4713                           ;incstack = 0
  4714                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4715  1312  1283               	bcf	3,5	;RP0=0, select bank0
  4716  1313  1303               	bcf	3,6	;RP1=0, select bank0
  4717  1314  01A1               	clrf	___awdiv@sign
  4718  1315  1FF8               	btfss	___awdiv@divisor+1,7
  4719  1316  2B1E               	goto	l1755
  4720  1317  09F7               	comf	___awdiv@divisor,f
  4721  1318  09F8               	comf	___awdiv@divisor+1,f
  4722  1319  0AF7               	incf	___awdiv@divisor,f
  4723  131A  1903               	skipnz
  4724  131B  0AF8               	incf	___awdiv@divisor+1,f
  4725  131C  01A1               	clrf	___awdiv@sign
  4726  131D  0AA1               	incf	___awdiv@sign,f
  4727  131E                     l1755:	
  4728  131E  1FFA               	btfss	___awdiv@dividend+1,7
  4729  131F  2B29               	goto	l1761
  4730  1320  09F9               	comf	___awdiv@dividend,f
  4731  1321  09FA               	comf	___awdiv@dividend+1,f
  4732  1322  0AF9               	incf	___awdiv@dividend,f
  4733  1323  1903               	skipnz
  4734  1324  0AFA               	incf	___awdiv@dividend+1,f
  4735  1325  3001               	movlw	1
  4736  1326  00FB               	movwf	??___awdiv
  4737  1327  087B               	movf	??___awdiv,w
  4738  1328  06A1               	xorwf	___awdiv@sign,f
  4739  1329                     l1761:	
  4740  1329  01A2               	clrf	___awdiv@quotient
  4741  132A  01A3               	clrf	___awdiv@quotient+1
  4742  132B  0877               	movf	___awdiv@divisor,w
  4743  132C  0478               	iorwf	___awdiv@divisor+1,w
  4744  132D  1903               	btfsc	3,2
  4745  132E  2B60               	goto	l1783
  4746  132F  01A0               	clrf	___awdiv@counter
  4747  1330  0AA0               	incf	___awdiv@counter,f
  4748  1331                     l1771:	
  4749  1331  1BF8               	btfsc	___awdiv@divisor+1,7
  4750  1332  2B3F               	goto	l1773
  4751  1333  3001               	movlw	1
  4752  1334                     u2315:	
  4753  1334  1003               	clrc
  4754  1335  0DF7               	rlf	___awdiv@divisor,f
  4755  1336  0DF8               	rlf	___awdiv@divisor+1,f
  4756  1337  3EFF               	addlw	-1
  4757  1338  1D03               	skipz
  4758  1339  2B34               	goto	u2315
  4759  133A  3001               	movlw	1
  4760  133B  00FB               	movwf	??___awdiv
  4761  133C  087B               	movf	??___awdiv,w
  4762  133D  07A0               	addwf	___awdiv@counter,f
  4763  133E  2B31               	goto	l1771
  4764  133F                     l1773:	
  4765  133F  3001               	movlw	1
  4766  1340                     u2335:	
  4767  1340  1003               	clrc
  4768  1341  0DA2               	rlf	___awdiv@quotient,f
  4769  1342  0DA3               	rlf	___awdiv@quotient+1,f
  4770  1343  3EFF               	addlw	-1
  4771  1344  1D03               	skipz
  4772  1345  2B40               	goto	u2335
  4773  1346  0878               	movf	___awdiv@divisor+1,w
  4774  1347  027A               	subwf	___awdiv@dividend+1,w
  4775  1348  1D03               	skipz
  4776  1349  2B4C               	goto	u2345
  4777  134A  0877               	movf	___awdiv@divisor,w
  4778  134B  0279               	subwf	___awdiv@dividend,w
  4779  134C                     u2345:	
  4780  134C  1C03               	skipc
  4781  134D  2B55               	goto	l1779
  4782  134E  0877               	movf	___awdiv@divisor,w
  4783  134F  02F9               	subwf	___awdiv@dividend,f
  4784  1350  0878               	movf	___awdiv@divisor+1,w
  4785  1351  1C03               	skipc
  4786  1352  03FA               	decf	___awdiv@dividend+1,f
  4787  1353  02FA               	subwf	___awdiv@dividend+1,f
  4788  1354  1422               	bsf	___awdiv@quotient,0
  4789  1355                     l1779:	
  4790  1355  3001               	movlw	1
  4791  1356                     u2355:	
  4792  1356  1003               	clrc
  4793  1357  0CF8               	rrf	___awdiv@divisor+1,f
  4794  1358  0CF7               	rrf	___awdiv@divisor,f
  4795  1359  3EFF               	addlw	-1
  4796  135A  1D03               	skipz
  4797  135B  2B56               	goto	u2355
  4798  135C  3001               	movlw	1
  4799  135D  02A0               	subwf	___awdiv@counter,f
  4800  135E  1D03               	btfss	3,2
  4801  135F  2B3F               	goto	l1773
  4802  1360                     l1783:	
  4803  1360  0821               	movf	___awdiv@sign,w
  4804  1361  1903               	btfsc	3,2
  4805  1362  2B68               	goto	l1787
  4806  1363  09A2               	comf	___awdiv@quotient,f
  4807  1364  09A3               	comf	___awdiv@quotient+1,f
  4808  1365  0AA2               	incf	___awdiv@quotient,f
  4809  1366  1903               	skipnz
  4810  1367  0AA3               	incf	___awdiv@quotient+1,f
  4811  1368                     l1787:	
  4812  1368  0823               	movf	___awdiv@quotient+1,w
  4813  1369  00F8               	movwf	?___awdiv+1
  4814  136A  0822               	movf	___awdiv@quotient,w
  4815  136B  00F7               	movwf	?___awdiv
  4816  136C  0008               	return
  4817  136D                     __end_of___awdiv:	
  4818                           
  4819                           	psect	text9
  4820  1583                     __ptext9:	
  4821 ;; *************** function __tdiv_to_l_ *****************
  4822 ;; Defined at:
  4823 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  f1              3    0[COMMON] float 
  4826 ;;  f2              3    3[COMMON] float 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  quot            4    0[BANK0 ] unsigned long 
  4829 ;;  exp1            1    5[BANK0 ] unsigned char 
  4830 ;;  cntr            1    4[BANK0 ] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  4    0[COMMON] unsigned long 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4840 ;;      Params:         6       0       0       0       0
  4841 ;;      Locals:         0       6       0       0       0
  4842 ;;      Temps:          4       0       0       0       0
  4843 ;;      Totals:        10       6       0       0       0
  4844 ;;Total ram usage:       16 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_sprintf
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function __tdiv_to_l_
  4855  1583                     __tdiv_to_l_:	
  4856                           
  4857                           ;incstack = 0
  4858                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4859  1583  0870               	movf	__tdiv_to_l_@f1,w
  4860  1584  00F6               	movwf	??__tdiv_to_l_
  4861  1585  0871               	movf	__tdiv_to_l_@f1+1,w
  4862  1586  00F7               	movwf	??__tdiv_to_l_+1
  4863  1587  0872               	movf	__tdiv_to_l_@f1+2,w
  4864  1588  00F8               	movwf	??__tdiv_to_l_+2
  4865  1589  1003               	clrc
  4866  158A  0D77               	rlf	??__tdiv_to_l_+1,w
  4867  158B  0D78               	rlf	??__tdiv_to_l_+2,w
  4868  158C  00F9               	movwf	??__tdiv_to_l_+3
  4869  158D  0879               	movf	??__tdiv_to_l_+3,w
  4870  158E  1283               	bcf	3,5	;RP0=0, select bank0
  4871  158F  1303               	bcf	3,6	;RP1=0, select bank0
  4872  1590  00A5               	movwf	__tdiv_to_l_@exp1
  4873  1591  0825               	movf	__tdiv_to_l_@exp1,w
  4874  1592  1D03               	btfss	3,2
  4875  1593  2D9D               	goto	l2059
  4876  1594  3000               	movlw	0
  4877  1595  00F3               	movwf	?__tdiv_to_l_+3
  4878  1596  3000               	movlw	0
  4879  1597  00F2               	movwf	?__tdiv_to_l_+2
  4880  1598  3000               	movlw	0
  4881  1599  00F1               	movwf	?__tdiv_to_l_+1
  4882  159A  3000               	movlw	0
  4883  159B  00F0               	movwf	?__tdiv_to_l_
  4884  159C  0008               	return
  4885  159D                     l2059:	
  4886  159D  0873               	movf	__tdiv_to_l_@f2,w
  4887  159E  00F6               	movwf	??__tdiv_to_l_
  4888  159F  0874               	movf	__tdiv_to_l_@f2+1,w
  4889  15A0  00F7               	movwf	??__tdiv_to_l_+1
  4890  15A1  0875               	movf	__tdiv_to_l_@f2+2,w
  4891  15A2  00F8               	movwf	??__tdiv_to_l_+2
  4892  15A3  1003               	clrc
  4893  15A4  0D77               	rlf	??__tdiv_to_l_+1,w
  4894  15A5  0D78               	rlf	??__tdiv_to_l_+2,w
  4895  15A6  00F9               	movwf	??__tdiv_to_l_+3
  4896  15A7  0879               	movf	??__tdiv_to_l_+3,w
  4897  15A8  00A4               	movwf	__tdiv_to_l_@cntr
  4898  15A9  0824               	movf	__tdiv_to_l_@cntr,w
  4899  15AA  1D03               	btfss	3,2
  4900  15AB  2DB5               	goto	l501
  4901  15AC  3000               	movlw	0
  4902  15AD  00F3               	movwf	?__tdiv_to_l_+3
  4903  15AE  3000               	movlw	0
  4904  15AF  00F2               	movwf	?__tdiv_to_l_+2
  4905  15B0  3000               	movlw	0
  4906  15B1  00F1               	movwf	?__tdiv_to_l_+1
  4907  15B2  3000               	movlw	0
  4908  15B3  00F0               	movwf	?__tdiv_to_l_
  4909  15B4  0008               	return
  4910  15B5                     l501:	
  4911  15B5  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4912  15B6  30FF               	movlw	255
  4913  15B7  05F0               	andwf	__tdiv_to_l_@f1,f
  4914  15B8  30FF               	movlw	255
  4915  15B9  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4916  15BA  3000               	movlw	0
  4917  15BB  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4918  15BC  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4919  15BD  30FF               	movlw	255
  4920  15BE  05F3               	andwf	__tdiv_to_l_@f2,f
  4921  15BF  30FF               	movlw	255
  4922  15C0  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4923  15C1  3000               	movlw	0
  4924  15C2  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4925  15C3  3000               	movlw	0
  4926  15C4  00A3               	movwf	__tdiv_to_l_@quot+3
  4927  15C5  3000               	movlw	0
  4928  15C6  00A2               	movwf	__tdiv_to_l_@quot+2
  4929  15C7  3000               	movlw	0
  4930  15C8  00A1               	movwf	__tdiv_to_l_@quot+1
  4931  15C9  3000               	movlw	0
  4932  15CA  00A0               	movwf	__tdiv_to_l_@quot
  4933  15CB  307F               	movlw	127
  4934  15CC  02A5               	subwf	__tdiv_to_l_@exp1,f
  4935  15CD  3098               	movlw	152
  4936  15CE  0724               	addwf	__tdiv_to_l_@cntr,w
  4937  15CF  00F6               	movwf	??__tdiv_to_l_
  4938  15D0  0876               	movf	??__tdiv_to_l_,w
  4939  15D1  02A5               	subwf	__tdiv_to_l_@exp1,f
  4940  15D2  3018               	movlw	24
  4941  15D3  00F6               	movwf	??__tdiv_to_l_
  4942  15D4  0876               	movf	??__tdiv_to_l_,w
  4943  15D5  00A4               	movwf	__tdiv_to_l_@cntr
  4944  15D6                     l2073:	
  4945  15D6  3001               	movlw	1
  4946  15D7  00F6               	movwf	??__tdiv_to_l_
  4947  15D8                     u2975:	
  4948  15D8  1003               	clrc
  4949  15D9  0DA0               	rlf	__tdiv_to_l_@quot,f
  4950  15DA  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4951  15DB  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4952  15DC  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4953  15DD  0BF6               	decfsz	??__tdiv_to_l_,f
  4954  15DE  2DD8               	goto	u2975
  4955  15DF  0875               	movf	__tdiv_to_l_@f2+2,w
  4956  15E0  0272               	subwf	__tdiv_to_l_@f1+2,w
  4957  15E1  1D03               	skipz
  4958  15E2  2DE9               	goto	u2985
  4959  15E3  0874               	movf	__tdiv_to_l_@f2+1,w
  4960  15E4  0271               	subwf	__tdiv_to_l_@f1+1,w
  4961  15E5  1D03               	skipz
  4962  15E6  2DE9               	goto	u2985
  4963  15E7  0873               	movf	__tdiv_to_l_@f2,w
  4964  15E8  0270               	subwf	__tdiv_to_l_@f1,w
  4965  15E9                     u2985:	
  4966  15E9  1C03               	skipc
  4967  15EA  2DF6               	goto	l2081
  4968  15EB  0873               	movf	__tdiv_to_l_@f2,w
  4969  15EC  02F0               	subwf	__tdiv_to_l_@f1,f
  4970  15ED  0874               	movf	__tdiv_to_l_@f2+1,w
  4971  15EE  1C03               	skipc
  4972  15EF  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  4973  15F0  02F1               	subwf	__tdiv_to_l_@f1+1,f
  4974  15F1  0875               	movf	__tdiv_to_l_@f2+2,w
  4975  15F2  1C03               	skipc
  4976  15F3  0A75               	incf	__tdiv_to_l_@f2+2,w
  4977  15F4  02F2               	subwf	__tdiv_to_l_@f1+2,f
  4978  15F5  1420               	bsf	__tdiv_to_l_@quot,0
  4979  15F6                     l2081:	
  4980  15F6  3001               	movlw	1
  4981  15F7                     u2995:	
  4982  15F7  1003               	clrc
  4983  15F8  0DF0               	rlf	__tdiv_to_l_@f1,f
  4984  15F9  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4985  15FA  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4986  15FB  3EFF               	addlw	-1
  4987  15FC  1D03               	skipz
  4988  15FD  2DF7               	goto	u2995
  4989  15FE  3001               	movlw	1
  4990  15FF  02A4               	subwf	__tdiv_to_l_@cntr,f
  4991  1600  1D03               	btfss	3,2
  4992  1601  2DD6               	goto	l2073
  4993  1602  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4994  1603  2E22               	goto	l2093
  4995  1604  0825               	movf	__tdiv_to_l_@exp1,w
  4996  1605  3A80               	xorlw	128
  4997  1606  3E97               	addlw	151
  4998  1607  1803               	skipnc
  4999  1608  2E12               	goto	l2091
  5000  1609  3000               	movlw	0
  5001  160A  00F3               	movwf	?__tdiv_to_l_+3
  5002  160B  3000               	movlw	0
  5003  160C  00F2               	movwf	?__tdiv_to_l_+2
  5004  160D  3000               	movlw	0
  5005  160E  00F1               	movwf	?__tdiv_to_l_+1
  5006  160F  3000               	movlw	0
  5007  1610  00F0               	movwf	?__tdiv_to_l_
  5008  1611  0008               	return
  5009  1612                     l2091:	
  5010  1612  3001               	movlw	1
  5011  1613                     u3035:	
  5012  1613  1003               	clrc
  5013  1614  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  5014  1615  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5015  1616  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5016  1617  0CA0               	rrf	__tdiv_to_l_@quot,f
  5017  1618  3EFF               	addlw	-1
  5018  1619  1D03               	skipz
  5019  161A  2E13               	goto	u3035
  5020  161B  3001               	movlw	1
  5021  161C  00F6               	movwf	??__tdiv_to_l_
  5022  161D  0876               	movf	??__tdiv_to_l_,w
  5023  161E  07A5               	addwf	__tdiv_to_l_@exp1,f
  5024  161F  1903               	btfsc	3,2
  5025  1620  2E3D               	goto	l2101
  5026  1621  2E12               	goto	l2091
  5027  1622                     l2093:	
  5028  1622  3018               	movlw	24
  5029  1623  0225               	subwf	__tdiv_to_l_@exp1,w
  5030  1624  1C03               	skipc
  5031  1625  2E3A               	goto	l511
  5032  1626  3000               	movlw	0
  5033  1627  00F3               	movwf	?__tdiv_to_l_+3
  5034  1628  3000               	movlw	0
  5035  1629  00F2               	movwf	?__tdiv_to_l_+2
  5036  162A  3000               	movlw	0
  5037  162B  00F1               	movwf	?__tdiv_to_l_+1
  5038  162C  3000               	movlw	0
  5039  162D  00F0               	movwf	?__tdiv_to_l_
  5040  162E  0008               	return
  5041  162F                     l2099:	
  5042  162F  3001               	movlw	1
  5043  1630  00F6               	movwf	??__tdiv_to_l_
  5044  1631                     u3065:	
  5045  1631  1003               	clrc
  5046  1632  0DA0               	rlf	__tdiv_to_l_@quot,f
  5047  1633  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5048  1634  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5049  1635  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5050  1636  0BF6               	decfsz	??__tdiv_to_l_,f
  5051  1637  2E31               	goto	u3065
  5052  1638  3001               	movlw	1
  5053  1639  02A5               	subwf	__tdiv_to_l_@exp1,f
  5054  163A                     l511:	
  5055  163A  0825               	movf	__tdiv_to_l_@exp1,w
  5056  163B  1D03               	btfss	3,2
  5057  163C  2E2F               	goto	l2099
  5058  163D                     l2101:	
  5059  163D  0823               	movf	__tdiv_to_l_@quot+3,w
  5060  163E  00F3               	movwf	?__tdiv_to_l_+3
  5061  163F  0822               	movf	__tdiv_to_l_@quot+2,w
  5062  1640  00F2               	movwf	?__tdiv_to_l_+2
  5063  1641  0821               	movf	__tdiv_to_l_@quot+1,w
  5064  1642  00F1               	movwf	?__tdiv_to_l_+1
  5065  1643  0820               	movf	__tdiv_to_l_@quot,w
  5066  1644  00F0               	movwf	?__tdiv_to_l_
  5067  1645  0008               	return
  5068  1646                     __end_of__tdiv_to_l_:	
  5069                           
  5070                           	psect	text10
  5071  094B                     __ptext10:	
  5072 ;; *************** function __div_to_l_ *****************
  5073 ;; Defined at:
  5074 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  f1              3    0[COMMON] unsigned long 
  5077 ;;  f2              3    3[COMMON] unsigned long 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  quot            4    0[BANK0 ] unsigned long 
  5080 ;;  exp1            1    5[BANK0 ] unsigned char 
  5081 ;;  cntr            1    4[BANK0 ] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  4    0[COMMON] unsigned long 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5091 ;;      Params:         6       0       0       0       0
  5092 ;;      Locals:         0       6       0       0       0
  5093 ;;      Temps:          8       0       0       0       0
  5094 ;;      Totals:        14       6       0       0       0
  5095 ;;Total ram usage:       20 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_sprintf
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function __div_to_l_
  5106  094B                     __div_to_l_:	
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  5110  094B  3070               	movlw	low (__div_to_l_@f1| 0)
  5111  094C  0084               	movwf	4
  5112  094D  0800               	movf	0,w
  5113  094E  00F6               	movwf	??__div_to_l_
  5114  094F  0A84               	incf	4,f
  5115  0950  0800               	movf	0,w
  5116  0951  00F7               	movwf	??__div_to_l_+1
  5117  0952  0A84               	incf	4,f
  5118  0953  0800               	movf	0,w
  5119  0954  00F8               	movwf	??__div_to_l_+2
  5120  0955  0A84               	incf	4,f
  5121  0956  0800               	movf	0,w
  5122  0957  00F9               	movwf	??__div_to_l_+3
  5123  0958  1003               	clrc
  5124  0959  0D78               	rlf	??__div_to_l_+2,w
  5125  095A  0D79               	rlf	??__div_to_l_+3,w
  5126  095B  00FA               	movwf	??__div_to_l_+4
  5127  095C  087A               	movf	??__div_to_l_+4,w
  5128  095D  1283               	bcf	3,5	;RP0=0, select bank0
  5129  095E  1303               	bcf	3,6	;RP1=0, select bank0
  5130  095F  00A5               	movwf	__div_to_l_@exp1
  5131  0960  0825               	movf	__div_to_l_@exp1,w
  5132  0961  1D03               	btfss	3,2
  5133  0962  296C               	goto	l2111
  5134  0963  3000               	movlw	0
  5135  0964  00F3               	movwf	?__div_to_l_+3
  5136  0965  3000               	movlw	0
  5137  0966  00F2               	movwf	?__div_to_l_+2
  5138  0967  3000               	movlw	0
  5139  0968  00F1               	movwf	?__div_to_l_+1
  5140  0969  3000               	movlw	0
  5141  096A  00F0               	movwf	?__div_to_l_
  5142  096B  0008               	return
  5143  096C                     l2111:	
  5144  096C  3073               	movlw	low (__div_to_l_@f2| 0)
  5145  096D  0084               	movwf	4
  5146  096E  0800               	movf	0,w
  5147  096F  00F6               	movwf	??__div_to_l_
  5148  0970  0A84               	incf	4,f
  5149  0971  0800               	movf	0,w
  5150  0972  00F7               	movwf	??__div_to_l_+1
  5151  0973  0A84               	incf	4,f
  5152  0974  0800               	movf	0,w
  5153  0975  00F8               	movwf	??__div_to_l_+2
  5154  0976  0A84               	incf	4,f
  5155  0977  0800               	movf	0,w
  5156  0978  00F9               	movwf	??__div_to_l_+3
  5157  0979  1003               	clrc
  5158  097A  0D78               	rlf	??__div_to_l_+2,w
  5159  097B  0D79               	rlf	??__div_to_l_+3,w
  5160  097C  00FA               	movwf	??__div_to_l_+4
  5161  097D  087A               	movf	??__div_to_l_+4,w
  5162  097E  00A4               	movwf	__div_to_l_@cntr
  5163  097F  0824               	movf	__div_to_l_@cntr,w
  5164  0980  1D03               	btfss	3,2
  5165  0981  298B               	goto	l2117
  5166  0982  3000               	movlw	0
  5167  0983  00F3               	movwf	?__div_to_l_+3
  5168  0984  3000               	movlw	0
  5169  0985  00F2               	movwf	?__div_to_l_+2
  5170  0986  3000               	movlw	0
  5171  0987  00F1               	movwf	?__div_to_l_+1
  5172  0988  3000               	movlw	0
  5173  0989  00F0               	movwf	?__div_to_l_
  5174  098A  0008               	return
  5175  098B                     l2117:	
  5176  098B  3070               	movlw	low (__div_to_l_@f1| 0)
  5177  098C  0084               	movwf	4
  5178  098D  3000               	movlw	0
  5179  098E  0480               	iorwf	0,f
  5180  098F  0A84               	incf	4,f
  5181  0990  3000               	movlw	0
  5182  0991  0480               	iorwf	0,f
  5183  0992  0A84               	incf	4,f
  5184  0993  3080               	movlw	128
  5185  0994  0480               	iorwf	0,f
  5186  0995  0A84               	incf	4,f
  5187  0996  3000               	movlw	0
  5188  0997  0480               	iorwf	0,f
  5189  0998  3070               	movlw	low (__div_to_l_@f1| 0)
  5190  0999  0084               	movwf	4
  5191  099A  30FF               	movlw	255
  5192  099B  0580               	andwf	0,f
  5193  099C  0A84               	incf	4,f
  5194  099D  30FF               	movlw	255
  5195  099E  0580               	andwf	0,f
  5196  099F  0A84               	incf	4,f
  5197  09A0  30FF               	movlw	255
  5198  09A1  0580               	andwf	0,f
  5199  09A2  0A84               	incf	4,f
  5200  09A3  3000               	movlw	0
  5201  09A4  0580               	andwf	0,f
  5202  09A5  3073               	movlw	low (__div_to_l_@f2| 0)
  5203  09A6  0084               	movwf	4
  5204  09A7  3000               	movlw	0
  5205  09A8  0480               	iorwf	0,f
  5206  09A9  0A84               	incf	4,f
  5207  09AA  3000               	movlw	0
  5208  09AB  0480               	iorwf	0,f
  5209  09AC  0A84               	incf	4,f
  5210  09AD  3080               	movlw	128
  5211  09AE  0480               	iorwf	0,f
  5212  09AF  0A84               	incf	4,f
  5213  09B0  3000               	movlw	0
  5214  09B1  0480               	iorwf	0,f
  5215  09B2  3073               	movlw	low (__div_to_l_@f2| 0)
  5216  09B3  0084               	movwf	4
  5217  09B4  30FF               	movlw	255
  5218  09B5  0580               	andwf	0,f
  5219  09B6  0A84               	incf	4,f
  5220  09B7  30FF               	movlw	255
  5221  09B8  0580               	andwf	0,f
  5222  09B9  0A84               	incf	4,f
  5223  09BA  30FF               	movlw	255
  5224  09BB  0580               	andwf	0,f
  5225  09BC  0A84               	incf	4,f
  5226  09BD  3000               	movlw	0
  5227  09BE  0580               	andwf	0,f
  5228  09BF  3000               	movlw	0
  5229  09C0  00A3               	movwf	__div_to_l_@quot+3
  5230  09C1  3000               	movlw	0
  5231  09C2  00A2               	movwf	__div_to_l_@quot+2
  5232  09C3  3000               	movlw	0
  5233  09C4  00A1               	movwf	__div_to_l_@quot+1
  5234  09C5  3000               	movlw	0
  5235  09C6  00A0               	movwf	__div_to_l_@quot
  5236  09C7  307F               	movlw	127
  5237  09C8  02A5               	subwf	__div_to_l_@exp1,f
  5238  09C9  30A0               	movlw	160
  5239  09CA  0724               	addwf	__div_to_l_@cntr,w
  5240  09CB  00F6               	movwf	??__div_to_l_
  5241  09CC  0876               	movf	??__div_to_l_,w
  5242  09CD  02A5               	subwf	__div_to_l_@exp1,f
  5243  09CE  3020               	movlw	32
  5244  09CF  00F6               	movwf	??__div_to_l_
  5245  09D0  0876               	movf	??__div_to_l_,w
  5246  09D1  00A4               	movwf	__div_to_l_@cntr
  5247  09D2                     l2127:	
  5248  09D2  3001               	movlw	1
  5249  09D3  00F6               	movwf	??__div_to_l_
  5250  09D4                     u3105:	
  5251  09D4  1003               	clrc
  5252  09D5  0DA0               	rlf	__div_to_l_@quot,f
  5253  09D6  0DA1               	rlf	__div_to_l_@quot+1,f
  5254  09D7  0DA2               	rlf	__div_to_l_@quot+2,f
  5255  09D8  0DA3               	rlf	__div_to_l_@quot+3,f
  5256  09D9  0BF6               	decfsz	??__div_to_l_,f
  5257  09DA  29D4               	goto	u3105
  5258  09DB  3073               	movlw	low (__div_to_l_@f2| 0)
  5259  09DC  0084               	movwf	4
  5260  09DD  0800               	movf	0,w
  5261  09DE  00F6               	movwf	??__div_to_l_
  5262  09DF  0A84               	incf	4,f
  5263  09E0  0800               	movf	0,w
  5264  09E1  00F7               	movwf	??__div_to_l_+1
  5265  09E2  0A84               	incf	4,f
  5266  09E3  0800               	movf	0,w
  5267  09E4  00F8               	movwf	??__div_to_l_+2
  5268  09E5  0A84               	incf	4,f
  5269  09E6  0800               	movf	0,w
  5270  09E7  00F9               	movwf	??__div_to_l_+3
  5271  09E8  3070               	movlw	low (__div_to_l_@f1| 0)
  5272  09E9  0084               	movwf	4
  5273  09EA  0800               	movf	0,w
  5274  09EB  00FA               	movwf	??__div_to_l_+4
  5275  09EC  0A84               	incf	4,f
  5276  09ED  0800               	movf	0,w
  5277  09EE  00FB               	movwf	??__div_to_l_+5
  5278  09EF  0A84               	incf	4,f
  5279  09F0  0800               	movf	0,w
  5280  09F1  00FC               	movwf	??__div_to_l_+6
  5281  09F2  0A84               	incf	4,f
  5282  09F3  0800               	movf	0,w
  5283  09F4  00FD               	movwf	??__div_to_l_+7
  5284  09F5  0879               	movf	??__div_to_l_+3,w
  5285  09F6  027D               	subwf	??__div_to_l_+7,w
  5286  09F7  1D03               	skipz
  5287  09F8  2A03               	goto	u3115
  5288  09F9  0878               	movf	??__div_to_l_+2,w
  5289  09FA  027C               	subwf	??__div_to_l_+6,w
  5290  09FB  1D03               	skipz
  5291  09FC  2A03               	goto	u3115
  5292  09FD  0877               	movf	??__div_to_l_+1,w
  5293  09FE  027B               	subwf	??__div_to_l_+5,w
  5294  09FF  1D03               	skipz
  5295  0A00  2A03               	goto	u3115
  5296  0A01  0876               	movf	??__div_to_l_,w
  5297  0A02  027A               	subwf	??__div_to_l_+4,w
  5298  0A03                     u3115:	
  5299  0A03  1C03               	skipc
  5300  0A04  2A28               	goto	l424
  5301  0A05  3073               	movlw	low (__div_to_l_@f2| 0)
  5302  0A06  0084               	movwf	4
  5303  0A07  0800               	movf	0,w
  5304  0A08  00F6               	movwf	??__div_to_l_
  5305  0A09  0A84               	incf	4,f
  5306  0A0A  0800               	movf	0,w
  5307  0A0B  00F7               	movwf	??__div_to_l_+1
  5308  0A0C  0A84               	incf	4,f
  5309  0A0D  0800               	movf	0,w
  5310  0A0E  00F8               	movwf	??__div_to_l_+2
  5311  0A0F  0A84               	incf	4,f
  5312  0A10  0800               	movf	0,w
  5313  0A11  00F9               	movwf	??__div_to_l_+3
  5314  0A12  3070               	movlw	low (__div_to_l_@f1| 0)
  5315  0A13  0084               	movwf	4
  5316  0A14  0876               	movf	??__div_to_l_,w
  5317  0A15  0280               	subwf	0,f
  5318  0A16  0A84               	incf	4,f
  5319  0A17  0877               	movf	??__div_to_l_+1,w
  5320  0A18  1C03               	skipc
  5321  0A19  0F77               	incfsz	??__div_to_l_+1,w
  5322  0A1A  0280               	subwf	0,f
  5323  0A1B  0A84               	incf	4,f
  5324  0A1C  0878               	movf	??__div_to_l_+2,w
  5325  0A1D  1C03               	skipc
  5326  0A1E  0F78               	incfsz	??__div_to_l_+2,w
  5327  0A1F  0280               	subwf	0,f
  5328  0A20  0A84               	incf	4,f
  5329  0A21  0879               	movf	??__div_to_l_+3,w
  5330  0A22  1C03               	skipc
  5331  0A23  0A79               	incf	??__div_to_l_+3,w
  5332  0A24  0280               	subwf	0,f
  5333  0A25  3003               	movlw	3
  5334  0A26  0284               	subwf	4,f
  5335  0A27  1420               	bsf	__div_to_l_@quot,0
  5336  0A28                     l424:	
  5337  0A28  3070               	movlw	low (__div_to_l_@f1| 0)
  5338  0A29  0084               	movwf	4
  5339  0A2A  1003               	clrc
  5340  0A2B  0D80               	rlf	0,f
  5341  0A2C  0A84               	incf	4,f
  5342  0A2D  0D80               	rlf	0,f
  5343  0A2E  0A84               	incf	4,f
  5344  0A2F  0D80               	rlf	0,f
  5345  0A30  0A84               	incf	4,f
  5346  0A31  0D80               	rlf	0,f
  5347  0A32  0384               	decf	4,f
  5348  0A33  0384               	decf	4,f
  5349  0A34  0384               	decf	4,f
  5350  0A35  3001               	movlw	1
  5351  0A36  02A4               	subwf	__div_to_l_@cntr,f
  5352  0A37  1D03               	btfss	3,2
  5353  0A38  29D2               	goto	l2127
  5354  0A39  1FA5               	btfss	__div_to_l_@exp1,7
  5355  0A3A  2A59               	goto	l2145
  5356  0A3B  0825               	movf	__div_to_l_@exp1,w
  5357  0A3C  3A80               	xorlw	128
  5358  0A3D  3E9F               	addlw	159
  5359  0A3E  1803               	skipnc
  5360  0A3F  2A49               	goto	l2143
  5361  0A40  3000               	movlw	0
  5362  0A41  00F3               	movwf	?__div_to_l_+3
  5363  0A42  3000               	movlw	0
  5364  0A43  00F2               	movwf	?__div_to_l_+2
  5365  0A44  3000               	movlw	0
  5366  0A45  00F1               	movwf	?__div_to_l_+1
  5367  0A46  3000               	movlw	0
  5368  0A47  00F0               	movwf	?__div_to_l_
  5369  0A48  0008               	return
  5370  0A49                     l2143:	
  5371  0A49  3001               	movlw	1
  5372  0A4A                     u3155:	
  5373  0A4A  1003               	clrc
  5374  0A4B  0CA3               	rrf	__div_to_l_@quot+3,f
  5375  0A4C  0CA2               	rrf	__div_to_l_@quot+2,f
  5376  0A4D  0CA1               	rrf	__div_to_l_@quot+1,f
  5377  0A4E  0CA0               	rrf	__div_to_l_@quot,f
  5378  0A4F  3EFF               	addlw	-1
  5379  0A50  1D03               	skipz
  5380  0A51  2A4A               	goto	u3155
  5381  0A52  3001               	movlw	1
  5382  0A53  00F6               	movwf	??__div_to_l_
  5383  0A54  0876               	movf	??__div_to_l_,w
  5384  0A55  07A5               	addwf	__div_to_l_@exp1,f
  5385  0A56  1903               	btfsc	3,2
  5386  0A57  2A74               	goto	l2153
  5387  0A58  2A49               	goto	l2143
  5388  0A59                     l2145:	
  5389  0A59  3020               	movlw	32
  5390  0A5A  0225               	subwf	__div_to_l_@exp1,w
  5391  0A5B  1C03               	skipc
  5392  0A5C  2A71               	goto	l432
  5393  0A5D  3000               	movlw	0
  5394  0A5E  00F3               	movwf	?__div_to_l_+3
  5395  0A5F  3000               	movlw	0
  5396  0A60  00F2               	movwf	?__div_to_l_+2
  5397  0A61  3000               	movlw	0
  5398  0A62  00F1               	movwf	?__div_to_l_+1
  5399  0A63  3000               	movlw	0
  5400  0A64  00F0               	movwf	?__div_to_l_
  5401  0A65  0008               	return
  5402  0A66                     l2151:	
  5403  0A66  3001               	movlw	1
  5404  0A67  00F6               	movwf	??__div_to_l_
  5405  0A68                     u3185:	
  5406  0A68  1003               	clrc
  5407  0A69  0DA0               	rlf	__div_to_l_@quot,f
  5408  0A6A  0DA1               	rlf	__div_to_l_@quot+1,f
  5409  0A6B  0DA2               	rlf	__div_to_l_@quot+2,f
  5410  0A6C  0DA3               	rlf	__div_to_l_@quot+3,f
  5411  0A6D  0BF6               	decfsz	??__div_to_l_,f
  5412  0A6E  2A68               	goto	u3185
  5413  0A6F  3001               	movlw	1
  5414  0A70  02A5               	subwf	__div_to_l_@exp1,f
  5415  0A71                     l432:	
  5416  0A71  0825               	movf	__div_to_l_@exp1,w
  5417  0A72  1D03               	btfss	3,2
  5418  0A73  2A66               	goto	l2151
  5419  0A74                     l2153:	
  5420  0A74  0823               	movf	__div_to_l_@quot+3,w
  5421  0A75  00F3               	movwf	?__div_to_l_+3
  5422  0A76  0822               	movf	__div_to_l_@quot+2,w
  5423  0A77  00F2               	movwf	?__div_to_l_+2
  5424  0A78  0821               	movf	__div_to_l_@quot+1,w
  5425  0A79  00F1               	movwf	?__div_to_l_+1
  5426  0A7A  0820               	movf	__div_to_l_@quot,w
  5427  0A7B  00F0               	movwf	?__div_to_l_
  5428  0A7C  0008               	return
  5429  0A7D                     __end_of__div_to_l_:	
  5430                           
  5431                           	psect	text11
  5432  11D7                     __ptext11:	
  5433 ;; *************** function ___wmul *****************
  5434 ;; Defined at:
  5435 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  multiplier      2    0[COMMON] unsigned int 
  5438 ;;  multiplicand    2    2[COMMON] unsigned int 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  product         2    4[COMMON] unsigned int 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  2    0[COMMON] unsigned int 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5450 ;;      Params:         4       0       0       0       0
  5451 ;;      Locals:         2       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0
  5453 ;;      Totals:         6       0       0       0       0
  5454 ;;Total ram usage:        6 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_sprintf
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function ___wmul
  5465  11D7                     ___wmul:	
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5469  11D7  01F4               	clrf	___wmul@product
  5470  11D8  01F5               	clrf	___wmul@product+1
  5471  11D9                     l2159:	
  5472  11D9  1C70               	btfss	___wmul@multiplier,0
  5473  11DA  29E1               	goto	l266
  5474  11DB  0872               	movf	___wmul@multiplicand,w
  5475  11DC  07F4               	addwf	___wmul@product,f
  5476  11DD  1803               	skipnc
  5477  11DE  0AF5               	incf	___wmul@product+1,f
  5478  11DF  0873               	movf	___wmul@multiplicand+1,w
  5479  11E0  07F5               	addwf	___wmul@product+1,f
  5480  11E1                     l266:	
  5481  11E1  3001               	movlw	1
  5482  11E2                     u3215:	
  5483  11E2  1003               	clrc
  5484  11E3  0DF2               	rlf	___wmul@multiplicand,f
  5485  11E4  0DF3               	rlf	___wmul@multiplicand+1,f
  5486  11E5  3EFF               	addlw	-1
  5487  11E6  1D03               	skipz
  5488  11E7  29E2               	goto	u3215
  5489  11E8  3001               	movlw	1
  5490  11E9                     u3225:	
  5491  11E9  1003               	clrc
  5492  11EA  0CF1               	rrf	___wmul@multiplier+1,f
  5493  11EB  0CF0               	rrf	___wmul@multiplier,f
  5494  11EC  3EFF               	addlw	-1
  5495  11ED  1D03               	skipz
  5496  11EE  29E9               	goto	u3225
  5497  11EF  0870               	movf	___wmul@multiplier,w
  5498  11F0  0471               	iorwf	___wmul@multiplier+1,w
  5499  11F1  1D03               	btfss	3,2
  5500  11F2  29D9               	goto	l2159
  5501  11F3  0875               	movf	___wmul@product+1,w
  5502  11F4  00F1               	movwf	?___wmul+1
  5503  11F5  0874               	movf	___wmul@product,w
  5504  11F6  00F0               	movwf	?___wmul
  5505  11F7  0008               	return
  5506  11F8                     __end_of___wmul:	
  5507                           
  5508                           	psect	text12
  5509  000C                     __ptext12:	
  5510 ;; *************** function ___lltoft *****************
  5511 ;; Defined at:
  5512 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  c               4    8[COMMON] unsigned long 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  exp             1   13[COMMON] unsigned char 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  3    8[COMMON] float 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0, pclath, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5526 ;;      Params:         4       0       0       0       0
  5527 ;;      Locals:         1       0       0       0       0
  5528 ;;      Temps:          1       0       0       0       0
  5529 ;;      Totals:         6       0       0       0       0
  5530 ;;Total ram usage:        6 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    1
  5533 ;; This function calls:
  5534 ;;		___ftpack
  5535 ;; This function is called by:
  5536 ;;		_sprintf
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function ___lltoft
  5542  000C                     ___lltoft:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5546  000C  308E               	movlw	142
  5547  000D  00FC               	movwf	??___lltoft
  5548  000E  087C               	movf	??___lltoft,w
  5549  000F  00FD               	movwf	___lltoft@exp
  5550  0010                     l2297:	
  5551  0010  30FF               	movlw	255
  5552  0011  057B               	andwf	___lltoft@c+3,w
  5553  0012  1903               	btfsc	3,2
  5554  0013  2822               	goto	l2299
  5555  0014  3001               	movlw	1
  5556  0015                     u3545:	
  5557  0015  1003               	clrc
  5558  0016  0CFB               	rrf	___lltoft@c+3,f
  5559  0017  0CFA               	rrf	___lltoft@c+2,f
  5560  0018  0CF9               	rrf	___lltoft@c+1,f
  5561  0019  0CF8               	rrf	___lltoft@c,f
  5562  001A  3EFF               	addlw	-1
  5563  001B  1D03               	skipz
  5564  001C  2815               	goto	u3545
  5565  001D  3001               	movlw	1
  5566  001E  00FC               	movwf	??___lltoft
  5567  001F  087C               	movf	??___lltoft,w
  5568  0020  07FD               	addwf	___lltoft@exp,f
  5569  0021  2810               	goto	l2297
  5570  0022                     l2299:	
  5571  0022  0878               	movf	___lltoft@c,w
  5572  0023  00F0               	movwf	___ftpack@arg
  5573  0024  0879               	movf	___lltoft@c+1,w
  5574  0025  00F1               	movwf	___ftpack@arg+1
  5575  0026  087A               	movf	___lltoft@c+2,w
  5576  0027  00F2               	movwf	___ftpack@arg+2
  5577  0028  087D               	movf	___lltoft@exp,w
  5578  0029  00FC               	movwf	??___lltoft
  5579  002A  087C               	movf	??___lltoft,w
  5580  002B  00F3               	movwf	___ftpack@exp
  5581  002C  01F4               	clrf	___ftpack@sign
  5582  002D  160A  118A  2489   	fcall	___ftpack
  5583  0030  0870               	movf	?___ftpack,w
  5584  0031  00F8               	movwf	?___lltoft
  5585  0032  0871               	movf	?___ftpack+1,w
  5586  0033  00F9               	movwf	?___lltoft+1
  5587  0034  0872               	movf	?___ftpack+2,w
  5588  0035  00FA               	movwf	?___lltoft+2
  5589  0036  0008               	return
  5590  0037                     __end_of___lltoft:	
  5591                           
  5592                           	psect	text13
  5593  12C4                     __ptext13:	
  5594 ;; *************** function ___llmod *****************
  5595 ;; Defined at:
  5596 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  divisor         4    0[BANK0 ] unsigned long 
  5599 ;;  dividend        4    4[BANK0 ] unsigned long 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  counter         1    9[BANK0 ] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  4    0[BANK0 ] unsigned long 
  5604 ;; Registers used:
  5605 ;;		wreg, status,2, status,0
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5611 ;;      Params:         0       8       0       0       0
  5612 ;;      Locals:         0       1       0       0       0
  5613 ;;      Temps:          0       1       0       0       0
  5614 ;;      Totals:         0      10       0       0       0
  5615 ;;Total ram usage:       10 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_sprintf
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           
  5625                           ;psect for function ___llmod
  5626  12C4                     ___llmod:	
  5627                           
  5628                           ;incstack = 0
  5629                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5630  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  5631  12C5  1303               	bcf	3,6	;RP1=0, select bank0
  5632  12C6  0823               	movf	___llmod@divisor+3,w
  5633  12C7  0422               	iorwf	___llmod@divisor+2,w
  5634  12C8  0421               	iorwf	___llmod@divisor+1,w
  5635  12C9  0420               	iorwf	___llmod@divisor,w
  5636  12CA  1903               	skipnz
  5637  12CB  2B09               	goto	l2289
  5638  12CC  01A9               	clrf	___llmod@counter
  5639  12CD  0AA9               	incf	___llmod@counter,f
  5640  12CE                     l2279:	
  5641  12CE  1BA3               	btfsc	___llmod@divisor+3,7
  5642  12CF  2ADE               	goto	l2281
  5643  12D0  3001               	movlw	1
  5644  12D1  00A8               	movwf	??___llmod
  5645  12D2                     u3495:	
  5646  12D2  1003               	clrc
  5647  12D3  0DA0               	rlf	___llmod@divisor,f
  5648  12D4  0DA1               	rlf	___llmod@divisor+1,f
  5649  12D5  0DA2               	rlf	___llmod@divisor+2,f
  5650  12D6  0DA3               	rlf	___llmod@divisor+3,f
  5651  12D7  0BA8               	decfsz	??___llmod,f
  5652  12D8  2AD2               	goto	u3495
  5653  12D9  3001               	movlw	1
  5654  12DA  00A8               	movwf	??___llmod
  5655  12DB  0828               	movf	??___llmod,w
  5656  12DC  07A9               	addwf	___llmod@counter,f
  5657  12DD  2ACE               	goto	l2279
  5658  12DE                     l2281:	
  5659  12DE  0823               	movf	___llmod@divisor+3,w
  5660  12DF  0227               	subwf	___llmod@dividend+3,w
  5661  12E0  1D03               	skipz
  5662  12E1  2AEC               	goto	u3515
  5663  12E2  0822               	movf	___llmod@divisor+2,w
  5664  12E3  0226               	subwf	___llmod@dividend+2,w
  5665  12E4  1D03               	skipz
  5666  12E5  2AEC               	goto	u3515
  5667  12E6  0821               	movf	___llmod@divisor+1,w
  5668  12E7  0225               	subwf	___llmod@dividend+1,w
  5669  12E8  1D03               	skipz
  5670  12E9  2AEC               	goto	u3515
  5671  12EA  0820               	movf	___llmod@divisor,w
  5672  12EB  0224               	subwf	___llmod@dividend,w
  5673  12EC                     u3515:	
  5674  12EC  1C03               	skipc
  5675  12ED  2AFC               	goto	l2285
  5676  12EE  0820               	movf	___llmod@divisor,w
  5677  12EF  02A4               	subwf	___llmod@dividend,f
  5678  12F0  0821               	movf	___llmod@divisor+1,w
  5679  12F1  1C03               	skipc
  5680  12F2  0F21               	incfsz	___llmod@divisor+1,w
  5681  12F3  02A5               	subwf	___llmod@dividend+1,f
  5682  12F4  0822               	movf	___llmod@divisor+2,w
  5683  12F5  1C03               	skipc
  5684  12F6  0F22               	incfsz	___llmod@divisor+2,w
  5685  12F7  02A6               	subwf	___llmod@dividend+2,f
  5686  12F8  0823               	movf	___llmod@divisor+3,w
  5687  12F9  1C03               	skipc
  5688  12FA  0F23               	incfsz	___llmod@divisor+3,w
  5689  12FB  02A7               	subwf	___llmod@dividend+3,f
  5690  12FC                     l2285:	
  5691  12FC  3001               	movlw	1
  5692  12FD                     u3525:	
  5693  12FD  1003               	clrc
  5694  12FE  0CA3               	rrf	___llmod@divisor+3,f
  5695  12FF  0CA2               	rrf	___llmod@divisor+2,f
  5696  1300  0CA1               	rrf	___llmod@divisor+1,f
  5697  1301  0CA0               	rrf	___llmod@divisor,f
  5698  1302  3EFF               	addlw	-1
  5699  1303  1D03               	skipz
  5700  1304  2AFD               	goto	u3525
  5701  1305  3001               	movlw	1
  5702  1306  02A9               	subwf	___llmod@counter,f
  5703  1307  1D03               	btfss	3,2
  5704  1308  2ADE               	goto	l2281
  5705  1309                     l2289:	
  5706  1309  0827               	movf	___llmod@dividend+3,w
  5707  130A  00A3               	movwf	?___llmod+3
  5708  130B  0826               	movf	___llmod@dividend+2,w
  5709  130C  00A2               	movwf	?___llmod+2
  5710  130D  0825               	movf	___llmod@dividend+1,w
  5711  130E  00A1               	movwf	?___llmod+1
  5712  130F  0824               	movf	___llmod@dividend,w
  5713  1310  00A0               	movwf	?___llmod
  5714  1311  0008               	return
  5715  1312                     __end_of___llmod:	
  5716                           
  5717                           	psect	text14
  5718  13CA                     __ptext14:	
  5719 ;; *************** function ___lldiv *****************
  5720 ;; Defined at:
  5721 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  divisor         4    0[COMMON] unsigned long 
  5724 ;;  dividend        4    4[COMMON] unsigned long 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  quotient        4    9[COMMON] unsigned long 
  5727 ;;  counter         1   13[COMMON] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  4    0[COMMON] unsigned long 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5737 ;;      Params:         8       0       0       0       0
  5738 ;;      Locals:         5       0       0       0       0
  5739 ;;      Temps:          1       0       0       0       0
  5740 ;;      Totals:        14       0       0       0       0
  5741 ;;Total ram usage:       14 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_sprintf
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function ___lldiv
  5752  13CA                     ___lldiv:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5756  13CA  3000               	movlw	0
  5757  13CB  00FC               	movwf	___lldiv@quotient+3
  5758  13CC  3000               	movlw	0
  5759  13CD  00FB               	movwf	___lldiv@quotient+2
  5760  13CE  3000               	movlw	0
  5761  13CF  00FA               	movwf	___lldiv@quotient+1
  5762  13D0  3000               	movlw	0
  5763  13D1  00F9               	movwf	___lldiv@quotient
  5764  13D2  0873               	movf	___lldiv@divisor+3,w
  5765  13D3  0472               	iorwf	___lldiv@divisor+2,w
  5766  13D4  0471               	iorwf	___lldiv@divisor+1,w
  5767  13D5  0470               	iorwf	___lldiv@divisor,w
  5768  13D6  1903               	skipnz
  5769  13D7  2C1F               	goto	l2269
  5770  13D8  01FD               	clrf	___lldiv@counter
  5771  13D9  0AFD               	incf	___lldiv@counter,f
  5772  13DA                     l2255:	
  5773  13DA  1BF3               	btfsc	___lldiv@divisor+3,7
  5774  13DB  2BEA               	goto	l2257
  5775  13DC  3001               	movlw	1
  5776  13DD  00F8               	movwf	??___lldiv
  5777  13DE                     u3425:	
  5778  13DE  1003               	clrc
  5779  13DF  0DF0               	rlf	___lldiv@divisor,f
  5780  13E0  0DF1               	rlf	___lldiv@divisor+1,f
  5781  13E1  0DF2               	rlf	___lldiv@divisor+2,f
  5782  13E2  0DF3               	rlf	___lldiv@divisor+3,f
  5783  13E3  0BF8               	decfsz	??___lldiv,f
  5784  13E4  2BDE               	goto	u3425
  5785  13E5  3001               	movlw	1
  5786  13E6  00F8               	movwf	??___lldiv
  5787  13E7  0878               	movf	??___lldiv,w
  5788  13E8  07FD               	addwf	___lldiv@counter,f
  5789  13E9  2BDA               	goto	l2255
  5790  13EA                     l2257:	
  5791  13EA  3001               	movlw	1
  5792  13EB  00F8               	movwf	??___lldiv
  5793  13EC                     u3445:	
  5794  13EC  1003               	clrc
  5795  13ED  0DF9               	rlf	___lldiv@quotient,f
  5796  13EE  0DFA               	rlf	___lldiv@quotient+1,f
  5797  13EF  0DFB               	rlf	___lldiv@quotient+2,f
  5798  13F0  0DFC               	rlf	___lldiv@quotient+3,f
  5799  13F1  0BF8               	decfsz	??___lldiv,f
  5800  13F2  2BEC               	goto	u3445
  5801  13F3  0873               	movf	___lldiv@divisor+3,w
  5802  13F4  0277               	subwf	___lldiv@dividend+3,w
  5803  13F5  1D03               	skipz
  5804  13F6  2C01               	goto	u3455
  5805  13F7  0872               	movf	___lldiv@divisor+2,w
  5806  13F8  0276               	subwf	___lldiv@dividend+2,w
  5807  13F9  1D03               	skipz
  5808  13FA  2C01               	goto	u3455
  5809  13FB  0871               	movf	___lldiv@divisor+1,w
  5810  13FC  0275               	subwf	___lldiv@dividend+1,w
  5811  13FD  1D03               	skipz
  5812  13FE  2C01               	goto	u3455
  5813  13FF  0870               	movf	___lldiv@divisor,w
  5814  1400  0274               	subwf	___lldiv@dividend,w
  5815  1401                     u3455:	
  5816  1401  1C03               	skipc
  5817  1402  2C12               	goto	l2265
  5818  1403  0870               	movf	___lldiv@divisor,w
  5819  1404  02F4               	subwf	___lldiv@dividend,f
  5820  1405  0871               	movf	___lldiv@divisor+1,w
  5821  1406  1C03               	skipc
  5822  1407  0F71               	incfsz	___lldiv@divisor+1,w
  5823  1408  02F5               	subwf	___lldiv@dividend+1,f
  5824  1409  0872               	movf	___lldiv@divisor+2,w
  5825  140A  1C03               	skipc
  5826  140B  0F72               	incfsz	___lldiv@divisor+2,w
  5827  140C  02F6               	subwf	___lldiv@dividend+2,f
  5828  140D  0873               	movf	___lldiv@divisor+3,w
  5829  140E  1C03               	skipc
  5830  140F  0F73               	incfsz	___lldiv@divisor+3,w
  5831  1410  02F7               	subwf	___lldiv@dividend+3,f
  5832  1411  1479               	bsf	___lldiv@quotient,0
  5833  1412                     l2265:	
  5834  1412  3001               	movlw	1
  5835  1413                     u3465:	
  5836  1413  1003               	clrc
  5837  1414  0CF3               	rrf	___lldiv@divisor+3,f
  5838  1415  0CF2               	rrf	___lldiv@divisor+2,f
  5839  1416  0CF1               	rrf	___lldiv@divisor+1,f
  5840  1417  0CF0               	rrf	___lldiv@divisor,f
  5841  1418  3EFF               	addlw	-1
  5842  1419  1D03               	skipz
  5843  141A  2C13               	goto	u3465
  5844  141B  3001               	movlw	1
  5845  141C  02FD               	subwf	___lldiv@counter,f
  5846  141D  1D03               	btfss	3,2
  5847  141E  2BEA               	goto	l2257
  5848  141F                     l2269:	
  5849  141F  087C               	movf	___lldiv@quotient+3,w
  5850  1420  00F3               	movwf	?___lldiv+3
  5851  1421  087B               	movf	___lldiv@quotient+2,w
  5852  1422  00F2               	movwf	?___lldiv+2
  5853  1423  087A               	movf	___lldiv@quotient+1,w
  5854  1424  00F1               	movwf	?___lldiv+1
  5855  1425  0879               	movf	___lldiv@quotient,w
  5856  1426  00F0               	movwf	?___lldiv
  5857  1427  0008               	return
  5858  1428                     __end_of___lldiv:	
  5859                           
  5860                           	psect	text15
  5861  14F5                     __ptext15:	
  5862 ;; *************** function ___fttol *****************
  5863 ;; Defined at:
  5864 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  f1              3   32[BANK0 ] float 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  lval            4   41[BANK0 ] unsigned long 
  5869 ;;  exp1            1   45[BANK0 ] unsigned char 
  5870 ;;  sign1           1   40[BANK0 ] unsigned char 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  4   32[BANK0 ] long 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2, status,0
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5880 ;;      Params:         0       4       0       0       0
  5881 ;;      Locals:         0       6       0       0       0
  5882 ;;      Temps:          0       4       0       0       0
  5883 ;;      Totals:         0      14       0       0       0
  5884 ;;Total ram usage:       14 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_sprintf
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           
  5894                           ;psect for function ___fttol
  5895  14F5                     ___fttol:	
  5896                           
  5897                           ;incstack = 0
  5898                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5899  14F5  1283               	bcf	3,5	;RP0=0, select bank0
  5900  14F6  1303               	bcf	3,6	;RP1=0, select bank0
  5901  14F7  0840               	movf	___fttol@f1,w
  5902  14F8  00C4               	movwf	??___fttol
  5903  14F9  0841               	movf	___fttol@f1+1,w
  5904  14FA  00C5               	movwf	??___fttol+1
  5905  14FB  0842               	movf	___fttol@f1+2,w
  5906  14FC  00C6               	movwf	??___fttol+2
  5907  14FD  1003               	clrc
  5908  14FE  0D45               	rlf	??___fttol+1,w
  5909  14FF  0D46               	rlf	??___fttol+2,w
  5910  1500  00C7               	movwf	??___fttol+3
  5911  1501  0847               	movf	??___fttol+3,w
  5912  1502  00CD               	movwf	___fttol@exp1
  5913  1503  084D               	movf	___fttol@exp1,w
  5914  1504  1D03               	btfss	3,2
  5915  1505  2D0F               	goto	l2213
  5916  1506  3000               	movlw	0
  5917  1507  00C3               	movwf	?___fttol+3
  5918  1508  3000               	movlw	0
  5919  1509  00C2               	movwf	?___fttol+2
  5920  150A  3000               	movlw	0
  5921  150B  00C1               	movwf	?___fttol+1
  5922  150C  3000               	movlw	0
  5923  150D  00C0               	movwf	?___fttol
  5924  150E  0008               	return
  5925  150F                     l2213:	
  5926  150F  0840               	movf	___fttol@f1,w
  5927  1510  00C4               	movwf	??___fttol
  5928  1511  0841               	movf	___fttol@f1+1,w
  5929  1512  00C5               	movwf	??___fttol+1
  5930  1513  0842               	movf	___fttol@f1+2,w
  5931  1514  00C6               	movwf	??___fttol+2
  5932  1515  3017               	movlw	23
  5933  1516                     u3325:	
  5934  1516  1003               	clrc
  5935  1517  0CC6               	rrf	??___fttol+2,f
  5936  1518  0CC5               	rrf	??___fttol+1,f
  5937  1519  0CC4               	rrf	??___fttol,f
  5938  151A  3EFF               	addlw	-1
  5939  151B  1D03               	skipz
  5940  151C  2D16               	goto	u3325
  5941  151D  0844               	movf	??___fttol,w
  5942  151E  00C7               	movwf	??___fttol+3
  5943  151F  0847               	movf	??___fttol+3,w
  5944  1520  00C8               	movwf	___fttol@sign1
  5945  1521  17C1               	bsf	___fttol@f1+1,7
  5946  1522  30FF               	movlw	255
  5947  1523  05C0               	andwf	___fttol@f1,f
  5948  1524  30FF               	movlw	255
  5949  1525  05C1               	andwf	___fttol@f1+1,f
  5950  1526  3000               	movlw	0
  5951  1527  05C2               	andwf	___fttol@f1+2,f
  5952  1528  0840               	movf	___fttol@f1,w
  5953  1529  00C9               	movwf	___fttol@lval
  5954  152A  0841               	movf	___fttol@f1+1,w
  5955  152B  00CA               	movwf	___fttol@lval+1
  5956  152C  0842               	movf	___fttol@f1+2,w
  5957  152D  00CB               	movwf	___fttol@lval+2
  5958  152E  01CC               	clrf	___fttol@lval+3
  5959  152F  308E               	movlw	142
  5960  1530  02CD               	subwf	___fttol@exp1,f
  5961  1531  1FCD               	btfss	___fttol@exp1,7
  5962  1532  2D51               	goto	l2233
  5963  1533  084D               	movf	___fttol@exp1,w
  5964  1534  3A80               	xorlw	128
  5965  1535  3E8F               	addlw	143
  5966  1536  1803               	skipnc
  5967  1537  2D41               	goto	l2231
  5968  1538  3000               	movlw	0
  5969  1539  00C3               	movwf	?___fttol+3
  5970  153A  3000               	movlw	0
  5971  153B  00C2               	movwf	?___fttol+2
  5972  153C  3000               	movlw	0
  5973  153D  00C1               	movwf	?___fttol+1
  5974  153E  3000               	movlw	0
  5975  153F  00C0               	movwf	?___fttol
  5976  1540  0008               	return
  5977  1541                     l2231:	
  5978  1541  3001               	movlw	1
  5979  1542                     u3355:	
  5980  1542  1003               	clrc
  5981  1543  0CCC               	rrf	___fttol@lval+3,f
  5982  1544  0CCB               	rrf	___fttol@lval+2,f
  5983  1545  0CCA               	rrf	___fttol@lval+1,f
  5984  1546  0CC9               	rrf	___fttol@lval,f
  5985  1547  3EFF               	addlw	-1
  5986  1548  1D03               	skipz
  5987  1549  2D42               	goto	u3355
  5988  154A  3001               	movlw	1
  5989  154B  00C4               	movwf	??___fttol
  5990  154C  0844               	movf	??___fttol,w
  5991  154D  07CD               	addwf	___fttol@exp1,f
  5992  154E  1903               	btfsc	3,2
  5993  154F  2D6C               	goto	l2241
  5994  1550  2D41               	goto	l2231
  5995  1551                     l2233:	
  5996  1551  3018               	movlw	24
  5997  1552  024D               	subwf	___fttol@exp1,w
  5998  1553  1C03               	skipc
  5999  1554  2D69               	goto	l552
  6000  1555  3000               	movlw	0
  6001  1556  00C3               	movwf	?___fttol+3
  6002  1557  3000               	movlw	0
  6003  1558  00C2               	movwf	?___fttol+2
  6004  1559  3000               	movlw	0
  6005  155A  00C1               	movwf	?___fttol+1
  6006  155B  3000               	movlw	0
  6007  155C  00C0               	movwf	?___fttol
  6008  155D  0008               	return
  6009  155E                     l2239:	
  6010  155E  3001               	movlw	1
  6011  155F  00C4               	movwf	??___fttol
  6012  1560                     u3385:	
  6013  1560  1003               	clrc
  6014  1561  0DC9               	rlf	___fttol@lval,f
  6015  1562  0DCA               	rlf	___fttol@lval+1,f
  6016  1563  0DCB               	rlf	___fttol@lval+2,f
  6017  1564  0DCC               	rlf	___fttol@lval+3,f
  6018  1565  0BC4               	decfsz	??___fttol,f
  6019  1566  2D60               	goto	u3385
  6020  1567  3001               	movlw	1
  6021  1568  02CD               	subwf	___fttol@exp1,f
  6022  1569                     l552:	
  6023  1569  084D               	movf	___fttol@exp1,w
  6024  156A  1D03               	btfss	3,2
  6025  156B  2D5E               	goto	l2239
  6026  156C                     l2241:	
  6027  156C  0848               	movf	___fttol@sign1,w
  6028  156D  1903               	btfsc	3,2
  6029  156E  2D7A               	goto	l2245
  6030  156F  09C9               	comf	___fttol@lval,f
  6031  1570  09CA               	comf	___fttol@lval+1,f
  6032  1571  09CB               	comf	___fttol@lval+2,f
  6033  1572  09CC               	comf	___fttol@lval+3,f
  6034  1573  0AC9               	incf	___fttol@lval,f
  6035  1574  1903               	skipnz
  6036  1575  0ACA               	incf	___fttol@lval+1,f
  6037  1576  1903               	skipnz
  6038  1577  0ACB               	incf	___fttol@lval+2,f
  6039  1578  1903               	skipnz
  6040  1579  0ACC               	incf	___fttol@lval+3,f
  6041  157A                     l2245:	
  6042  157A  084C               	movf	___fttol@lval+3,w
  6043  157B  00C3               	movwf	?___fttol+3
  6044  157C  084B               	movf	___fttol@lval+2,w
  6045  157D  00C2               	movwf	?___fttol+2
  6046  157E  084A               	movf	___fttol@lval+1,w
  6047  157F  00C1               	movwf	?___fttol+1
  6048  1580  0849               	movf	___fttol@lval,w
  6049  1581  00C0               	movwf	?___fttol
  6050  1582  0008               	return
  6051  1583                     __end_of___fttol:	
  6052                           
  6053                           	psect	text16
  6054  11B6                     __ptext16:	
  6055 ;; *************** function ___ftsub *****************
  6056 ;; Defined at:
  6057 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  f2              3   52[BANK0 ] float 
  6060 ;;  f1              3   55[BANK0 ] float 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  3   52[BANK0 ] float 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6072 ;;      Params:         0       6       0       0       0
  6073 ;;      Locals:         0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0
  6075 ;;      Totals:         0       6       0       0       0
  6076 ;;Total ram usage:        6 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    2
  6079 ;; This function calls:
  6080 ;;		___ftadd
  6081 ;; This function is called by:
  6082 ;;		_sprintf
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function ___ftsub
  6088  11B6                     ___ftsub:	
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6092  11B6  1283               	bcf	3,5	;RP0=0, select bank0
  6093  11B7  1303               	bcf	3,6	;RP1=0, select bank0
  6094  11B8  0856               	movf	___ftsub@f2+2,w
  6095  11B9  0455               	iorwf	___ftsub@f2+1,w
  6096  11BA  0454               	iorwf	___ftsub@f2,w
  6097  11BB  1903               	skipnz
  6098  11BC  29BF               	goto	l2203
  6099  11BD  3080               	movlw	128
  6100  11BE  06D6               	xorwf	___ftsub@f2+2,f
  6101  11BF                     l2203:	
  6102  11BF  0857               	movf	___ftsub@f1,w
  6103  11C0  00C7               	movwf	___ftadd@f1
  6104  11C1  0858               	movf	___ftsub@f1+1,w
  6105  11C2  00C8               	movwf	___ftadd@f1+1
  6106  11C3  0859               	movf	___ftsub@f1+2,w
  6107  11C4  00C9               	movwf	___ftadd@f1+2
  6108  11C5  0854               	movf	___ftsub@f2,w
  6109  11C6  00CA               	movwf	___ftadd@f2
  6110  11C7  0855               	movf	___ftsub@f2+1,w
  6111  11C8  00CB               	movwf	___ftadd@f2+1
  6112  11C9  0856               	movf	___ftsub@f2+2,w
  6113  11CA  00CC               	movwf	___ftadd@f2+2
  6114  11CB  120A  158A  2042   	fcall	___ftadd
  6115  11CE  1283               	bcf	3,5	;RP0=0, select bank0
  6116  11CF  1303               	bcf	3,6	;RP1=0, select bank0
  6117  11D0  0847               	movf	?___ftadd,w
  6118  11D1  00D4               	movwf	?___ftsub
  6119  11D2  0848               	movf	?___ftadd+1,w
  6120  11D3  00D5               	movwf	?___ftsub+1
  6121  11D4  0849               	movf	?___ftadd+2,w
  6122  11D5  00D6               	movwf	?___ftsub+2
  6123  11D6  0008               	return
  6124  11D7                     __end_of___ftsub:	
  6125                           
  6126                           	psect	text17
  6127  0842                     __ptext17:	
  6128 ;; *************** function ___ftadd *****************
  6129 ;; Defined at:
  6130 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  f1              3   39[BANK0 ] float 
  6133 ;;  f2              3   42[BANK0 ] float 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  exp1            1   51[BANK0 ] unsigned char 
  6136 ;;  exp2            1   50[BANK0 ] unsigned char 
  6137 ;;  sign            1   49[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  3   39[BANK0 ] float 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0, pclath, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6147 ;;      Params:         0       6       0       0       0
  6148 ;;      Locals:         0       3       0       0       0
  6149 ;;      Temps:          0       4       0       0       0
  6150 ;;      Totals:         0      13       0       0       0
  6151 ;;Total ram usage:       13 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    1
  6154 ;; This function calls:
  6155 ;;		___ftpack
  6156 ;; This function is called by:
  6157 ;;		_sprintf
  6158 ;;		___ftsub
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           
  6163                           ;psect for function ___ftadd
  6164  0842                     ___ftadd:	
  6165                           
  6166                           ;incstack = 0
  6167                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6168  0842  1283               	bcf	3,5	;RP0=0, select bank0
  6169  0843  1303               	bcf	3,6	;RP1=0, select bank0
  6170  0844  0847               	movf	___ftadd@f1,w
  6171  0845  00CD               	movwf	??___ftadd
  6172  0846  0848               	movf	___ftadd@f1+1,w
  6173  0847  00CE               	movwf	??___ftadd+1
  6174  0848  0849               	movf	___ftadd@f1+2,w
  6175  0849  00CF               	movwf	??___ftadd+2
  6176  084A  1003               	clrc
  6177  084B  0D4E               	rlf	??___ftadd+1,w
  6178  084C  0D4F               	rlf	??___ftadd+2,w
  6179  084D  00D0               	movwf	??___ftadd+3
  6180  084E  0850               	movf	??___ftadd+3,w
  6181  084F  00D3               	movwf	___ftadd@exp1
  6182  0850  084A               	movf	___ftadd@f2,w
  6183  0851  00CD               	movwf	??___ftadd
  6184  0852  084B               	movf	___ftadd@f2+1,w
  6185  0853  00CE               	movwf	??___ftadd+1
  6186  0854  084C               	movf	___ftadd@f2+2,w
  6187  0855  00CF               	movwf	??___ftadd+2
  6188  0856  1003               	clrc
  6189  0857  0D4E               	rlf	??___ftadd+1,w
  6190  0858  0D4F               	rlf	??___ftadd+2,w
  6191  0859  00D0               	movwf	??___ftadd+3
  6192  085A  0850               	movf	??___ftadd+3,w
  6193  085B  00D2               	movwf	___ftadd@exp2
  6194  085C  0853               	movf	___ftadd@exp1,w
  6195  085D  1903               	btfsc	3,2
  6196  085E  286B               	goto	l1835
  6197  085F  0852               	movf	___ftadd@exp2,w
  6198  0860  0253               	subwf	___ftadd@exp1,w
  6199  0861  1803               	skipnc
  6200  0862  2872               	goto	l1839
  6201  0863  0353               	decf	___ftadd@exp1,w
  6202  0864  3AFF               	xorlw	255
  6203  0865  0752               	addwf	___ftadd@exp2,w
  6204  0866  00CD               	movwf	??___ftadd
  6205  0867  3019               	movlw	25
  6206  0868  024D               	subwf	??___ftadd,w
  6207  0869  1C03               	skipc
  6208  086A  2872               	goto	l1839
  6209  086B                     l1835:	
  6210  086B  084A               	movf	___ftadd@f2,w
  6211  086C  00C7               	movwf	?___ftadd
  6212  086D  084B               	movf	___ftadd@f2+1,w
  6213  086E  00C8               	movwf	?___ftadd+1
  6214  086F  084C               	movf	___ftadd@f2+2,w
  6215  0870  00C9               	movwf	?___ftadd+2
  6216  0871  0008               	return
  6217  0872                     l1839:	
  6218  0872  0852               	movf	___ftadd@exp2,w
  6219  0873  1903               	btfsc	3,2
  6220  0874  0008               	return
  6221  0875  0853               	movf	___ftadd@exp1,w
  6222  0876  0252               	subwf	___ftadd@exp2,w
  6223  0877  1803               	skipnc
  6224  0878  2881               	goto	l1845
  6225  0879  0352               	decf	___ftadd@exp2,w
  6226  087A  3AFF               	xorlw	255
  6227  087B  0753               	addwf	___ftadd@exp1,w
  6228  087C  00CD               	movwf	??___ftadd
  6229  087D  3019               	movlw	25
  6230  087E  024D               	subwf	??___ftadd,w
  6231  087F  1803               	btfsc	3,0
  6232  0880  0008               	return
  6233  0881                     l1845:	
  6234  0881  3006               	movlw	6
  6235  0882  00CD               	movwf	??___ftadd
  6236  0883  084D               	movf	??___ftadd,w
  6237  0884  00D1               	movwf	___ftadd@sign
  6238  0885  1BC9               	btfsc	___ftadd@f1+2,7
  6239  0886  17D1               	bsf	___ftadd@sign,7
  6240  0887  1BCC               	btfsc	___ftadd@f2+2,7
  6241  0888  1751               	bsf	___ftadd@sign,6
  6242  0889  17C8               	bsf	___ftadd@f1+1,7
  6243  088A  30FF               	movlw	255
  6244  088B  05C7               	andwf	___ftadd@f1,f
  6245  088C  30FF               	movlw	255
  6246  088D  05C8               	andwf	___ftadd@f1+1,f
  6247  088E  3000               	movlw	0
  6248  088F  05C9               	andwf	___ftadd@f1+2,f
  6249  0890  17CB               	bsf	___ftadd@f2+1,7
  6250  0891  30FF               	movlw	255
  6251  0892  05CA               	andwf	___ftadd@f2,f
  6252  0893  30FF               	movlw	255
  6253  0894  05CB               	andwf	___ftadd@f2+1,f
  6254  0895  3000               	movlw	0
  6255  0896  05CC               	andwf	___ftadd@f2+2,f
  6256  0897  0852               	movf	___ftadd@exp2,w
  6257  0898  0253               	subwf	___ftadd@exp1,w
  6258  0899  1803               	skipnc
  6259  089A  28C1               	goto	l1867
  6260  089B                     l1857:	
  6261  089B  3001               	movlw	1
  6262  089C                     u2565:	
  6263  089C  1003               	clrc
  6264  089D  0DCA               	rlf	___ftadd@f2,f
  6265  089E  0DCB               	rlf	___ftadd@f2+1,f
  6266  089F  0DCC               	rlf	___ftadd@f2+2,f
  6267  08A0  3EFF               	addlw	-1
  6268  08A1  1D03               	skipz
  6269  08A2  289C               	goto	u2565
  6270  08A3  3001               	movlw	1
  6271  08A4  02D2               	subwf	___ftadd@exp2,f
  6272  08A5  0852               	movf	___ftadd@exp2,w
  6273  08A6  0653               	xorwf	___ftadd@exp1,w
  6274  08A7  1903               	skipnz
  6275  08A8  28BC               	goto	l1865
  6276  08A9  3001               	movlw	1
  6277  08AA  02D1               	subwf	___ftadd@sign,f
  6278  08AB  0851               	movf	___ftadd@sign,w
  6279  08AC  3907               	andlw	7
  6280  08AD  1903               	btfsc	3,2
  6281  08AE  28BC               	goto	l1865
  6282  08AF  289B               	goto	l1857
  6283  08B0                     l1863:	
  6284  08B0  3001               	movlw	1
  6285  08B1                     u2595:	
  6286  08B1  1003               	clrc
  6287  08B2  0CC9               	rrf	___ftadd@f1+2,f
  6288  08B3  0CC8               	rrf	___ftadd@f1+1,f
  6289  08B4  0CC7               	rrf	___ftadd@f1,f
  6290  08B5  3EFF               	addlw	-1
  6291  08B6  1D03               	skipz
  6292  08B7  28B1               	goto	u2595
  6293  08B8  3001               	movlw	1
  6294  08B9  00CD               	movwf	??___ftadd
  6295  08BA  084D               	movf	??___ftadd,w
  6296  08BB  07D3               	addwf	___ftadd@exp1,f
  6297  08BC                     l1865:	
  6298  08BC  0853               	movf	___ftadd@exp1,w
  6299  08BD  0652               	xorwf	___ftadd@exp2,w
  6300  08BE  1903               	btfsc	3,2
  6301  08BF  28EA               	goto	l475
  6302  08C0  28B0               	goto	l1863
  6303  08C1                     l1867:	
  6304  08C1  0853               	movf	___ftadd@exp1,w
  6305  08C2  0252               	subwf	___ftadd@exp2,w
  6306  08C3  1803               	skipnc
  6307  08C4  28EA               	goto	l475
  6308  08C5                     l1869:	
  6309  08C5  3001               	movlw	1
  6310  08C6                     u2625:	
  6311  08C6  1003               	clrc
  6312  08C7  0DC7               	rlf	___ftadd@f1,f
  6313  08C8  0DC8               	rlf	___ftadd@f1+1,f
  6314  08C9  0DC9               	rlf	___ftadd@f1+2,f
  6315  08CA  3EFF               	addlw	-1
  6316  08CB  1D03               	skipz
  6317  08CC  28C6               	goto	u2625
  6318  08CD  3001               	movlw	1
  6319  08CE  02D3               	subwf	___ftadd@exp1,f
  6320  08CF  0852               	movf	___ftadd@exp2,w
  6321  08D0  0653               	xorwf	___ftadd@exp1,w
  6322  08D1  1903               	skipnz
  6323  08D2  28E6               	goto	l1877
  6324  08D3  3001               	movlw	1
  6325  08D4  02D1               	subwf	___ftadd@sign,f
  6326  08D5  0851               	movf	___ftadd@sign,w
  6327  08D6  3907               	andlw	7
  6328  08D7  1903               	btfsc	3,2
  6329  08D8  28E6               	goto	l1877
  6330  08D9  28C5               	goto	l1869
  6331  08DA                     l1875:	
  6332  08DA  3001               	movlw	1
  6333  08DB                     u2655:	
  6334  08DB  1003               	clrc
  6335  08DC  0CCC               	rrf	___ftadd@f2+2,f
  6336  08DD  0CCB               	rrf	___ftadd@f2+1,f
  6337  08DE  0CCA               	rrf	___ftadd@f2,f
  6338  08DF  3EFF               	addlw	-1
  6339  08E0  1D03               	skipz
  6340  08E1  28DB               	goto	u2655
  6341  08E2  3001               	movlw	1
  6342  08E3  00CD               	movwf	??___ftadd
  6343  08E4  084D               	movf	??___ftadd,w
  6344  08E5  07D2               	addwf	___ftadd@exp2,f
  6345  08E6                     l1877:	
  6346  08E6  0853               	movf	___ftadd@exp1,w
  6347  08E7  0652               	xorwf	___ftadd@exp2,w
  6348  08E8  1D03               	skipz
  6349  08E9  28DA               	goto	l1875
  6350  08EA                     l475:	
  6351  08EA  1FD1               	btfss	___ftadd@sign,7
  6352  08EB  28FC               	goto	l1881
  6353  08EC  30FF               	movlw	255
  6354  08ED  06C7               	xorwf	___ftadd@f1,f
  6355  08EE  30FF               	movlw	255
  6356  08EF  06C8               	xorwf	___ftadd@f1+1,f
  6357  08F0  30FF               	movlw	255
  6358  08F1  06C9               	xorwf	___ftadd@f1+2,f
  6359  08F2  3001               	movlw	1
  6360  08F3  07C7               	addwf	___ftadd@f1,f
  6361  08F4  3000               	movlw	0
  6362  08F5  1803               	skipnc
  6363  08F6  3001               	movlw	1
  6364  08F7  07C8               	addwf	___ftadd@f1+1,f
  6365  08F8  3000               	movlw	0
  6366  08F9  1803               	skipnc
  6367  08FA  3001               	movlw	1
  6368  08FB  07C9               	addwf	___ftadd@f1+2,f
  6369  08FC                     l1881:	
  6370  08FC  1F51               	btfss	___ftadd@sign,6
  6371  08FD  290E               	goto	l1885
  6372  08FE  30FF               	movlw	255
  6373  08FF  06CA               	xorwf	___ftadd@f2,f
  6374  0900  30FF               	movlw	255
  6375  0901  06CB               	xorwf	___ftadd@f2+1,f
  6376  0902  30FF               	movlw	255
  6377  0903  06CC               	xorwf	___ftadd@f2+2,f
  6378  0904  3001               	movlw	1
  6379  0905  07CA               	addwf	___ftadd@f2,f
  6380  0906  3000               	movlw	0
  6381  0907  1803               	skipnc
  6382  0908  3001               	movlw	1
  6383  0909  07CB               	addwf	___ftadd@f2+1,f
  6384  090A  3000               	movlw	0
  6385  090B  1803               	skipnc
  6386  090C  3001               	movlw	1
  6387  090D  07CC               	addwf	___ftadd@f2+2,f
  6388  090E                     l1885:	
  6389  090E  01D1               	clrf	___ftadd@sign
  6390  090F  0847               	movf	___ftadd@f1,w
  6391  0910  07CA               	addwf	___ftadd@f2,f
  6392  0911  0848               	movf	___ftadd@f1+1,w
  6393  0912  1103               	clrz
  6394  0913  1803               	skipnc
  6395  0914  0A48               	incf	___ftadd@f1+1,w
  6396  0915  1D03               	btfss	3,2
  6397  0916  07CB               	addwf	___ftadd@f2+1,f
  6398  0917  0849               	movf	___ftadd@f1+2,w
  6399  0918  1103               	clrz
  6400  0919  1803               	skipnc
  6401  091A  0A49               	incf	___ftadd@f1+2,w
  6402  091B  1D03               	btfss	3,2
  6403  091C  07CC               	addwf	___ftadd@f2+2,f
  6404  091D  1FCC               	btfss	___ftadd@f2+2,7
  6405  091E  2931               	goto	l1895
  6406  091F  30FF               	movlw	255
  6407  0920  06CA               	xorwf	___ftadd@f2,f
  6408  0921  30FF               	movlw	255
  6409  0922  06CB               	xorwf	___ftadd@f2+1,f
  6410  0923  30FF               	movlw	255
  6411  0924  06CC               	xorwf	___ftadd@f2+2,f
  6412  0925  3001               	movlw	1
  6413  0926  07CA               	addwf	___ftadd@f2,f
  6414  0927  3000               	movlw	0
  6415  0928  1803               	skipnc
  6416  0929  3001               	movlw	1
  6417  092A  07CB               	addwf	___ftadd@f2+1,f
  6418  092B  3000               	movlw	0
  6419  092C  1803               	skipnc
  6420  092D  3001               	movlw	1
  6421  092E  07CC               	addwf	___ftadd@f2+2,f
  6422  092F  01D1               	clrf	___ftadd@sign
  6423  0930  0AD1               	incf	___ftadd@sign,f
  6424  0931                     l1895:	
  6425  0931  084A               	movf	___ftadd@f2,w
  6426  0932  00F0               	movwf	___ftpack@arg
  6427  0933  084B               	movf	___ftadd@f2+1,w
  6428  0934  00F1               	movwf	___ftpack@arg+1
  6429  0935  084C               	movf	___ftadd@f2+2,w
  6430  0936  00F2               	movwf	___ftpack@arg+2
  6431  0937  0853               	movf	___ftadd@exp1,w
  6432  0938  00CD               	movwf	??___ftadd
  6433  0939  084D               	movf	??___ftadd,w
  6434  093A  00F3               	movwf	___ftpack@exp
  6435  093B  0851               	movf	___ftadd@sign,w
  6436  093C  00CE               	movwf	??___ftadd+1
  6437  093D  084E               	movf	??___ftadd+1,w
  6438  093E  00F4               	movwf	___ftpack@sign
  6439  093F  160A  118A  2489   	fcall	___ftpack
  6440  0942  0870               	movf	?___ftpack,w
  6441  0943  1283               	bcf	3,5	;RP0=0, select bank0
  6442  0944  1303               	bcf	3,6	;RP1=0, select bank0
  6443  0945  00C7               	movwf	?___ftadd
  6444  0946  0871               	movf	?___ftpack+1,w
  6445  0947  00C8               	movwf	?___ftadd+1
  6446  0948  0872               	movf	?___ftpack+2,w
  6447  0949  00C9               	movwf	?___ftadd+2
  6448  094A  0008               	return
  6449  094B                     __end_of___ftadd:	
  6450                           
  6451                           	psect	text18
  6452  1489                     __ptext18:	
  6453 ;; *************** function ___ftpack *****************
  6454 ;; Defined at:
  6455 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  arg             3    0[COMMON] unsigned um
  6458 ;;  exp             1    3[COMMON] unsigned char 
  6459 ;;  sign            1    4[COMMON] unsigned char 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  3    0[COMMON] float 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6471 ;;      Params:         5       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0
  6473 ;;      Temps:          3       0       0       0       0
  6474 ;;      Totals:         8       0       0       0       0
  6475 ;;Total ram usage:        8 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		___ftadd
  6481 ;;		___ftmul
  6482 ;;		___lltoft
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           
  6487                           ;psect for function ___ftpack
  6488  1489                     ___ftpack:	
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6492  1489  0873               	movf	___ftpack@exp,w
  6493  148A  1903               	btfsc	3,2
  6494  148B  2C91               	goto	l1695
  6495  148C  0872               	movf	___ftpack@arg+2,w
  6496  148D  0471               	iorwf	___ftpack@arg+1,w
  6497  148E  0470               	iorwf	___ftpack@arg,w
  6498  148F  1D03               	skipz
  6499  1490  2CA4               	goto	l1701
  6500  1491                     l1695:	
  6501  1491  3000               	movlw	0
  6502  1492  00F0               	movwf	?___ftpack
  6503  1493  3000               	movlw	0
  6504  1494  00F1               	movwf	?___ftpack+1
  6505  1495  3000               	movlw	0
  6506  1496  00F2               	movwf	?___ftpack+2
  6507  1497  0008               	return
  6508  1498                     l1699:	
  6509  1498  3001               	movlw	1
  6510  1499  00F5               	movwf	??___ftpack
  6511  149A  0875               	movf	??___ftpack,w
  6512  149B  07F3               	addwf	___ftpack@exp,f
  6513  149C  3001               	movlw	1
  6514  149D                     u2125:	
  6515  149D  1003               	clrc
  6516  149E  0CF2               	rrf	___ftpack@arg+2,f
  6517  149F  0CF1               	rrf	___ftpack@arg+1,f
  6518  14A0  0CF0               	rrf	___ftpack@arg,f
  6519  14A1  3EFF               	addlw	-1
  6520  14A2  1D03               	skipz
  6521  14A3  2C9D               	goto	u2125
  6522  14A4                     l1701:	
  6523  14A4  30FE               	movlw	254
  6524  14A5  0572               	andwf	___ftpack@arg+2,w
  6525  14A6  1903               	btfsc	3,2
  6526  14A7  2CBF               	goto	l444
  6527  14A8  2C98               	goto	l1699
  6528  14A9                     l1703:	
  6529  14A9  3001               	movlw	1
  6530  14AA  00F5               	movwf	??___ftpack
  6531  14AB  0875               	movf	??___ftpack,w
  6532  14AC  07F3               	addwf	___ftpack@exp,f
  6533  14AD  3001               	movlw	1
  6534  14AE  07F0               	addwf	___ftpack@arg,f
  6535  14AF  3000               	movlw	0
  6536  14B0  1803               	skipnc
  6537  14B1  3001               	movlw	1
  6538  14B2  07F1               	addwf	___ftpack@arg+1,f
  6539  14B3  3000               	movlw	0
  6540  14B4  1803               	skipnc
  6541  14B5  3001               	movlw	1
  6542  14B6  07F2               	addwf	___ftpack@arg+2,f
  6543  14B7  3001               	movlw	1
  6544  14B8                     u2145:	
  6545  14B8  1003               	clrc
  6546  14B9  0CF2               	rrf	___ftpack@arg+2,f
  6547  14BA  0CF1               	rrf	___ftpack@arg+1,f
  6548  14BB  0CF0               	rrf	___ftpack@arg,f
  6549  14BC  3EFF               	addlw	-1
  6550  14BD  1D03               	skipz
  6551  14BE  2CB8               	goto	u2145
  6552  14BF                     l444:	
  6553  14BF  30FF               	movlw	255
  6554  14C0  0572               	andwf	___ftpack@arg+2,w
  6555  14C1  1903               	btfsc	3,2
  6556  14C2  2CCE               	goto	l1711
  6557  14C3  2CA9               	goto	l1703
  6558  14C4                     l1709:	
  6559  14C4  3001               	movlw	1
  6560  14C5  02F3               	subwf	___ftpack@exp,f
  6561  14C6  3001               	movlw	1
  6562  14C7                     u2165:	
  6563  14C7  1003               	clrc
  6564  14C8  0DF0               	rlf	___ftpack@arg,f
  6565  14C9  0DF1               	rlf	___ftpack@arg+1,f
  6566  14CA  0DF2               	rlf	___ftpack@arg+2,f
  6567  14CB  3EFF               	addlw	-1
  6568  14CC  1D03               	skipz
  6569  14CD  2CC7               	goto	u2165
  6570  14CE                     l1711:	
  6571  14CE  1BF1               	btfsc	___ftpack@arg+1,7
  6572  14CF  2CD4               	goto	l451
  6573  14D0  3002               	movlw	2
  6574  14D1  0273               	subwf	___ftpack@exp,w
  6575  14D2  1803               	skipnc
  6576  14D3  2CC4               	goto	l1709
  6577  14D4                     l451:	
  6578  14D4  1873               	btfsc	___ftpack@exp,0
  6579  14D5  2CDC               	goto	l452
  6580  14D6  30FF               	movlw	255
  6581  14D7  05F0               	andwf	___ftpack@arg,f
  6582  14D8  307F               	movlw	127
  6583  14D9  05F1               	andwf	___ftpack@arg+1,f
  6584  14DA  30FF               	movlw	255
  6585  14DB  05F2               	andwf	___ftpack@arg+2,f
  6586  14DC                     l452:	
  6587  14DC  1003               	clrc
  6588  14DD  0CF3               	rrf	___ftpack@exp,f
  6589  14DE  0873               	movf	___ftpack@exp,w
  6590  14DF  00F5               	movwf	??___ftpack
  6591  14E0  01F6               	clrf	??___ftpack+1
  6592  14E1  01F7               	clrf	??___ftpack+2
  6593  14E2  3010               	movlw	16
  6594  14E3                     u2205:	
  6595  14E3  1003               	clrc
  6596  14E4  0DF5               	rlf	??___ftpack,f
  6597  14E5  0DF6               	rlf	??___ftpack+1,f
  6598  14E6  0DF7               	rlf	??___ftpack+2,f
  6599  14E7  3EFF               	addlw	-1
  6600  14E8  1D03               	skipz
  6601  14E9  2CE3               	goto	u2205
  6602  14EA  0875               	movf	??___ftpack,w
  6603  14EB  04F0               	iorwf	___ftpack@arg,f
  6604  14EC  0876               	movf	??___ftpack+1,w
  6605  14ED  04F1               	iorwf	___ftpack@arg+1,f
  6606  14EE  0877               	movf	??___ftpack+2,w
  6607  14EF  04F2               	iorwf	___ftpack@arg+2,f
  6608  14F0  0874               	movf	___ftpack@sign,w
  6609  14F1  1903               	btfsc	3,2
  6610  14F2  0008               	return
  6611  14F3  17F2               	bsf	___ftpack@arg+2,7
  6612  14F4  0008               	return
  6613  14F5                     __end_of___ftpack:	
  6614                           
  6615                           	psect	text19
  6616  0004                     __ptext19:	
  6617 ;; *************** function ___ftneg *****************
  6618 ;; Defined at:
  6619 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  f1              3    0[COMMON] float 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;		None
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  3    0[COMMON] float 
  6626 ;; Registers used:
  6627 ;;		wreg
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6633 ;;      Params:         3       0       0       0       0
  6634 ;;      Locals:         0       0       0       0       0
  6635 ;;      Temps:          0       0       0       0       0
  6636 ;;      Totals:         3       0       0       0       0
  6637 ;;Total ram usage:        3 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_sprintf
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function ___ftneg
  6648  0004                     ___ftneg:	
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in ___ftneg: [wreg]
  6652  0004  0872               	movf	___ftneg@f1+2,w
  6653  0005  0471               	iorwf	___ftneg@f1+1,w
  6654  0006  0470               	iorwf	___ftneg@f1,w
  6655  0007  1903               	skipnz
  6656  0008  0008               	return
  6657  0009  3080               	movlw	128
  6658  000A  06F2               	xorwf	___ftneg@f1+2,f
  6659  000B  0008               	return
  6660  000C                     __end_of___ftneg:	
  6661                           
  6662                           	psect	text20
  6663  136D                     __ptext20:	
  6664 ;; *************** function ___ftge *****************
  6665 ;; Defined at:
  6666 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  ff1             3    0[COMMON] float 
  6669 ;;  ff2             3    3[COMMON] float 
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;		None
  6672 ;; Return value:  Size  Location     Type
  6673 ;;		None               void
  6674 ;; Registers used:
  6675 ;;		wreg, status,2, status,0
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6681 ;;      Params:         6       0       0       0       0
  6682 ;;      Locals:         0       0       0       0       0
  6683 ;;      Temps:          6       0       0       0       0
  6684 ;;      Totals:        12       0       0       0       0
  6685 ;;Total ram usage:       12 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_sprintf
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function ___ftge
  6696  136D                     ___ftge:	
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6700  136D  1FF2               	btfss	___ftge@ff1+2,7
  6701  136E  2B94               	goto	l2175
  6702  136F  3000               	movlw	0
  6703  1370  00F6               	movwf	??___ftge
  6704  1371  3000               	movlw	0
  6705  1372  00F7               	movwf	??___ftge+1
  6706  1373  3080               	movlw	128
  6707  1374  00F8               	movwf	??___ftge+2
  6708  1375  0970               	comf	___ftge@ff1,w
  6709  1376  00F9               	movwf	??___ftge+3
  6710  1377  0971               	comf	___ftge@ff1+1,w
  6711  1378  00FA               	movwf	??___ftge+4
  6712  1379  0972               	comf	___ftge@ff1+2,w
  6713  137A  00FB               	movwf	??___ftge+5
  6714  137B  0AF9               	incf	??___ftge+3,f
  6715  137C  1903               	skipnz
  6716  137D  0AFA               	incf	??___ftge+4,f
  6717  137E  1903               	skipnz
  6718  137F  0AFB               	incf	??___ftge+5,f
  6719  1380  0879               	movf	??___ftge+3,w
  6720  1381  07F6               	addwf	??___ftge,f
  6721  1382  087A               	movf	??___ftge+4,w
  6722  1383  1803               	skipnc
  6723  1384  0F7A               	incfsz	??___ftge+4,w
  6724  1385  2B87               	goto	u3251
  6725  1386  2B88               	goto	u3252
  6726  1387                     u3251:	
  6727  1387  07F7               	addwf	??___ftge+1,f
  6728  1388                     u3252:	
  6729  1388  087B               	movf	??___ftge+5,w
  6730  1389  1803               	skipnc
  6731  138A  0F7B               	incfsz	??___ftge+5,w
  6732  138B  2B8D               	goto	u3253
  6733  138C  2B8E               	goto	u3254
  6734  138D                     u3253:	
  6735  138D  07F8               	addwf	??___ftge+2,f
  6736  138E                     u3254:	
  6737  138E  0876               	movf	??___ftge,w
  6738  138F  00F0               	movwf	___ftge@ff1
  6739  1390  0877               	movf	??___ftge+1,w
  6740  1391  00F1               	movwf	___ftge@ff1+1
  6741  1392  0878               	movf	??___ftge+2,w
  6742  1393  00F2               	movwf	___ftge@ff1+2
  6743  1394                     l2175:	
  6744  1394  1FF5               	btfss	___ftge@ff2+2,7
  6745  1395  2BBB               	goto	l2179
  6746  1396  3000               	movlw	0
  6747  1397  00F6               	movwf	??___ftge
  6748  1398  3000               	movlw	0
  6749  1399  00F7               	movwf	??___ftge+1
  6750  139A  3080               	movlw	128
  6751  139B  00F8               	movwf	??___ftge+2
  6752  139C  0973               	comf	___ftge@ff2,w
  6753  139D  00F9               	movwf	??___ftge+3
  6754  139E  0974               	comf	___ftge@ff2+1,w
  6755  139F  00FA               	movwf	??___ftge+4
  6756  13A0  0975               	comf	___ftge@ff2+2,w
  6757  13A1  00FB               	movwf	??___ftge+5
  6758  13A2  0AF9               	incf	??___ftge+3,f
  6759  13A3  1903               	skipnz
  6760  13A4  0AFA               	incf	??___ftge+4,f
  6761  13A5  1903               	skipnz
  6762  13A6  0AFB               	incf	??___ftge+5,f
  6763  13A7  0879               	movf	??___ftge+3,w
  6764  13A8  07F6               	addwf	??___ftge,f
  6765  13A9  087A               	movf	??___ftge+4,w
  6766  13AA  1803               	skipnc
  6767  13AB  0F7A               	incfsz	??___ftge+4,w
  6768  13AC  2BAE               	goto	u3271
  6769  13AD  2BAF               	goto	u3272
  6770  13AE                     u3271:	
  6771  13AE  07F7               	addwf	??___ftge+1,f
  6772  13AF                     u3272:	
  6773  13AF  087B               	movf	??___ftge+5,w
  6774  13B0  1803               	skipnc
  6775  13B1  0F7B               	incfsz	??___ftge+5,w
  6776  13B2  2BB4               	goto	u3273
  6777  13B3  2BB5               	goto	u3274
  6778  13B4                     u3273:	
  6779  13B4  07F8               	addwf	??___ftge+2,f
  6780  13B5                     u3274:	
  6781  13B5  0876               	movf	??___ftge,w
  6782  13B6  00F3               	movwf	___ftge@ff2
  6783  13B7  0877               	movf	??___ftge+1,w
  6784  13B8  00F4               	movwf	___ftge@ff2+1
  6785  13B9  0878               	movf	??___ftge+2,w
  6786  13BA  00F5               	movwf	___ftge@ff2+2
  6787  13BB                     l2179:	
  6788  13BB  3080               	movlw	128
  6789  13BC  06F2               	xorwf	___ftge@ff1+2,f
  6790  13BD  3080               	movlw	128
  6791  13BE  06F5               	xorwf	___ftge@ff2+2,f
  6792  13BF  0875               	movf	___ftge@ff2+2,w
  6793  13C0  0272               	subwf	___ftge@ff1+2,w
  6794  13C1  1D03               	skipz
  6795  13C2  0008               	return
  6796  13C3  0874               	movf	___ftge@ff2+1,w
  6797  13C4  0271               	subwf	___ftge@ff1+1,w
  6798  13C5  1D03               	skipz
  6799  13C6  0008               	return
  6800  13C7  0873               	movf	___ftge@ff2,w
  6801  13C8  0270               	subwf	___ftge@ff1,w
  6802  13C9  0008               	return
  6803  13CA                     __end_of___ftge:	
  6804                           
  6805                           	psect	text21
  6806  122F                     __ptext21:	
  6807 ;; *************** function _lcdSetCursor *****************
  6808 ;; Defined at:
  6809 ;;		line 37 in file "lcd.h"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;  a               1    wreg     unsigned char 
  6812 ;;  b               1    4[COMMON] unsigned char 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  a               1    7[COMMON] unsigned char 
  6815 ;;  temp            1   10[COMMON] unsigned char 
  6816 ;;  y               1    9[COMMON] unsigned char 
  6817 ;;  z               1    8[COMMON] unsigned char 
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		wreg, status,2, status,0, pclath, cstack
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6827 ;;      Params:         1       0       0       0       0
  6828 ;;      Locals:         4       0       0       0       0
  6829 ;;      Temps:          2       0       0       0       0
  6830 ;;      Totals:         7       0       0       0       0
  6831 ;;Total ram usage:        7 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    2
  6834 ;; This function calls:
  6835 ;;		_lcdCmd
  6836 ;; This function is called by:
  6837 ;;		_main
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           
  6842                           ;psect for function _lcdSetCursor
  6843  122F                     _lcdSetCursor:	
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  6847                           ;lcdSetCursor@a stored from wreg
  6848  122F  00F7               	movwf	lcdSetCursor@a
  6849                           
  6850                           ;lcd.h: 38: char temp, z, y;
  6851                           ;lcd.h: 39: if (a == 1) {
  6852  1230  0377               	decf	lcdSetCursor@a,w
  6853  1231  1D03               	btfss	3,2
  6854  1232  2A54               	goto	l2315
  6855                           
  6856                           ;lcd.h: 40: temp = 0x80 + b - 1;
  6857  1233  0874               	movf	lcdSetCursor@b,w
  6858  1234  3E7F               	addlw	127
  6859  1235  00F5               	movwf	??_lcdSetCursor
  6860  1236  0875               	movf	??_lcdSetCursor,w
  6861  1237  00FA               	movwf	lcdSetCursor@temp
  6862                           
  6863                           ;lcd.h: 41: z = temp >> 4;
  6864  1238  087A               	movf	lcdSetCursor@temp,w
  6865  1239  00F5               	movwf	??_lcdSetCursor
  6866  123A  3004               	movlw	4
  6867  123B                     u3575:	
  6868  123B  1003               	clrc
  6869  123C  0CF5               	rrf	??_lcdSetCursor,f
  6870  123D  3EFF               	addlw	-1
  6871  123E  1D03               	skipz
  6872  123F  2A3B               	goto	u3575
  6873  1240  0875               	movf	??_lcdSetCursor,w
  6874  1241  00F6               	movwf	??_lcdSetCursor+1
  6875  1242  0876               	movf	??_lcdSetCursor+1,w
  6876  1243  00F8               	movwf	lcdSetCursor@z
  6877                           
  6878                           ;lcd.h: 42: y = temp & 0x0F;
  6879  1244  087A               	movf	lcdSetCursor@temp,w
  6880  1245  390F               	andlw	15
  6881  1246  00F5               	movwf	??_lcdSetCursor
  6882  1247  0875               	movf	??_lcdSetCursor,w
  6883  1248  00F9               	movwf	lcdSetCursor@y
  6884                           
  6885                           ;lcd.h: 43: lcdCmd(z);
  6886  1249  0878               	movf	lcdSetCursor@z,w
  6887  124A  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  6888                           
  6889                           ;lcd.h: 44: lcdCmd(y);
  6890  124F  0879               	movf	lcdSetCursor@y,w
  6891  1250  160A  118A  219C   	fcall	_lcdCmd
  6892                           
  6893                           ;lcd.h: 45: } else if (a == 2) {
  6894  1253  0008               	return
  6895  1254                     l2315:	
  6896  1254  3002               	movlw	2
  6897  1255  0677               	xorwf	lcdSetCursor@a,w
  6898  1256  1D03               	btfss	3,2
  6899  1257  0008               	return
  6900                           
  6901                           ;lcd.h: 46: temp = 0xC0 + b - 1;
  6902  1258  0874               	movf	lcdSetCursor@b,w
  6903  1259  3EBF               	addlw	191
  6904  125A  00F5               	movwf	??_lcdSetCursor
  6905  125B  0875               	movf	??_lcdSetCursor,w
  6906  125C  00FA               	movwf	lcdSetCursor@temp
  6907                           
  6908                           ;lcd.h: 47: z = temp >> 4;
  6909  125D  087A               	movf	lcdSetCursor@temp,w
  6910  125E  00F5               	movwf	??_lcdSetCursor
  6911  125F  3004               	movlw	4
  6912  1260                     u3595:	
  6913  1260  1003               	clrc
  6914  1261  0CF5               	rrf	??_lcdSetCursor,f
  6915  1262  3EFF               	addlw	-1
  6916  1263  1D03               	skipz
  6917  1264  2A60               	goto	u3595
  6918  1265  0875               	movf	??_lcdSetCursor,w
  6919  1266  00F6               	movwf	??_lcdSetCursor+1
  6920  1267  0876               	movf	??_lcdSetCursor+1,w
  6921  1268  00F8               	movwf	lcdSetCursor@z
  6922                           
  6923                           ;lcd.h: 48: y = temp & 0x0F;
  6924  1269  087A               	movf	lcdSetCursor@temp,w
  6925  126A  390F               	andlw	15
  6926  126B  00F5               	movwf	??_lcdSetCursor
  6927  126C  0875               	movf	??_lcdSetCursor,w
  6928  126D  00F9               	movwf	lcdSetCursor@y
  6929                           
  6930                           ;lcd.h: 49: lcdCmd(z);
  6931  126E  0878               	movf	lcdSetCursor@z,w
  6932  126F  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  6933                           
  6934                           ;lcd.h: 50: lcdCmd(y);
  6935  1274  0879               	movf	lcdSetCursor@y,w
  6936  1275  160A  118A  219C   	fcall	_lcdCmd
  6937  1278  0008               	return
  6938  1279                     __end_of_lcdSetCursor:	
  6939                           
  6940                           	psect	text22
  6941  0805                     __ptext22:	
  6942 ;; *************** function _lcdPrint *****************
  6943 ;; Defined at:
  6944 ;;		line 89 in file "lcd.h"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  a               2    5[COMMON] PTR unsigned char 
  6947 ;;		 -> main@s(16), STR_4(16), STR_3(17), STR_2(9), 
  6948 ;;		 -> STR_1(13), 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  i               2   10[COMMON] int 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6960 ;;      Params:         2       0       0       0       0
  6961 ;;      Locals:         2       0       0       0       0
  6962 ;;      Temps:          3       0       0       0       0
  6963 ;;      Totals:         7       0       0       0       0
  6964 ;;Total ram usage:        7 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    2
  6967 ;; This function calls:
  6968 ;;		_lcdWriteChar
  6969 ;; This function is called by:
  6970 ;;		_main
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _lcdPrint
  6976  0805                     _lcdPrint:	
  6977                           
  6978                           ;lcd.h: 90: int i;
  6979                           ;lcd.h: 91: for (i = 0; a[i] != '\0'; i++)
  6980                           
  6981                           ;incstack = 0
  6982                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6983  0805  01FA               	clrf	lcdPrint@i
  6984  0806  01FB               	clrf	lcdPrint@i+1
  6985  0807                     l2361:	
  6986  0807  087A               	movf	lcdPrint@i,w
  6987  0808  0775               	addwf	lcdPrint@a,w
  6988  0809  00F8               	movwf	??_lcdPrint+1
  6989  080A  0876               	movf	lcdPrint@a+1,w
  6990  080B  00F7               	movwf	??_lcdPrint
  6991  080C  1803               	skipnc
  6992  080D  0AF7               	incf	??_lcdPrint,f
  6993  080E  1BFA               	btfsc	lcdPrint@i,7
  6994  080F  03F7               	decf	??_lcdPrint,f
  6995  0810  0877               	movf	??_lcdPrint,w
  6996  0811  00F9               	movwf	??_lcdPrint+2
  6997  0812  0879               	movf	??_lcdPrint+2,w
  6998  0813  1283               	bcf	3,5	;RP0=0, select bank0
  6999  0814  1303               	bcf	3,6	;RP1=0, select bank0
  7000  0815  00FF               	movwf	127
  7001  0816  0878               	movf	??_lcdPrint+1,w
  7002  0817  0084               	movwf	4
  7003  0818  160A  118A  2000  120A  158A  	fcall	stringtab
  7004  081D  3A00               	xorlw	0
  7005  081E  1903               	btfsc	3,2
  7006  081F  0008               	return
  7007                           
  7008                           ;lcd.h: 92: lcdWriteChar(a[i]);
  7009  0820  087A               	movf	lcdPrint@i,w
  7010  0821  0775               	addwf	lcdPrint@a,w
  7011  0822  00F8               	movwf	??_lcdPrint+1
  7012  0823  0876               	movf	lcdPrint@a+1,w
  7013  0824  00F7               	movwf	??_lcdPrint
  7014  0825  1803               	skipnc
  7015  0826  0AF7               	incf	??_lcdPrint,f
  7016  0827  1BFA               	btfsc	lcdPrint@i,7
  7017  0828  03F7               	decf	??_lcdPrint,f
  7018  0829  0877               	movf	??_lcdPrint,w
  7019  082A  00F9               	movwf	??_lcdPrint+2
  7020  082B  0879               	movf	??_lcdPrint+2,w
  7021  082C  1283               	bcf	3,5	;RP0=0, select bank0
  7022  082D  1303               	bcf	3,6	;RP1=0, select bank0
  7023  082E  00FF               	movwf	127
  7024  082F  0878               	movf	??_lcdPrint+1,w
  7025  0830  0084               	movwf	4
  7026  0831  160A  118A  2000  120A  158A  	fcall	stringtab
  7027  0836  160A  118A  21F8  120A  158A  	fcall	_lcdWriteChar
  7028  083B  3001               	movlw	1
  7029  083C  07FA               	addwf	lcdPrint@i,f
  7030  083D  1803               	skipnc
  7031  083E  0AFB               	incf	lcdPrint@i+1,f
  7032  083F  3000               	movlw	0
  7033  0840  07FB               	addwf	lcdPrint@i+1,f
  7034  0841  2807               	goto	l2361
  7035  0842                     __end_of_lcdPrint:	
  7036                           
  7037                           	psect	text23
  7038  11F8                     __ptext23:	
  7039 ;; *************** function _lcdWriteChar *****************
  7040 ;; Defined at:
  7041 ;;		line 74 in file "lcd.h"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  a               1    wreg     unsigned char 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  a               1    4[COMMON] unsigned char 
  7046 ;;  y               1    3[COMMON] unsigned char 
  7047 ;;  temp            1    2[COMMON] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0, pclath, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7057 ;;      Params:         0       0       0       0       0
  7058 ;;      Locals:         3       0       0       0       0
  7059 ;;      Temps:          1       0       0       0       0
  7060 ;;      Totals:         4       0       0       0       0
  7061 ;;Total ram usage:        4 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    1
  7064 ;; This function calls:
  7065 ;;		_lcdPort
  7066 ;; This function is called by:
  7067 ;;		_lcdPrint
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           
  7072                           ;psect for function _lcdWriteChar
  7073  11F8                     _lcdWriteChar:	
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _lcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  7077                           ;lcdWriteChar@a stored from wreg
  7078  11F8  00F4               	movwf	lcdWriteChar@a
  7079                           
  7080                           ;lcd.h: 75: char temp, y;
  7081                           ;lcd.h: 76: temp = a & 0x0F;
  7082  11F9  0874               	movf	lcdWriteChar@a,w
  7083  11FA  390F               	andlw	15
  7084  11FB  00F1               	movwf	??_lcdWriteChar
  7085  11FC  0871               	movf	??_lcdWriteChar,w
  7086  11FD  00F2               	movwf	lcdWriteChar@temp
  7087                           
  7088                           ;lcd.h: 77: y = a & 0xF0;
  7089  11FE  0874               	movf	lcdWriteChar@a,w
  7090  11FF  39F0               	andlw	240
  7091  1200  00F1               	movwf	??_lcdWriteChar
  7092  1201  0871               	movf	??_lcdWriteChar,w
  7093  1202  00F3               	movwf	lcdWriteChar@y
  7094                           
  7095                           ;lcd.h: 78: RD2 = 1;
  7096  1203  1283               	bcf	3,5	;RP0=0, select bank0
  7097  1204  1303               	bcf	3,6	;RP1=0, select bank0
  7098  1205  1508               	bsf	8,2	;volatile
  7099                           
  7100                           ;lcd.h: 79: lcdPort(y >> 4);
  7101  1206  0873               	movf	lcdWriteChar@y,w
  7102  1207  00F1               	movwf	??_lcdWriteChar
  7103  1208  3004               	movlw	4
  7104  1209                     u2855:	
  7105  1209  1003               	clrc
  7106  120A  0CF1               	rrf	??_lcdWriteChar,f
  7107  120B  3EFF               	addlw	-1
  7108  120C  1D03               	skipz
  7109  120D  2A09               	goto	u2855
  7110  120E  0871               	movf	??_lcdWriteChar,w
  7111  120F  160A  118A  2182  160A  118A  	fcall	_lcdPort
  7112                           
  7113                           ;lcd.h: 80: RD3 = 1;
  7114  1214  1283               	bcf	3,5	;RP0=0, select bank0
  7115  1215  1303               	bcf	3,6	;RP1=0, select bank0
  7116  1216  1588               	bsf	8,3	;volatile
  7117                           
  7118                           ;lcd.h: 81: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7119  1217  300D               	movlw	13
  7120  1218  00F1               	movwf	??_lcdWriteChar
  7121  1219                     u4227:	
  7122  1219  0BF1               	decfsz	??_lcdWriteChar,f
  7123  121A  2A19               	goto	u4227
  7124                           
  7125                           ;lcd.h: 82: RD3 = 0;
  7126  121B  1283               	bcf	3,5	;RP0=0, select bank0
  7127  121C  1303               	bcf	3,6	;RP1=0, select bank0
  7128  121D  1188               	bcf	8,3	;volatile
  7129                           
  7130                           ;lcd.h: 83: lcdPort(temp);
  7131  121E  0872               	movf	lcdWriteChar@temp,w
  7132  121F  160A  118A  2182  160A  118A  	fcall	_lcdPort
  7133                           
  7134                           ;lcd.h: 84: RD3 = 1;
  7135  1224  1283               	bcf	3,5	;RP0=0, select bank0
  7136  1225  1303               	bcf	3,6	;RP1=0, select bank0
  7137  1226  1588               	bsf	8,3	;volatile
  7138                           
  7139                           ;lcd.h: 85: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7140  1227  300D               	movlw	13
  7141  1228  00F1               	movwf	??_lcdWriteChar
  7142  1229                     u4237:	
  7143  1229  0BF1               	decfsz	??_lcdWriteChar,f
  7144  122A  2A29               	goto	u4237
  7145                           
  7146                           ;lcd.h: 86: RD3 = 0;
  7147  122B  1283               	bcf	3,5	;RP0=0, select bank0
  7148  122C  1303               	bcf	3,6	;RP1=0, select bank0
  7149  122D  1188               	bcf	8,3	;volatile
  7150  122E  0008               	return
  7151  122F                     __end_of_lcdWriteChar:	
  7152                           
  7153                           	psect	text24
  7154  1428                     __ptext24:	
  7155 ;; *************** function _lcdInit *****************
  7156 ;; Defined at:
  7157 ;;		line 54 in file "lcd.h"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;		None
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;		None
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  1    wreg      void 
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0, pclath, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7171 ;;      Params:         0       0       0       0       0
  7172 ;;      Locals:         0       0       0       0       0
  7173 ;;      Temps:          2       0       0       0       0
  7174 ;;      Totals:         2       0       0       0       0
  7175 ;;Total ram usage:        2 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    2
  7178 ;; This function calls:
  7179 ;;		_lcdCmd
  7180 ;;		_lcdPort
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _lcdInit
  7188  1428                     _lcdInit:	
  7189                           
  7190                           ;lcd.h: 55: TRISD = 0;
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in _lcdInit: [wreg+status,2+status,0+pclath+cstack]
  7194  1428  1683               	bsf	3,5	;RP0=1, select bank1
  7195  1429  1303               	bcf	3,6	;RP1=0, select bank1
  7196  142A  0188               	clrf	8	;volatile
  7197                           
  7198                           ;lcd.h: 56: PORTD = 0;
  7199  142B  1283               	bcf	3,5	;RP0=0, select bank0
  7200  142C  1303               	bcf	3,6	;RP1=0, select bank0
  7201  142D  0188               	clrf	8	;volatile
  7202                           
  7203                           ;lcd.h: 57: lcdPort(0x00);
  7204  142E  3000               	movlw	0
  7205  142F  160A  118A  2182  160A  118A  	fcall	_lcdPort
  7206                           
  7207                           ;lcd.h: 58: _delay((unsigned long)((20)*(4000000/4000.0)));
  7208  1434  301A               	movlw	26
  7209  1435  00F5               	movwf	??_lcdInit+1
  7210  1436  30F8               	movlw	248
  7211  1437  00F4               	movwf	??_lcdInit
  7212  1438                     u4247:	
  7213  1438  0BF4               	decfsz	??_lcdInit,f
  7214  1439  2C38               	goto	u4247
  7215  143A  0BF5               	decfsz	??_lcdInit+1,f
  7216  143B  2C38               	goto	u4247
  7217  143C  0000               	nop
  7218                           
  7219                           ;lcd.h: 59: lcdCmd(0x03);
  7220  143D  3003               	movlw	3
  7221  143E  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7222                           
  7223                           ;lcd.h: 60: _delay((unsigned long)((5)*(4000000/4000.0)));
  7224  1443  3007               	movlw	7
  7225  1444  00F5               	movwf	??_lcdInit+1
  7226  1445  307D               	movlw	125
  7227  1446  00F4               	movwf	??_lcdInit
  7228  1447                     u4257:	
  7229  1447  0BF4               	decfsz	??_lcdInit,f
  7230  1448  2C47               	goto	u4257
  7231  1449  0BF5               	decfsz	??_lcdInit+1,f
  7232  144A  2C47               	goto	u4257
  7233                           
  7234                           ;lcd.h: 61: lcdCmd(0x03);
  7235  144B  3003               	movlw	3
  7236  144C  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7237                           
  7238                           ;lcd.h: 62: _delay((unsigned long)((11)*(4000000/4000.0)));
  7239  1451  300F               	movlw	15
  7240  1452  00F5               	movwf	??_lcdInit+1
  7241  1453  3047               	movlw	71
  7242  1454  00F4               	movwf	??_lcdInit
  7243  1455                     u4267:	
  7244  1455  0BF4               	decfsz	??_lcdInit,f
  7245  1456  2C55               	goto	u4267
  7246  1457  0BF5               	decfsz	??_lcdInit+1,f
  7247  1458  2C55               	goto	u4267
  7248  1459  2C5A               	nop2
  7249                           
  7250                           ;lcd.h: 63: lcdCmd(0x03);
  7251  145A  3003               	movlw	3
  7252  145B  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7253                           
  7254                           ;lcd.h: 65: lcdCmd(0x02);
  7255  1460  3002               	movlw	2
  7256  1461  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7257                           
  7258                           ;lcd.h: 66: lcdCmd(0x02);
  7259  1466  3002               	movlw	2
  7260  1467  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7261                           
  7262                           ;lcd.h: 67: lcdCmd(0x08);
  7263  146C  3008               	movlw	8
  7264  146D  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7265                           
  7266                           ;lcd.h: 68: lcdCmd(0x00);
  7267  1472  3000               	movlw	0
  7268  1473  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7269                           
  7270                           ;lcd.h: 69: lcdCmd(0x0C);
  7271  1478  300C               	movlw	12
  7272  1479  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7273                           
  7274                           ;lcd.h: 70: lcdCmd(0x00);
  7275  147E  3000               	movlw	0
  7276  147F  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7277                           
  7278                           ;lcd.h: 71: lcdCmd(0x06);
  7279  1484  3006               	movlw	6
  7280  1485  160A  118A  219C   	fcall	_lcdCmd
  7281  1488  0008               	return
  7282  1489                     __end_of_lcdInit:	
  7283                           
  7284                           	psect	text25
  7285  1156                     __ptext25:	
  7286 ;; *************** function _lcdClear *****************
  7287 ;; Defined at:
  7288 ;;		line 32 in file "lcd.h"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;		None
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  2   36[None  ] int 
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0, pclath, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7302 ;;      Params:         0       0       0       0       0
  7303 ;;      Locals:         0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0
  7305 ;;      Totals:         0       0       0       0       0
  7306 ;;Total ram usage:        0 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    2
  7309 ;; This function calls:
  7310 ;;		_lcdCmd
  7311 ;; This function is called by:
  7312 ;;		_main
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _lcdClear
  7318  1156                     _lcdClear:	
  7319                           
  7320                           ;lcd.h: 33: lcdCmd(0);
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _lcdClear: [wreg+status,2+status,0+pclath+cstack]
  7324  1156  3000               	movlw	0
  7325  1157  160A  118A  219C  160A  118A  	fcall	_lcdCmd
  7326                           
  7327                           ;lcd.h: 34: lcdCmd(1);
  7328  115C  3001               	movlw	1
  7329  115D  160A  118A  219C   	fcall	_lcdCmd
  7330  1160  0008               	return
  7331  1161                     __end_of_lcdClear:	
  7332                           
  7333                           	psect	text26
  7334  119C                     __ptext26:	
  7335 ;; *************** function _lcdCmd *****************
  7336 ;; Defined at:
  7337 ;;		line 24 in file "lcd.h"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  a               1    wreg     unsigned char 
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;  a               1    3[COMMON] unsigned char 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, status,0, pclath, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7351 ;;      Params:         0       0       0       0       0
  7352 ;;      Locals:         1       0       0       0       0
  7353 ;;      Temps:          2       0       0       0       0
  7354 ;;      Totals:         3       0       0       0       0
  7355 ;;Total ram usage:        3 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    1
  7358 ;; This function calls:
  7359 ;;		_lcdPort
  7360 ;; This function is called by:
  7361 ;;		_lcdClear
  7362 ;;		_lcdSetCursor
  7363 ;;		_lcdInit
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _lcdCmd
  7369  119C                     _lcdCmd:	
  7370                           
  7371                           ;incstack = 0
  7372                           ; Regs used in _lcdCmd: [wreg+status,2+status,0+pclath+cstack]
  7373                           ;lcdCmd@a stored from wreg
  7374  119C  00F3               	movwf	lcdCmd@a
  7375                           
  7376                           ;lcd.h: 25: RD2 = 0;
  7377  119D  1283               	bcf	3,5	;RP0=0, select bank0
  7378  119E  1303               	bcf	3,6	;RP1=0, select bank0
  7379  119F  1108               	bcf	8,2	;volatile
  7380                           
  7381                           ;lcd.h: 26: lcdPort(a);
  7382  11A0  0873               	movf	lcdCmd@a,w
  7383  11A1  160A  118A  2182  160A  118A  	fcall	_lcdPort
  7384                           
  7385                           ;lcd.h: 27: RD3 = 1;
  7386  11A6  1283               	bcf	3,5	;RP0=0, select bank0
  7387  11A7  1303               	bcf	3,6	;RP1=0, select bank0
  7388  11A8  1588               	bsf	8,3	;volatile
  7389                           
  7390                           ;lcd.h: 28: _delay((unsigned long)((4)*(4000000/4000.0)));
  7391  11A9  3006               	movlw	6
  7392  11AA  00F2               	movwf	??_lcdCmd+1
  7393  11AB  3030               	movlw	48
  7394  11AC  00F1               	movwf	??_lcdCmd
  7395  11AD                     u4277:	
  7396  11AD  0BF1               	decfsz	??_lcdCmd,f
  7397  11AE  29AD               	goto	u4277
  7398  11AF  0BF2               	decfsz	??_lcdCmd+1,f
  7399  11B0  29AD               	goto	u4277
  7400  11B1  0000               	nop
  7401                           
  7402                           ;lcd.h: 29: RD3 = 0;
  7403  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  7404  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  7405  11B4  1188               	bcf	8,3	;volatile
  7406  11B5  0008               	return
  7407  11B6                     __end_of_lcdCmd:	
  7408                           
  7409                           	psect	text27
  7410  1182                     __ptext27:	
  7411 ;; *************** function _lcdPort *****************
  7412 ;; Defined at:
  7413 ;;		line 2 in file "lcd.h"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  a               1    wreg     unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  a               1    0[COMMON] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7427 ;;      Params:         0       0       0       0       0
  7428 ;;      Locals:         1       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0
  7430 ;;      Totals:         1       0       0       0       0
  7431 ;;Total ram usage:        1 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; This function calls:
  7434 ;;		Nothing
  7435 ;; This function is called by:
  7436 ;;		_lcdCmd
  7437 ;;		_lcdInit
  7438 ;;		_lcdWriteChar
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _lcdPort
  7444  1182                     _lcdPort:	
  7445                           
  7446                           ;incstack = 0
  7447                           ; Regs used in _lcdPort: [wreg]
  7448                           ;lcdPort@a stored from wreg
  7449  1182  00F0               	movwf	lcdPort@a
  7450                           
  7451                           ;lcd.h: 3: if (a & 1)
  7452  1183  1C70               	btfss	lcdPort@a,0
  7453  1184  2989               	goto	l23
  7454                           
  7455                           ;lcd.h: 4: RD4 = 1;
  7456  1185  1283               	bcf	3,5	;RP0=0, select bank0
  7457  1186  1303               	bcf	3,6	;RP1=0, select bank0
  7458  1187  1608               	bsf	8,4	;volatile
  7459  1188  298C               	goto	l24
  7460  1189                     l23:	
  7461                           
  7462                           ;lcd.h: 5: else
  7463                           ;lcd.h: 6: RD4 = 0;
  7464  1189  1283               	bcf	3,5	;RP0=0, select bank0
  7465  118A  1303               	bcf	3,6	;RP1=0, select bank0
  7466  118B  1208               	bcf	8,4	;volatile
  7467  118C                     l24:	
  7468                           
  7469                           ;lcd.h: 8: if (a & 2)
  7470  118C  1CF0               	btfss	lcdPort@a,1
  7471  118D  2990               	goto	l25
  7472                           
  7473                           ;lcd.h: 9: RD5 = 1;
  7474  118E  1688               	bsf	8,5	;volatile
  7475  118F  2991               	goto	l26
  7476  1190                     l25:	
  7477                           
  7478                           ;lcd.h: 10: else
  7479                           ;lcd.h: 11: RD5 = 0;
  7480  1190  1288               	bcf	8,5	;volatile
  7481  1191                     l26:	
  7482                           
  7483                           ;lcd.h: 13: if (a & 4)
  7484  1191  1D70               	btfss	lcdPort@a,2
  7485  1192  2995               	goto	l27
  7486                           
  7487                           ;lcd.h: 14: RD6 = 1;
  7488  1193  1708               	bsf	8,6	;volatile
  7489  1194  2996               	goto	l28
  7490  1195                     l27:	
  7491                           
  7492                           ;lcd.h: 15: else
  7493                           ;lcd.h: 16: RD6 = 0;
  7494  1195  1308               	bcf	8,6	;volatile
  7495  1196                     l28:	
  7496                           
  7497                           ;lcd.h: 18: if (a & 8)
  7498  1196  1DF0               	btfss	lcdPort@a,3
  7499  1197  299A               	goto	l29
  7500                           
  7501                           ;lcd.h: 19: RD7 = 1;
  7502  1198  1788               	bsf	8,7	;volatile
  7503  1199  0008               	return
  7504  119A                     l29:	
  7505                           
  7506                           ;lcd.h: 20: else
  7507                           ;lcd.h: 21: RD7 = 0;
  7508  119A  1388               	bcf	8,7	;volatile
  7509  119B  0008               	return
  7510  119C                     __end_of_lcdPort:	
  7511  007E                     btemp	set	126	;btemp
  7512  007E                     wtemp0	set	126
  7513                           
  7514                           	psect	text1_split_1
  7515  0A7D                     l2595:	
  7516                           
  7517                           ;doprnt.c: 1341: else if(prec < c)
  7518  0A7D  1683               	bsf	3,5	;RP0=1, select bank1
  7519  0A7E  1303               	bcf	3,6	;RP1=0, select bank1
  7520  0A7F  0838               	movf	sprintf@c^(0+128),w
  7521  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  7522  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  7523  0A82  00DE               	movwf	??_sprintf
  7524  0A83  01DF               	clrf	??_sprintf+1
  7525  0A84  1BDE               	btfsc	??_sprintf,7
  7526  0A85  03DF               	decf	??_sprintf+1,f
  7527  0A86  1683               	bsf	3,5	;RP0=1, select bank1
  7528  0A87  1303               	bcf	3,6	;RP1=0, select bank1
  7529  0A88  0837               	movf	(sprintf@prec+1)^(0+128),w
  7530  0A89  3A80               	xorlw	128
  7531  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  7532  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  7533  0A8C  00E0               	movwf	??_sprintf+2
  7534  0A8D  085F               	movf	??_sprintf+1,w
  7535  0A8E  3A80               	xorlw	128
  7536  0A8F  0260               	subwf	??_sprintf+2,w
  7537  0A90  1D03               	skipz
  7538  0A91  2A96               	goto	u4075
  7539  0A92  085E               	movf	??_sprintf,w
  7540  0A93  1683               	bsf	3,5	;RP0=1, select bank1
  7541  0A94  1303               	bcf	3,6	;RP1=0, select bank1
  7542  0A95  0236               	subwf	sprintf@prec^(0+128),w
  7543  0A96                     u4075:	
  7544  0A96  1803               	skipnc
  7545  0A97  2A9F               	goto	l166
  7546                           
  7547                           ;doprnt.c: 1342: prec = c;
  7548  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  7549  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  7550  0A9A  0838               	movf	sprintf@c^(0+128),w
  7551  0A9B  00B6               	movwf	sprintf@prec^(0+128)
  7552  0A9C  01B7               	clrf	(sprintf@prec+1)^(0+128)
  7553  0A9D  1BB6               	btfsc	sprintf@prec^(0+128),7
  7554  0A9E  03B7               	decf	(sprintf@prec+1)^(0+128),f
  7555  0A9F                     l166:	
  7556                           
  7557                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7558  0A9F  1683               	bsf	3,5	;RP0=1, select bank1
  7559  0AA0  1303               	bcf	3,6	;RP1=0, select bank1
  7560  0AA1  0826               	movf	sprintf@width^(0+128),w
  7561  0AA2  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7562  0AA3  1903               	btfsc	3,2
  7563  0AA4  2ABD               	goto	l2603
  7564  0AA5  3003               	movlw	3
  7565  0AA6  0524               	andwf	sprintf@flag^(0+128),w
  7566  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  7567  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  7568  0AA9  00DE               	movwf	??_sprintf
  7569  0AAA  3000               	movlw	0
  7570  0AAB  1683               	bsf	3,5	;RP0=1, select bank1
  7571  0AAC  1303               	bcf	3,6	;RP1=0, select bank1
  7572  0AAD  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7573  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
  7574  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
  7575  0AB0  00DF               	movwf	??_sprintf+1
  7576  0AB1  085E               	movf	??_sprintf,w
  7577  0AB2  045F               	iorwf	??_sprintf+1,w
  7578  0AB3  1903               	btfsc	3,2
  7579  0AB4  2ABD               	goto	l2603
  7580                           
  7581                           ;doprnt.c: 1346: width--;
  7582  0AB5  30FF               	movlw	255
  7583  0AB6  1683               	bsf	3,5	;RP0=1, select bank1
  7584  0AB7  1303               	bcf	3,6	;RP1=0, select bank1
  7585  0AB8  07A6               	addwf	sprintf@width^(0+128),f
  7586  0AB9  1803               	skipnc
  7587  0ABA  0AA7               	incf	(sprintf@width+1)^(0+128),f
  7588  0ABB  30FF               	movlw	255
  7589  0ABC  07A7               	addwf	(sprintf@width+1)^(0+128),f
  7590  0ABD                     l2603:	
  7591                           
  7592                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7593  0ABD  1683               	bsf	3,5	;RP0=1, select bank1
  7594  0ABE  1303               	bcf	3,6	;RP1=0, select bank1
  7595  0ABF  1F25               	btfss	(sprintf@flag+1)^(0+128),6
  7596  0AC0  2AE2               	goto	l2611
  7597                           
  7598                           ;doprnt.c: 1349: if(width > prec)
  7599  0AC1  0837               	movf	(sprintf@prec+1)^(0+128),w
  7600  0AC2  3A80               	xorlw	128
  7601  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  7602  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  7603  0AC5  00DE               	movwf	??_sprintf
  7604  0AC6  1683               	bsf	3,5	;RP0=1, select bank1
  7605  0AC7  1303               	bcf	3,6	;RP1=0, select bank1
  7606  0AC8  0827               	movf	(sprintf@width+1)^(0+128),w
  7607  0AC9  3A80               	xorlw	128
  7608  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  7609  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  7610  0ACC  025E               	subwf	??_sprintf,w
  7611  0ACD  1D03               	skipz
  7612  0ACE  2AD3               	goto	u4115
  7613  0ACF  1683               	bsf	3,5	;RP0=1, select bank1
  7614  0AD0  1303               	bcf	3,6	;RP1=0, select bank1
  7615  0AD1  0826               	movf	sprintf@width^(0+128),w
  7616  0AD2  0236               	subwf	sprintf@prec^(0+128),w
  7617  0AD3                     u4115:	
  7618  0AD3  1803               	skipnc
  7619  0AD4  2ADE               	goto	l2609
  7620                           
  7621                           ;doprnt.c: 1350: width -= prec;
  7622  0AD5  1683               	bsf	3,5	;RP0=1, select bank1
  7623  0AD6  1303               	bcf	3,6	;RP1=0, select bank1
  7624  0AD7  0836               	movf	sprintf@prec^(0+128),w
  7625  0AD8  02A6               	subwf	sprintf@width^(0+128),f
  7626  0AD9  0837               	movf	(sprintf@prec+1)^(0+128),w
  7627  0ADA  1C03               	skipc
  7628  0ADB  03A7               	decf	(sprintf@width+1)^(0+128),f
  7629  0ADC  02A7               	subwf	(sprintf@width+1)^(0+128),f
  7630  0ADD  2AE2               	goto	l2611
  7631  0ADE                     l2609:	
  7632                           
  7633                           ;doprnt.c: 1351: else
  7634                           ;doprnt.c: 1352: width = 0;
  7635  0ADE  1683               	bsf	3,5	;RP0=1, select bank1
  7636  0ADF  1303               	bcf	3,6	;RP1=0, select bank1
  7637  0AE0  01A6               	clrf	sprintf@width^(0+128)
  7638  0AE1  01A7               	clrf	(sprintf@width+1)^(0+128)
  7639  0AE2                     l2611:	
  7640                           
  7641                           ;doprnt.c: 1353: }
  7642                           ;doprnt.c: 1381: if(width > c)
  7643  0AE2  0838               	movf	sprintf@c^(0+128),w
  7644  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  7645  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  7646  0AE5  00DE               	movwf	??_sprintf
  7647  0AE6  01DF               	clrf	??_sprintf+1
  7648  0AE7  1BDE               	btfsc	??_sprintf,7
  7649  0AE8  03DF               	decf	??_sprintf+1,f
  7650  0AE9  085F               	movf	??_sprintf+1,w
  7651  0AEA  3A80               	xorlw	128
  7652  0AEB  00E0               	movwf	??_sprintf+2
  7653  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  7654  0AED  1303               	bcf	3,6	;RP1=0, select bank1
  7655  0AEE  0827               	movf	(sprintf@width+1)^(0+128),w
  7656  0AEF  3A80               	xorlw	128
  7657  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  7658  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  7659  0AF2  0260               	subwf	??_sprintf+2,w
  7660  0AF3  1D03               	skipz
  7661  0AF4  2AFB               	goto	u4125
  7662  0AF5  1683               	bsf	3,5	;RP0=1, select bank1
  7663  0AF6  1303               	bcf	3,6	;RP1=0, select bank1
  7664  0AF7  0826               	movf	sprintf@width^(0+128),w
  7665  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  7666  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  7667  0AFA  025E               	subwf	??_sprintf,w
  7668  0AFB                     u4125:	
  7669  0AFB  1803               	skipnc
  7670  0AFC  2B13               	goto	l2615
  7671                           
  7672                           ;doprnt.c: 1382: width -= c;
  7673  0AFD  1683               	bsf	3,5	;RP0=1, select bank1
  7674  0AFE  1303               	bcf	3,6	;RP1=0, select bank1
  7675  0AFF  0838               	movf	sprintf@c^(0+128),w
  7676  0B00  1283               	bcf	3,5	;RP0=0, select bank0
  7677  0B01  1303               	bcf	3,6	;RP1=0, select bank0
  7678  0B02  00DE               	movwf	??_sprintf
  7679  0B03  01DF               	clrf	??_sprintf+1
  7680  0B04  1BDE               	btfsc	??_sprintf,7
  7681  0B05  03DF               	decf	??_sprintf+1,f
  7682  0B06  085E               	movf	??_sprintf,w
  7683  0B07  1683               	bsf	3,5	;RP0=1, select bank1
  7684  0B08  1303               	bcf	3,6	;RP1=0, select bank1
  7685  0B09  02A6               	subwf	sprintf@width^(0+128),f
  7686  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0B0C  085F               	movf	??_sprintf+1,w
  7689  0B0D  1683               	bsf	3,5	;RP0=1, select bank1
  7690  0B0E  1303               	bcf	3,6	;RP1=0, select bank1
  7691  0B0F  1C03               	skipc
  7692  0B10  03A7               	decf	(sprintf@width+1)^(0+128),f
  7693  0B11  02A7               	subwf	(sprintf@width+1)^(0+128),f
  7694  0B12  2B17               	goto	l2617
  7695  0B13                     l2615:	
  7696                           
  7697                           ;doprnt.c: 1383: else
  7698                           ;doprnt.c: 1384: width = 0;
  7699  0B13  1683               	bsf	3,5	;RP0=1, select bank1
  7700  0B14  1303               	bcf	3,6	;RP1=0, select bank1
  7701  0B15  01A6               	clrf	sprintf@width^(0+128)
  7702  0B16  01A7               	clrf	(sprintf@width+1)^(0+128)
  7703  0B17                     l2617:	
  7704                           
  7705                           ;doprnt.c: 1422: {
  7706                           ;doprnt.c: 1424: if(width
  7707                           ;doprnt.c: 1428: )
  7708  0B17  0826               	movf	sprintf@width^(0+128),w
  7709  0B18  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7710  0B19  1903               	btfsc	3,2
  7711  0B1A  2B38               	goto	l2625
  7712  0B1B                     l2619:	
  7713                           ;doprnt.c: 1429: do
  7714                           
  7715                           
  7716                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7717  0B1B  3020               	movlw	32
  7718  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  7719  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  7720  0B1E  00DE               	movwf	??_sprintf
  7721  0B1F  1683               	bsf	3,5	;RP0=1, select bank1
  7722  0B20  1303               	bcf	3,6	;RP1=0, select bank1
  7723  0B21  0835               	movf	sprintf@sp^(0+128),w
  7724  0B22  0084               	movwf	4
  7725  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  7726  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  7727  0B25  085E               	movf	??_sprintf,w
  7728  0B26  1383               	bcf	3,7	;select IRP bank0
  7729  0B27  0080               	movwf	0
  7730  0B28  3001               	movlw	1
  7731  0B29  00DE               	movwf	??_sprintf
  7732  0B2A  085E               	movf	??_sprintf,w
  7733  0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  7734  0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  7735  0B2D  07B5               	addwf	sprintf@sp^(0+128),f
  7736                           
  7737                           ;doprnt.c: 1431: while(--width);
  7738  0B2E  30FF               	movlw	255
  7739  0B2F  07A6               	addwf	sprintf@width^(0+128),f
  7740  0B30  1803               	skipnc
  7741  0B31  0AA7               	incf	(sprintf@width+1)^(0+128),f
  7742  0B32  30FF               	movlw	255
  7743  0B33  07A7               	addwf	(sprintf@width+1)^(0+128),f
  7744  0B34  0826               	movf	sprintf@width^(0+128),w
  7745  0B35  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7746  0B36  1D03               	btfss	3,2
  7747  0B37  2B1B               	goto	l2619
  7748  0B38                     l2625:	
  7749                           
  7750                           ;doprnt.c: 1438: if(flag & 0x03)
  7751  0B38  3003               	movlw	3
  7752  0B39  0524               	andwf	sprintf@flag^(0+128),w
  7753  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  7754  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  7755  0B3C  00DE               	movwf	??_sprintf
  7756  0B3D  3000               	movlw	0
  7757  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  7758  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  7759  0B40  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7760  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  7761  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  7762  0B43  00DF               	movwf	??_sprintf+1
  7763  0B44  085E               	movf	??_sprintf,w
  7764  0B45  045F               	iorwf	??_sprintf+1,w
  7765  0B46  1903               	btfsc	3,2
  7766  0B47  2B59               	goto	l2637
  7767                           
  7768                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7769  0B48  302D               	movlw	45
  7770  0B49                     L7:	
  7771  0B49  00DE               	movwf	??_sprintf
  7772  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  7773  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
  7774  0B4C  0835               	movf	sprintf@sp^(0+128),w
  7775  0B4D  0084               	movwf	4
  7776  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  7777  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  7778  0B50  085E               	movf	??_sprintf,w
  7779  0B51  1383               	bcf	3,7	;select IRP bank0
  7780  0B52  0080               	movwf	0
  7781  0B53  3001               	movlw	1
  7782  0B54  00DE               	movwf	??_sprintf
  7783  0B55  085E               	movf	??_sprintf,w
  7784  0B56  1683               	bsf	3,5	;RP0=1, select bank1
  7785  0B57  1303               	bcf	3,6	;RP1=0, select bank1
  7786  0B58  07B5               	addwf	sprintf@sp^(0+128),f
  7787  0B59                     l2637:	
  7788  0B59  30FF               	movlw	255
  7789  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  7790  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  7791  0B5C  07B6               	addwf	sprintf@prec^(0+128),f
  7792  0B5D  1803               	skipnc
  7793  0B5E  0AB7               	incf	(sprintf@prec+1)^(0+128),f
  7794  0B5F  30FF               	movlw	255
  7795  0B60  07B7               	addwf	(sprintf@prec+1)^(0+128),f
  7796  0B61  0A36               	incf	sprintf@prec^(0+128),w
  7797  0B62  1903               	btfsc	3,2
  7798  0B63  0A37               	incf	(sprintf@prec+1)^(0+128),w
  7799  0B64  1903               	btfsc	3,2
  7800  0B65  2BC8               	goto	L11
  7801                           
  7802                           ;doprnt.c: 1478: {
  7803                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7804                           
  7805                           ;doprnt.c: 1469: }
  7806                           ;doprnt.c: 1474: while(prec--) {
  7807  0B66  3000               	movlw	0
  7808  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  7809  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  7810  0B69  00A3               	movwf	___llmod@divisor+3
  7811  0B6A  3000               	movlw	0
  7812  0B6B  00A2               	movwf	___llmod@divisor+2
  7813  0B6C  3000               	movlw	0
  7814  0B6D  00A1               	movwf	___llmod@divisor+1
  7815  0B6E  300A               	movlw	10
  7816  0B6F  00A0               	movwf	___llmod@divisor
  7817  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  7818  0B71  1303               	bcf	3,6	;RP1=0, select bank1
  7819  0B72  0836               	movf	sprintf@prec^(0+128),w
  7820  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  7821  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  7822  0B75  00DE               	movwf	??_sprintf
  7823  0B76  3001               	movlw	1
  7824  0B77                     u4165:	
  7825  0B77  1003               	clrc
  7826  0B78  0DDE               	rlf	??_sprintf,f
  7827  0B79  3EFF               	addlw	-1
  7828  0B7A  1D03               	skipz
  7829  0B7B  2B77               	goto	u4165
  7830  0B7C  1003               	clrc
  7831  0B7D  0D5E               	rlf	??_sprintf,w
  7832  0B7E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7833  0B7F  0084               	movwf	4
  7834  0B80  160A  118A  200A  120A  158A  	fcall	stringdir
  7835  0B85  00F0               	movwf	___lldiv@divisor
  7836  0B86  160A  118A  200A  120A  158A  	fcall	stringdir
  7837  0B8B  00F1               	movwf	___lldiv@divisor+1
  7838  0B8C  160A  118A  200A  120A  158A  	fcall	stringdir
  7839  0B91  00F2               	movwf	___lldiv@divisor+2
  7840  0B92  160A  118A  200A  120A  158A  	fcall	stringdir
  7841  0B97  00F3               	movwf	___lldiv@divisor+3
  7842  0B98  1683               	bsf	3,5	;RP0=1, select bank1
  7843  0B99  1303               	bcf	3,6	;RP1=0, select bank1
  7844  0B9A  082F               	movf	(sprintf@val+3)^(0+128),w
  7845  0B9B  00F7               	movwf	___lldiv@dividend+3
  7846  0B9C  082E               	movf	(sprintf@val+2)^(0+128),w
  7847  0B9D  00F6               	movwf	___lldiv@dividend+2
  7848  0B9E  082D               	movf	(sprintf@val+1)^(0+128),w
  7849  0B9F  00F5               	movwf	___lldiv@dividend+1
  7850  0BA0  082C               	movf	sprintf@val^(0+128),w
  7851  0BA1  00F4               	movwf	___lldiv@dividend
  7852  0BA2  160A  118A  23CA  120A  158A  	fcall	___lldiv
  7853  0BA7  0873               	movf	?___lldiv+3,w
  7854  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  7855  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  7856  0BAA  00A7               	movwf	___llmod@dividend+3
  7857  0BAB  0872               	movf	?___lldiv+2,w
  7858  0BAC  00A6               	movwf	___llmod@dividend+2
  7859  0BAD  0871               	movf	?___lldiv+1,w
  7860  0BAE  00A5               	movwf	___llmod@dividend+1
  7861  0BAF  0870               	movf	?___lldiv,w
  7862  0BB0  00A4               	movwf	___llmod@dividend
  7863  0BB1  160A  118A  22C4  120A  158A  	fcall	___llmod
  7864  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  7865  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  7866  0BB8  0820               	movf	?___llmod,w
  7867  0BB9  3E30               	addlw	48
  7868  0BBA  00DF               	movwf	??_sprintf+1
  7869  0BBB  085F               	movf	??_sprintf+1,w
  7870  0BBC  1683               	bsf	3,5	;RP0=1, select bank1
  7871  0BBD  1303               	bcf	3,6	;RP1=0, select bank1
  7872  0BBE  00B8               	movwf	sprintf@c^(0+128)
  7873                           
  7874                           ;doprnt.c: 1523: }
  7875                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7876  0BBF  0838               	movf	sprintf@c^(0+128),w
  7877  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  7878  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  7879  0BC2  2B49               	goto	L7
  7880  0BC3                     l2641:	
  7881                           ;doprnt.c: 1525: }
  7882                           ;doprnt.c: 1533: }
  7883                           ;doprnt.c: 1535: alldone:
  7884                           
  7885                           
  7886                           ;doprnt.c: 1538: *sp = 0;
  7887  0BC3  0835               	movf	sprintf@sp^(0+128),w
  7888  0BC4  0084               	movwf	4
  7889  0BC5  1383               	bcf	3,7	;select IRP bank0
  7890  0BC6  0180               	clrf	0
  7891  0BC7  0008               	return
  7892  0BC8                     L11:	
  7893  0BC8                     __end_of_sprintf:	
  7894                           ;doprnt.c: 1540: return 0;
  7895                           ;	Return value of _sprintf is never used
  7896                           
  7897  0BC8  120A  118A  2842   	ljmp	l2639


Data Sizes:
    Strings     82
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      71
    BANK1            80     46      46
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_6(CODE[13]), STR_5(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@s(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcdPrint@a	PTR unsigned char  size(2) Largest target is 17
		 -> main@s(BANK1[16]), STR_4(CODE[16]), STR_3(CODE[17]), STR_2(CODE[9]), 
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___bmul
    _fround->___bmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _lcdSetCursor->_lcdCmd
    _lcdPrint->_lcdWriteChar
    _lcdWriteChar->_lcdPort
    _lcdInit->_lcdCmd
    _lcdClear->_lcdCmd
    _lcdCmd->_lcdPort

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   35363
                                             68 BANK0      3     3      0
                                             25 BANK1     21    21      0
                           _lcdClear
                            _lcdInit
                           _lcdPrint
                       _lcdSetCursor
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   33611
                                             58 BANK0     10     6      4
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3    7091
                                             23 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              16    13      3    6893
                                             23 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3478
                                              7 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     560
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1382
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1790
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     583
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2893
                                             52 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2720
                                             39 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     560
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         7     6      1     698
                                              4 COMMON     7     6      1
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2     586
                                              5 COMMON     7     5      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (2) _lcdWriteChar                                         4     4      0     178
                                              1 COMMON     4     4      0
                            _lcdPort
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     2      0     198
                                              4 COMMON     2     2      0
                             _lcdCmd
                            _lcdPort
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                             0     0      0     110
                             _lcdCmd
 ---------------------------------------------------------------------------------
 (2) _lcdCmd                                               3     3      0     110
                                              1 COMMON     3     3      0
                            _lcdPort
 ---------------------------------------------------------------------------------
 (3) _lcdPort                                              1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdClear
     _lcdCmd
       _lcdPort
   _lcdInit
     _lcdCmd
       _lcdPort
     _lcdPort
   _lcdPrint
     _lcdWriteChar
       _lcdPort
   _lcdSetCursor
     _lcdCmd
       _lcdPort
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     2E      2E       7       57.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 31 16:42:19 2019

                      pc 0002           ___bmul@product 0025              __CFG_CP$OFF 0000  
                     l23 1189                       l24 118C                       l25 1190  
                     l26 1191                       l27 1195                       l28 1196  
                     l60 171E                       l29 119A             ___awdiv@sign 0021  
                     fsr 0004      ___wmul@multiplicand 0072             ___ftadd@exp1 0053  
           ___ftadd@exp2 0052             ___ftadd@sign 0051                      l112 012C  
                    l145 04CA                      l501 15B5                      l166 0A9F  
                    l511 163A                      l432 0A71                      l424 0A28  
                    l266 11E1                      l451 14D4                      l452 14DC  
                    l444 14BF                      l552 1569                      l475 08EA  
                    _RD2 0042                      _RD3 0043                      _RD4 0044  
                    _RD5 0045                      _RD6 0046                      _RD7 0047  
           __CFG_CPD$OFF 0000                      fsr0 0004                      indf 0000  
           ___awmod@sign 0076             __CFG_FOSC$HS 0000              _sprintf$553 00A0  
         ??_lcdWriteChar 0071            lcdWriteChar@a 0074            lcdWriteChar@y 0073  
           __CFG_LVP$OFF 0000                     l2101 163D                     l2013 0E29  
                   l2111 096C                     l2031 0F73                     l2023 0EB6  
                   l2203 11BF                     l2019 0E97                     l2213 150F  
                   l2117 098B                     l2037 0FE1                     l2231 1541  
                   l2151 0A66                     l2143 0A49                     l2127 09D2  
                   l2241 156C                     l2233 1551                     l2153 0A74  
                   l2145 0A59                     l2081 15F6                     l2073 15D6  
                   l2049 116D                     l2315 1254                     l2091 1612  
                   l2059 159D                     l1701 14A4                     l2245 157A  
                   l2093 1622                     l2413 0162                     l2405 012E  
                   l2175 1394                     l1711 14CE                     l1703 14A9  
                   l2239 155E                     l2255 13DA                     l2159 11D9  
                   l2423 01A1                     l2407 014A                     l2361 0807  
                   l2265 1412                     l2257 13EA                     l2281 12DE  
                   l2521 0557                     l2179 13BB                     l2099 162F  
                   l1811 1290                     l1803 128A                     l2611 0AE2  
                   l2603 0ABD                     l2507 0485                     l2451 0295  
                   l2371 006E                     l1709 14C4                     l2269 141F  
                   l2285 12FC                     l1813 129E                     l1821 12B7  
                   l2541 05BD                     l2533 058A                     l2509 04A7  
                   l2279 12CE                     l1735 1173                     l1911 1674  
                   l2615 0B13                     l2527 0570                     l2463 0319  
                   l2455 02DB                     l2447 0278                     l2439 020B  
                   l2289 1309                     l2297 0010                     l1761 1329  
                   l1825 12BF                     l1817 12AC                     l1905 165E  
                   l2625 0B38                     l2617 0B17                     l2609 0ADE  
                   l2561 0730                     l2481 03E1                     l2641 0BC3  
                   l2377 0086                     l2385 00CA                     l1835 086B  
                   l2299 0022                     l1771 1331                     l1755 131E  
                   l1739 1179                     l1923 16B3                     l2619 0B1B  
                   l2555 0717                     l2467 0330                     l2563 0735  
                   l1845 0881                     l1773 133F                     l2637 0B59  
                   l2573 0769                     l2493 0437                     l2477 0372  
                   l2397 00E3                     l1695 1491                     l1863 08B0  
                   l1839 0872                     l1783 1360                     l1935 16DB  
                   l1927 16C3                     l2591 07CF                     l2487 03E7  
                   l2399 0126                     l2639 0042                     l1881 08FC  
                   l1865 08BC                     l1857 089B                     l2585 077F  
                   l2497 046D                     l1699 1498                     l1875 08DA  
                   l1867 08C1                     l1787 1368                     l1779 1355  
                   l1939 16EB                     l2595 0A7D                     l2579 0779  
                   l1885 090E                     l1877 08E6                     l1869 08C5  
                   l1895 0931                     l1799 1283                     l1997 0D33  
                   l1989 0CA9                     STR_1 10B5                     STR_2 10CF  
                   STR_3 1086                     STR_4 1097                     STR_5 10A7  
                   STR_6 10C2                     u2205 14E3                     u2125 149D  
                   u2145 14B8                     u3105 09D4                     u3115 0A03  
                   u3035 1613                     u2315 1334                     u2165 14C7  
                   u3215 11E2                     u2335 1340                     u2415 1293  
                   u3225 11E9                     u3065 1631                     u2345 134C  
                   u3251 1387                     u3155 0A4A                     u2355 1356  
                   u2435 12A4                     u4115 0AD3                     u4035 0784  
                   u3252 1388                     u3253 138D                     u3325 1516  
                   u2445 12AD                     u4125 0AFB                     u4045 07C1  
                   u3254 138E                     u3271 13AE                     u4207 1782  
                   u3272 13AF                     u3273 13B4                     u2625 08C6  
                   u3425 13DE                     u3185 0A68                     u4065 07E8  
                   u4217 17F9                     u3274 13B5                     u4227 1219  
                   u3355 1542                     u3515 12EC                     u4075 0A96  
                   u4237 1229                     u2565 089C                     u3445 13EC  
                   u3525 12FD                     u4165 0B77                     u4247 1438  
                   u2655 08DB                     u3455 1401                     u2735 1680  
                   u4257 1447                     u3385 1560                     u3465 1413  
                   u3545 0015                     u2825 16EC                     u2745 1692  
                   u4267 1455                     u2595 08B1                     u2835 16F4  
                   u4277 11AD                     u3805 0317                     u3725 01BB  
                   u4197 174D                     u2855 1209                     u3575 123B  
                   u3495 12D2                     u2775 16C4                     u2785 16CC  
                   u3905 04D9                     u3595 1260                     u3835 03EC  
                   u3925 0579                     u3845 0429                     u3765 02A0  
                   u2975 15D8                     u3935 0586                     u3775 02E6  
                   u2985 15E9                     u2995 15F7                     u3955 0631  
                   u3965 06C3                     u3885 0490             __CFG_WRT$OFF 0000  
                   _main 1719             ___ftpack@arg 0070             ___ftpack@exp 0073  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0000  
      ___bmul@multiplier 0026             ___ftmul@cntr 0035             ___ftmul@sign 0036  
           ___fttol@exp1 004D             ___fttol@lval 0049                    ?_main 0070  
        __end_of___awdiv 136D          __end_of___ftadd 094B            __CFG_WDTE$OFF 0000  
        __end_of___awmod 12C4          __end_of___ftneg 000C          __end_of___lldiv 1428  
        __end_of___ftmul 1719          ___awdiv@divisor 0077          __end_of___llmod 1312  
        __end_of___ftsub 11D7          __end_of___fttol 1583          ___awdiv@counter 0020  
                  _PORTD 0008                    _TRISD 0088             ___lltoft@exp 007D  
        __end_of_lcdInit 1489          __end_of_lcdPort 119C          __end_of_dpowers 1038  
                  _scale 0D65          __end_of_isdigit 116F            ___ftpack@sign 0074  
                  main@f 00C9                    main@s 00B9                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 0BC8  
        __initialization 07FC             __end_of_main 1800                   ??_main 0064  
          ___fttol@sign1 0048     __end_of_lcdSetCursor 1279     __size_of__tdiv_to_l_ 00C3  
       ___llmod@dividend 0024                   ?_scale 0037         ___awdiv@dividend 0079  
       __end_of___ftpack 14F5         __end_of___lltoft 0037         __end_of_lcdClear 1161  
         __CFG_PWRTE$OFF 0000         __end_of_lcdPrint 0842         __end_of__powers_ 105F  
                 ___bmul 116F                   ___ftge 136D                   ___wmul 11D7  
              ??___awdiv 007B     __end_of_lcdWriteChar 122F                ??___ftadd 004D  
              ??___awmod 0074                ??___ftneg 0073                ??___lldiv 0078  
                 _lcdCmd 119C                ??___ftmul 002D                ??___llmod 0028  
              ??___ftsub 007E                ??___fttol 0044                   _fround 0BCB  
       ___awdiv@quotient 0022          ___awmod@divisor 0070                ??_lcdInit 0074  
        ___awmod@counter 0075                ??_lcdPort 0070    ___ftmul@f3_as_product 0032  
              ??_isdigit 0070                ??_sprintf 005E  __end_of__initialization 07FC  
             ___ftadd@f1 0047               ___ftadd@f2 004A               ___ftge@ff1 0070  
             ___ftge@ff2 0073               ___ftneg@f1 0070      ___bmul@multiplicand 0024  
             ___ftmul@f1 0027               ___ftmul@f2 002A               ___ftsub@f1 0057  
             ___ftsub@f2 0054               ___fttol@f1 0040           __pcstackCOMMON 0070  
             ___lltoft@c 0078            __end_of_scale 1000               __div_to_l_ 094B  
       lcdWriteChar@temp 0072          __div_to_l_@exp1 0025          __div_to_l_@cntr 0024  
                ??_scale 003A          __div_to_l_@quot 0020             sprintf@width 00A6  
          __div_to_l_@f1 0070            __div_to_l_@f2 0073               __pmaintext 1719  
                ?___bmul 0024                  ?___ftge 0070                  ?___wmul 0070  
                ?_lcdCmd 0070    __size_of_lcdSetCursor 004A                  ?_fround 0037  
              ?___ftpack 0070                ?___lltoft 0078                ?_lcdClear 0070  
              ?_lcdPrint 0075               __stringtab 1000    __size_of_lcdWriteChar 0037  
           _lcdSetCursor 122F        __end_of__npowers_ 1086          __size_of___bmul 0013  
        __size_of___ftge 005D                  ___awdiv 1312                  ___ftadd 0842  
                ___awmod 1279                  ___ftneg 0004                  ___lldiv 13CA  
        __size_of___wmul 0021                  ___ftmul 1646                  ___llmod 12C4  
                ___ftsub 11B6                  ___fttol 14F5               _fround$550 0043  
             _fround$551 0040          __size_of_lcdCmd 001A               ??___ftpack 0075  
        __size_of_fround 019A                  _lcdInit 1428               ??___lltoft 007C  
                __ptext1 0037                  __ptext2 0D65                  __ptext3 1161  
                __ptext4 0BCB                  __ptext5 1646                  __ptext6 116F  
                __ptext7 1279                  __ptext8 1312                  __ptext9 1583  
                _lcdPort 1182              ?__div_to_l_ 0070                  _dpowers 1010  
                _isdigit 1161         ___awmod@dividend 0072                  lcdCmd@a 0073  
             ??_lcdClear 0074               ??_lcdPrint 0077                  _sprintf 0037  
           _lcdWriteChar 11F8     end_of_initialization 07FC          ___lldiv@divisor 0070  
        ___lldiv@counter 007D                  psplit$0 80023           __tdiv_to_l_@f1 0070  
         __tdiv_to_l_@f2 0073            ??__tdiv_to_l_ 0076      __size_of__div_to_l_ 0132  
            ___ftmul@exp 0031           __end_of___bmul 1182           __end_of___ftge 13CA  
         __end_of___wmul 11F8           __end_of_lcdCmd 11B6        pnum$text1_split_1 0023  
         __end_of_fround 0D65      start_initialization 07FC      __end_of__tdiv_to_l_ 1646  
        ___llmod@divisor 0020          ___llmod@counter 0029                 ??___bmul 007C  
               ??___ftge 0076                 ??___wmul 0074                 ??_lcdCmd 0071  
               ??_fround 003A            sprintf@tmpval 00A8               fround@prec 0046  
      __size_of___ftpack 006C        __size_of___lltoft 002B                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0        __size_of_lcdClear 000B  
      __size_of_lcdPrint 003D              sprintf@flag 00A4              sprintf@fval 00B2  
            sprintf@prec 00B6                 ?___awdiv 0077                 ?___ftadd 0047  
               ?___awmod 0070                 ?___ftneg 0070                 ?___lldiv 0070  
               ?___ftmul 0027                 ?___llmod 0020                 ?___ftsub 0054  
              __npowers_ 105F                 ?___fttol 0040                __pstrings 1000  
               ?_lcdInit 0070              __tdiv_to_l_ 1583                 ?_lcdPort 0070  
           ??__div_to_l_ 0076                 ?_isdigit 0070                _scale$552 003C  
               ?_sprintf 005A           __size_of_scale 029B           ___wmul@product 0074  
     __end_of__div_to_l_ 0A7D                lcdPrint@a 0075                lcdPrint@i 007A  
            __stringbase 100F        ___wmul@multiplier 0070         lcdSetCursor@temp 007A  
       __size_of___awdiv 005B         __size_of___ftadd 0109         __size_of___awmod 004B  
       __size_of___ftneg 0008         __size_of___lldiv 005E         __size_of___ftmul 00D3  
       __size_of___llmod 004E         __size_of___ftsub 0021         __size_of___fttol 008E  
               ___ftpack 1489       __end_of__stringtab 1010                 ___lltoft 000C  
            _isdigit$332 0070         __size_of_lcdInit 0061         __size_of_lcdPort 001A  
             sprintf@exp 00B0               sprintf@val 00AC         __size_of_isdigit 000E  
               _lcdClear 1156                 __ptext10 094B                 __ptext11 11D7  
               __ptext20 136D                 __ptext12 000C                 __ptext21 122F  
               __ptext13 12C4                 __ptext22 0805                 __ptext14 13CA  
               __ptext23 11F8                 __ptext15 14F5                 __ptext24 1428  
               __ptext16 11B6                 __ptext25 1156                 __ptext17 0842  
               __ptext26 119C                 __ptext18 1489                 __ptext27 1182  
               __ptext19 0004                 _lcdPrint 0805                 __powers_ 1038  
       __size_of_sprintf 0B91            lcdSetCursor@a 0077            lcdSetCursor@b 0074  
          lcdSetCursor@y 0079            lcdSetCursor@z 0078            __size_of_main 00E7  
              pnum$text1 0008                 lcdPort@a 0070                 main@a_76 00CC  
               isdigit@c 0071                 scale@scl 003F                sprintf@ap 00A3  
       __tdiv_to_l_@exp1 0025         __tdiv_to_l_@cntr 0024                sprintf@sp 00B5  
       __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074            ?_lcdSetCursor 0074  
              stringcode 100A             ?__tdiv_to_l_ 0070                 sprintf@c 00B8  
               sprintf@f 005A         ___lldiv@quotient 0079                 stringdir 100A  
               stringtab 1000            ?_lcdWriteChar 0070           ??_lcdSetCursor 0075  
